import{C as we,S as El,i as wl,n as _l,e as s,t as l,j as u,c as e,a as n,g as c,d as t,m as i,b as o,K as g,f as gl,F as a,L as Ml,s as As,J as Oo,M as Ts,N as zl,O as xl}from"../chunks/vendor-7ffe92ef.js";const Ro=d=>{const{subscribe:p,set:v}=we({value:d});return{subscribe:p,update:m=>{if(m){const E=m(d);E!==void 0&&E!==d&&(d=E)}v({value:d})},set:m=>{d=m,v({value:d})}}},Dl=d=>{let p=!1;const v={value:d},m={value:d},{subscribe:E,set:x}=we(v);return{subscribe:E,update:D=>{p=!p;const _=p?m:v;if(D){const M=D(d);M!==void 0&&M!==d&&(d=_.value=M)}x(_)},set:D=>{d=v.value=m.value=D,x((p=!p)?m:v)}}},Cl='<span class="token keyword">const</span> writableMap <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Pl=`$writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Ol=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,Rl='<span class="token keyword">const</span> writableMapCloned <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Hl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,yl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,Al='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Tl=`$derivedWritableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Wl=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,Ll='<span class="token keyword">const</span> mutableMap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Sl=`$mutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Fl=`mutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Nl='<span class="token keyword">const</span> fastMutableMap <span class="token operator">=</span> <span class="token function">fastMutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',$l=`$fastMutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Bl=`fastMutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Il='<span class="token keyword">const</span> mutableMapManual <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',ql=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,jl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Vl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$mutableMapManual <span class="token operator">=</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">;</span>`,Gl='$mutableMapManual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Kl='mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>';var b={ADef:Cl,ARead:Pl,AWrite:Ol,BDef:Rl,BRead:Hl,BWrite:yl,CDef:Al,CRead:Tl,CWrite:Wl,DDef:Ll,DRead:Sl,DWrite:Fl,EDef:Nl,ERead:$l,EWrite:Bl,FDef:Il,FRead:ql,F1Write:jl,F2Write:Vl,F3Write:Gl,F4Write:Kl};function Ul(d){let p,v,m,E,x,D,_,M,N,B,y,va,ra,z,ua,ia,js,k,ha,_e,ge,da,Me,ze,I,xe,ma,De,Ce,Pe,C,fa,Ho=b.ADef+"",Oe,q,j,ba,Ws=d[0].get("a")+"",Vs,Re,Ea,yo=b.ARead+"",He,A,ye,wa,Ae,Te,V,We,Wn="{",Le,Se,Fe,Ne,_a,Ao=b.AWrite+"",$e,G,Be,ga,Ie,qe,je,P,Ma,To=b.BDef+"",Ve,K,U,za,Ls=d[1].get("a")+"",Gs,Ge,xa,Wo=b.BRead+"",Ke,T,Ue,Da,Qe,Je,Ca,Xe,Ye,Ze,Pa,Lo=b.BWrite+"",at,st,et,Q,tt,Oa,nt,ot,lt,ct,pt,W,rt,Ra,ut,it,Ha,dt,kt,vt,O,ya,So=b.CDef+"",ht,J,X,Aa,Ss=d[3].value.get("a")+"",Ks,mt,Ta,Fo=b.CRead+"",ft,Y,bt,Wa,Et,wt,_t,La,No=b.CWrite+"",gt,Z,Mt,Sa,Fa,zt,xt,Dt,R,Na,$o=b.DDef+"",Ct,aa,sa,$a,Fs=d[4].value.get("a")+"",Us,Pt,Ba,Bo=b.DRead+"",Ot,L,Rt,Ia,qa,Ht,yt,ja,At,Tt,Wt,Va,Io=b.DWrite+"",Lt,ea,St,Ga,Ka,Ft,Nt,$t,H,Ua,qo=b.EDef+"",Bt,ta,na,Qa,Ns=d[5].value.get("a")+"",Qs,It,Ja,jo=b.ERead+"",qt,S,jt,Xa,Ya,Vt,Gt,Za,as,Kt,Ut,Qt,ss,Vo=b.EWrite+"",Jt,oa,Xt,es,ts,Yt,Zt,an,ns,Go=b.FDef+"",sn,f,la,ca,os,$s=d[2].value.get("a")+"",Js,en,ls,Ko=b.FRead+"",tn,F,nn,cs,ps,on,ln,rs,cn,pn,rn,us,Uo=b.F1Write+"",un,$,dn,is,kn,vn,ds,hn,mn,fn,ks,Qo=b.F2Write+"",bn,ka,En,vs,wn,_n,gn,hs,Jo=b.F3Write+"",Mn,Bs,zn,xn,ms,Xo=b.F4Write+"",Dn,Cn,Pn,pa,fs,On,bs,Rn,Hn,Is,Es,yn,An,Ln;return{c(){p=s("main"),v=s("header"),m=s("h1"),E=s("a"),x=l("mutable"),D=u(),_=s("blockquote"),M=s("strong"),N=l("!! this prototype is now a library"),B=l(`:
			`),y=s("a"),va=l("@feltcoop/svelte-mutable-store"),ra=u(),z=s("blockquote"),ua=l("using mutable values in Svelte stores with the "),ia=s("code"),js=l("immutable"),k=l(` compiler flag \u2014
			`),ha=s("a"),_e=l("learn more on GitHub"),ge=u(),da=s("button"),Me=l("click me to make number++ go up"),ze=u(),I=s("h2"),xe=l("A. "),ma=s("code"),De=l("writable"),Ce=l(" store (broken! D:)"),Pe=u(),C=s("section"),fa=s("pre"),Oe=u(),q=s("div"),j=s("p"),ba=s("span"),Vs=l(Ws),Re=u(),Ea=s("span"),He=u(),A=s("p"),ye=l("fails to update as a "),wa=s("code"),Ae=l("writable"),Te=l(" store because "),V=s("code"),We=l("immutable="),Le=l(Wn),Se=l("true}"),Fe=l(` and
				we're mutating the map`),Ne=u(),_a=s("pre"),$e=u(),G=s("h2"),Be=l("B. "),ga=s("code"),Ie=l("writable"),qe=l(" store with cloning"),je=u(),P=s("section"),Ma=s("pre"),Ve=u(),K=s("div"),U=s("p"),za=s("span"),Gs=l(Ls),Ge=u(),xa=s("span"),Ke=u(),T=s("p"),Ue=l("works for "),Da=s("code"),Qe=l("Map"),Je=l(`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),Ca=s("code"),Xe=l("WeakMap"),Ye=l(", one of the motivating usecases for this document"),Ze=u(),Pa=s("pre"),at=u(),st=s("hr"),et=u(),Q=s("blockquote"),tt=l("in the examples below, notice that you need to access "),Oa=s("code"),nt=l(".value"),ot=l(" for reads, unlike above"),lt=u(),ct=s("hr"),pt=u(),W=s("h2"),rt=l("C. "),Ra=s("code"),ut=l("derived"),it=l(" from "),Ha=s("code"),dt=l("writable"),kt=l(" store"),vt=u(),O=s("section"),ya=s("pre"),ht=u(),J=s("div"),X=s("p"),Aa=s("span"),Ks=l(Ss),mt=u(),Ta=s("span"),ft=u(),Y=s("p"),bt=l(`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; is error prone because reading the `),Wa=s("code"),Et=l("writable"),wt=l(` isn't
				reactive!`),_t=u(),La=s("pre"),gt=u(),Z=s("h2"),Mt=l("D. "),Sa=s("code"),Fa=s("a"),zt=l("mutable"),xt=l(" store"),Dt=u(),R=s("section"),Na=s("pre"),Ct=u(),aa=s("div"),sa=s("p"),$a=s("span"),Us=l(Fs),Pt=u(),Ba=s("span"),Ot=u(),L=s("p"),Rt=l("works because it's a "),Ia=s("code"),qa=s("a"),Ht=l("mutable"),yt=l(`
				store; doesn't clone the map; however notice that you need to access `),ja=s("code"),At=l(".value"),Tt=l(" on reads"),Wt=u(),Va=s("pre"),Lt=u(),ea=s("h2"),St=l("E. "),Ga=s("code"),Ka=s("a"),Ft=l("fastMutable"),Nt=l(" store"),$t=u(),H=s("section"),Ua=s("pre"),Bt=u(),ta=s("div"),na=s("p"),Qa=s("span"),Qs=l(Ns),It=u(),Ja=s("span"),qt=u(),S=s("p"),jt=l("works because it's a "),Xa=s("code"),Ya=s("a"),Vt=l("fastMutable"),Gt=l(`
				store, which compared to
				`),Za=s("code"),as=s("a"),Kt=l("mutable"),Ut=l(` is slightly more efficient because it swaps between two stable object references, so there's
				no extra garbage created, but it doesn't compose as an immutable value stream, so it may be a
				dangerously too-clever design`),Qt=u(),ss=s("pre"),Jt=u(),oa=s("h2"),Xt=l("F. "),es=s("code"),ts=s("a"),Yt=l("mutable"),Zt=l(" store with manual update and set"),an=u(),ns=s("pre"),sn=u(),f=s("section"),la=s("div"),ca=s("p"),os=s("span"),Js=l($s),en=u(),ls=s("span"),tn=u(),F=s("p"),nn=l("works because it's a "),cs=s("code"),ps=s("a"),on=l("mutable"),ln=l(`
				store, but mutates the value directly and then manually calls `),rs=s("code"),cn=l(".update()"),pn=l(`, which
				may be an antipattern`),rn=u(),us=s("pre"),un=u(),$=s("p"),dn=l("an alternative using the store's "),is=s("code"),kn=l("set"),vn=l(` method, which is extra awkward because of
			the `),ds=s("code"),hn=l(".value"),mn=l(":"),fn=u(),ks=s("pre"),bn=u(),ka=s("p"),En=l("and you can set a new value if you need to, but if this is all you need, prefer a "),vs=s("code"),wn=l("writable"),_n=l(":"),gn=u(),hs=s("pre"),Mn=u(),Bs=s("p"),zn=l("or:"),xn=u(),ms=s("pre"),Dn=u(),Cn=s("hr"),Pn=u(),pa=s("footer"),fs=s("p"),On=l("want to discuss or help with some open questions? "),bs=s("a"),Rn=l("go here"),Hn=u(),Is=s("p"),Es=s("a"),yn=l("get the docs and public domain source code on GitHub"),this.h()},l(h){p=e(h,"MAIN",{class:!0});var r=n(p);v=e(r,"HEADER",{});var ws=n(v);m=e(ws,"H1",{class:!0});var Sn=n(m);E=e(Sn,"A",{href:!0});var Fn=n(E);x=c(Fn,"mutable"),Fn.forEach(t),Sn.forEach(t),D=i(ws),_=e(ws,"BLOCKQUOTE",{});var Xs=n(_);M=e(Xs,"STRONG",{});var Nn=n(M);N=c(Nn,"!! this prototype is now a library"),Nn.forEach(t),B=c(Xs,`:
			`),y=e(Xs,"A",{href:!0});var $n=n(y);va=c($n,"@feltcoop/svelte-mutable-store"),$n.forEach(t),Xs.forEach(t),ra=i(ws),z=e(ws,"BLOCKQUOTE",{});var qs=n(z);ua=c(qs,"using mutable values in Svelte stores with the "),ia=e(qs,"CODE",{class:!0});var Bn=n(ia);js=c(Bn,"immutable"),Bn.forEach(t),k=c(qs,` compiler flag \u2014
			`),ha=e(qs,"A",{href:!0});var In=n(ha);_e=c(In,"learn more on GitHub"),In.forEach(t),qs.forEach(t),ws.forEach(t),ge=i(r),da=e(r,"BUTTON",{class:!0});var qn=n(da);Me=c(qn,"click me to make number++ go up"),qn.forEach(t),ze=i(r),I=e(r,"H2",{class:!0});var Ys=n(I);xe=c(Ys,"A. "),ma=e(Ys,"CODE",{class:!0});var jn=n(ma);De=c(jn,"writable"),jn.forEach(t),Ce=c(Ys," store (broken! D:)"),Ys.forEach(t),Pe=i(r),C=e(r,"SECTION",{});var _s=n(C);fa=e(_s,"PRE",{class:!0});var Yo=n(fa);Yo.forEach(t),Oe=i(_s),q=e(_s,"DIV",{class:!0});var Zs=n(q);j=e(Zs,"P",{class:!0});var ae=n(j);ba=e(ae,"SPAN",{class:!0});var Vn=n(ba);Vs=c(Vn,Ws),Vn.forEach(t),Re=i(ae),Ea=e(ae,"SPAN",{class:!0});var Zo=n(Ea);Zo.forEach(t),ae.forEach(t),He=i(Zs),A=e(Zs,"P",{class:!0});var gs=n(A);ye=c(gs,"fails to update as a "),wa=e(gs,"CODE",{class:!0});var Gn=n(wa);Ae=c(Gn,"writable"),Gn.forEach(t),Te=c(gs," store because "),V=e(gs,"CODE",{class:!0});var se=n(V);We=c(se,"immutable="),Le=c(se,Wn),Se=c(se,"true}"),se.forEach(t),Fe=c(gs,` and
				we're mutating the map`),gs.forEach(t),Zs.forEach(t),Ne=i(_s),_a=e(_s,"PRE",{class:!0});var al=n(_a);al.forEach(t),_s.forEach(t),$e=i(r),G=e(r,"H2",{class:!0});var ee=n(G);Be=c(ee,"B. "),ga=e(ee,"CODE",{class:!0});var Kn=n(ga);Ie=c(Kn,"writable"),Kn.forEach(t),qe=c(ee," store with cloning"),ee.forEach(t),je=i(r),P=e(r,"SECTION",{});var Ms=n(P);Ma=e(Ms,"PRE",{class:!0});var sl=n(Ma);sl.forEach(t),Ve=i(Ms),K=e(Ms,"DIV",{class:!0});var te=n(K);U=e(te,"P",{class:!0});var ne=n(U);za=e(ne,"SPAN",{class:!0});var Un=n(za);Gs=c(Un,Ls),Un.forEach(t),Ge=i(ne),xa=e(ne,"SPAN",{class:!0});var el=n(xa);el.forEach(t),ne.forEach(t),Ke=i(te),T=e(te,"P",{class:!0});var zs=n(T);Ue=c(zs,"works for "),Da=e(zs,"CODE",{class:!0});var Qn=n(Da);Qe=c(Qn,"Map"),Qn.forEach(t),Je=c(zs,`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),Ca=e(zs,"CODE",{class:!0});var Jn=n(Ca);Xe=c(Jn,"WeakMap"),Jn.forEach(t),Ye=c(zs,", one of the motivating usecases for this document"),zs.forEach(t),te.forEach(t),Ze=i(Ms),Pa=e(Ms,"PRE",{class:!0});var tl=n(Pa);tl.forEach(t),Ms.forEach(t),at=i(r),st=e(r,"HR",{}),et=i(r),Q=e(r,"BLOCKQUOTE",{style:!0});var oe=n(Q);tt=c(oe,"in the examples below, notice that you need to access "),Oa=e(oe,"CODE",{class:!0});var Xn=n(Oa);nt=c(Xn,".value"),Xn.forEach(t),ot=c(oe," for reads, unlike above"),oe.forEach(t),lt=i(r),ct=e(r,"HR",{}),pt=i(r),W=e(r,"H2",{class:!0});var xs=n(W);rt=c(xs,"C. "),Ra=e(xs,"CODE",{class:!0});var Yn=n(Ra);ut=c(Yn,"derived"),Yn.forEach(t),it=c(xs," from "),Ha=e(xs,"CODE",{class:!0});var Zn=n(Ha);dt=c(Zn,"writable"),Zn.forEach(t),kt=c(xs," store"),xs.forEach(t),vt=i(r),O=e(r,"SECTION",{});var Ds=n(O);ya=e(Ds,"PRE",{class:!0});var nl=n(ya);nl.forEach(t),ht=i(Ds),J=e(Ds,"DIV",{class:!0});var le=n(J);X=e(le,"P",{class:!0});var ce=n(X);Aa=e(ce,"SPAN",{class:!0});var ao=n(Aa);Ks=c(ao,Ss),ao.forEach(t),mt=i(ce),Ta=e(ce,"SPAN",{class:!0});var ol=n(Ta);ol.forEach(t),ce.forEach(t),ft=i(le),Y=e(le,"P",{class:!0});var pe=n(Y);bt=c(pe,`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; is error prone because reading the `),Wa=e(pe,"CODE",{class:!0});var so=n(Wa);Et=c(so,"writable"),so.forEach(t),wt=c(pe,` isn't
				reactive!`),pe.forEach(t),le.forEach(t),_t=i(Ds),La=e(Ds,"PRE",{class:!0});var ll=n(La);ll.forEach(t),Ds.forEach(t),gt=i(r),Z=e(r,"H2",{class:!0});var re=n(Z);Mt=c(re,"D. "),Sa=e(re,"CODE",{class:!0});var eo=n(Sa);Fa=e(eo,"A",{href:!0});var to=n(Fa);zt=c(to,"mutable"),to.forEach(t),eo.forEach(t),xt=c(re," store"),re.forEach(t),Dt=i(r),R=e(r,"SECTION",{});var Cs=n(R);Na=e(Cs,"PRE",{class:!0});var cl=n(Na);cl.forEach(t),Ct=i(Cs),aa=e(Cs,"DIV",{class:!0});var ue=n(aa);sa=e(ue,"P",{class:!0});var ie=n(sa);$a=e(ie,"SPAN",{class:!0});var no=n($a);Us=c(no,Fs),no.forEach(t),Pt=i(ie),Ba=e(ie,"SPAN",{class:!0});var pl=n(Ba);pl.forEach(t),ie.forEach(t),Ot=i(ue),L=e(ue,"P",{class:!0});var Ps=n(L);Rt=c(Ps,"works because it's a "),Ia=e(Ps,"CODE",{class:!0});var oo=n(Ia);qa=e(oo,"A",{href:!0});var lo=n(qa);Ht=c(lo,"mutable"),lo.forEach(t),oo.forEach(t),yt=c(Ps,`
				store; doesn't clone the map; however notice that you need to access `),ja=e(Ps,"CODE",{class:!0});var co=n(ja);At=c(co,".value"),co.forEach(t),Tt=c(Ps," on reads"),Ps.forEach(t),ue.forEach(t),Wt=i(Cs),Va=e(Cs,"PRE",{class:!0});var rl=n(Va);rl.forEach(t),Cs.forEach(t),Lt=i(r),ea=e(r,"H2",{class:!0});var de=n(ea);St=c(de,"E. "),Ga=e(de,"CODE",{class:!0});var po=n(Ga);Ka=e(po,"A",{href:!0});var ro=n(Ka);Ft=c(ro,"fastMutable"),ro.forEach(t),po.forEach(t),Nt=c(de," store"),de.forEach(t),$t=i(r),H=e(r,"SECTION",{});var Os=n(H);Ua=e(Os,"PRE",{class:!0});var ul=n(Ua);ul.forEach(t),Bt=i(Os),ta=e(Os,"DIV",{class:!0});var ke=n(ta);na=e(ke,"P",{class:!0});var ve=n(na);Qa=e(ve,"SPAN",{class:!0});var uo=n(Qa);Qs=c(uo,Ns),uo.forEach(t),It=i(ve),Ja=e(ve,"SPAN",{class:!0});var il=n(Ja);il.forEach(t),ve.forEach(t),qt=i(ke),S=e(ke,"P",{class:!0});var Rs=n(S);jt=c(Rs,"works because it's a "),Xa=e(Rs,"CODE",{class:!0});var io=n(Xa);Ya=e(io,"A",{href:!0});var ko=n(Ya);Vt=c(ko,"fastMutable"),ko.forEach(t),io.forEach(t),Gt=c(Rs,`
				store, which compared to
				`),Za=e(Rs,"CODE",{class:!0});var vo=n(Za);as=e(vo,"A",{href:!0});var ho=n(as);Kt=c(ho,"mutable"),ho.forEach(t),vo.forEach(t),Ut=c(Rs,` is slightly more efficient because it swaps between two stable object references, so there's
				no extra garbage created, but it doesn't compose as an immutable value stream, so it may be a
				dangerously too-clever design`),Rs.forEach(t),ke.forEach(t),Qt=i(Os),ss=e(Os,"PRE",{class:!0});var dl=n(ss);dl.forEach(t),Os.forEach(t),Jt=i(r),oa=e(r,"H2",{class:!0});var he=n(oa);Xt=c(he,"F. "),es=e(he,"CODE",{class:!0});var mo=n(es);ts=e(mo,"A",{href:!0});var fo=n(ts);Yt=c(fo,"mutable"),fo.forEach(t),mo.forEach(t),Zt=c(he," store with manual update and set"),he.forEach(t),an=i(r),ns=e(r,"PRE",{class:!0});var kl=n(ns);kl.forEach(t),sn=i(r),f=e(r,"SECTION",{});var w=n(f);la=e(w,"DIV",{class:!0});var me=n(la);ca=e(me,"P",{class:!0});var fe=n(ca);os=e(fe,"SPAN",{class:!0});var bo=n(os);Js=c(bo,$s),bo.forEach(t),en=i(fe),ls=e(fe,"SPAN",{class:!0});var vl=n(ls);vl.forEach(t),fe.forEach(t),tn=i(me),F=e(me,"P",{class:!0});var Hs=n(F);nn=c(Hs,"works because it's a "),cs=e(Hs,"CODE",{class:!0});var Eo=n(cs);ps=e(Eo,"A",{href:!0});var wo=n(ps);on=c(wo,"mutable"),wo.forEach(t),Eo.forEach(t),ln=c(Hs,`
				store, but mutates the value directly and then manually calls `),rs=e(Hs,"CODE",{class:!0});var _o=n(rs);cn=c(_o,".update()"),_o.forEach(t),pn=c(Hs,`, which
				may be an antipattern`),Hs.forEach(t),me.forEach(t),rn=i(w),us=e(w,"PRE",{class:!0});var hl=n(us);hl.forEach(t),un=i(w),$=e(w,"P",{});var ys=n($);dn=c(ys,"an alternative using the store's "),is=e(ys,"CODE",{class:!0});var go=n(is);kn=c(go,"set"),go.forEach(t),vn=c(ys,` method, which is extra awkward because of
			the `),ds=e(ys,"CODE",{class:!0});var Mo=n(ds);hn=c(Mo,".value"),Mo.forEach(t),mn=c(ys,":"),ys.forEach(t),fn=i(w),ks=e(w,"PRE",{class:!0});var ml=n(ks);ml.forEach(t),bn=i(w),ka=e(w,"P",{});var be=n(ka);En=c(be,"and you can set a new value if you need to, but if this is all you need, prefer a "),vs=e(be,"CODE",{class:!0});var zo=n(vs);wn=c(zo,"writable"),zo.forEach(t),_n=c(be,":"),be.forEach(t),gn=i(w),hs=e(w,"PRE",{class:!0});var fl=n(hs);fl.forEach(t),Mn=i(w),Bs=e(w,"P",{});var xo=n(Bs);zn=c(xo,"or:"),xo.forEach(t),xn=i(w),ms=e(w,"PRE",{class:!0});var bl=n(ms);bl.forEach(t),w.forEach(t),Dn=i(r),Cn=e(r,"HR",{}),Pn=i(r),pa=e(r,"FOOTER",{class:!0});var Ee=n(pa);fs=e(Ee,"P",{});var Tn=n(fs);On=c(Tn,"want to discuss or help with some open questions? "),bs=e(Tn,"A",{href:!0});var Do=n(bs);Rn=c(Do,"go here"),Do.forEach(t),Tn.forEach(t),Hn=i(Ee),Is=e(Ee,"P",{});var Co=n(Is);Es=e(Co,"A",{href:!0});var Po=n(Es);yn=c(Po,"get the docs and public domain source code on GitHub"),Po.forEach(t),Co.forEach(t),Ee.forEach(t),r.forEach(t),this.h()},h(){o(E,"href","https://github.com/spiderspace/mutable"),o(m,"class","svelte-16xmzca"),o(y,"href","https://github.com/feltcoop/svelte-mutable-store"),o(ia,"class","svelte-16xmzca"),o(ha,"href","https://github.com/spiderspace/mutable"),o(da,"class","svelte-16xmzca"),o(ma,"class","svelte-16xmzca"),o(I,"class","svelte-16xmzca"),o(fa,"class","panel-inset svelte-16xmzca"),o(ba,"class","count svelte-16xmzca"),o(Ea,"class","read-example svelte-16xmzca"),o(j,"class","count-wrapper panel-outset svelte-16xmzca"),o(wa,"class","svelte-16xmzca"),o(V,"class","svelte-16xmzca"),o(A,"class","count-label svelte-16xmzca"),o(q,"class","count-with-label svelte-16xmzca"),o(_a,"class","panel-inset svelte-16xmzca"),g(C,"--hue",d[12](d[0].get("a")),!1),o(ga,"class","svelte-16xmzca"),o(G,"class","svelte-16xmzca"),o(Ma,"class","panel-inset svelte-16xmzca"),o(za,"class","count svelte-16xmzca"),o(xa,"class","read-example svelte-16xmzca"),o(U,"class","count-wrapper panel-outset svelte-16xmzca"),o(Da,"class","svelte-16xmzca"),o(Ca,"class","svelte-16xmzca"),o(T,"class","count-label svelte-16xmzca"),o(K,"class","count-with-label svelte-16xmzca"),o(Pa,"class","panel-inset svelte-16xmzca"),g(P,"--hue",d[12](d[1].get("a")),!1),o(Oa,"class","svelte-16xmzca"),g(Q,"margin-bottom","0"),o(Ra,"class","svelte-16xmzca"),o(Ha,"class","svelte-16xmzca"),o(W,"class","svelte-16xmzca"),o(ya,"class","panel-inset svelte-16xmzca"),o(Aa,"class","count svelte-16xmzca"),o(Ta,"class","read-example svelte-16xmzca"),o(X,"class","count-wrapper panel-outset svelte-16xmzca"),o(Wa,"class","svelte-16xmzca"),o(Y,"class","count-label svelte-16xmzca"),o(J,"class","count-with-label svelte-16xmzca"),o(La,"class","panel-inset svelte-16xmzca"),g(O,"--hue",d[12](d[3].value.get("a")),!1),o(Fa,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Sa,"class","svelte-16xmzca"),o(Z,"class","svelte-16xmzca"),o(Na,"class","panel-inset svelte-16xmzca"),o($a,"class","count svelte-16xmzca"),o(Ba,"class","read-example svelte-16xmzca"),o(sa,"class","count-wrapper panel-outset svelte-16xmzca"),o(qa,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Ia,"class","svelte-16xmzca"),o(ja,"class","svelte-16xmzca"),o(L,"class","count-label svelte-16xmzca"),o(aa,"class","count-with-label svelte-16xmzca"),o(Va,"class","panel-inset svelte-16xmzca"),g(R,"--hue",d[12](d[4].value.get("a")),!1),o(Ka,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/fastMutable.ts"),o(Ga,"class","svelte-16xmzca"),o(ea,"class","svelte-16xmzca"),o(Ua,"class","panel-inset svelte-16xmzca"),o(Qa,"class","count svelte-16xmzca"),o(Ja,"class","read-example svelte-16xmzca"),o(na,"class","count-wrapper panel-outset svelte-16xmzca"),o(Ya,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/fastMutable.ts"),o(Xa,"class","svelte-16xmzca"),o(as,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Za,"class","svelte-16xmzca"),o(S,"class","count-label svelte-16xmzca"),o(ta,"class","count-with-label svelte-16xmzca"),o(ss,"class","panel-inset svelte-16xmzca"),g(H,"--hue",d[12](d[5].value.get("a")),!1),o(ts,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(es,"class","svelte-16xmzca"),o(oa,"class","svelte-16xmzca"),o(ns,"class","panel-inset svelte-16xmzca"),o(os,"class","count svelte-16xmzca"),o(ls,"class","read-example svelte-16xmzca"),o(ca,"class","count-wrapper panel-outset svelte-16xmzca"),o(ps,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(cs,"class","svelte-16xmzca"),o(rs,"class","svelte-16xmzca"),o(F,"class","count-label svelte-16xmzca"),o(la,"class","count-with-label svelte-16xmzca"),o(us,"class","panel-inset svelte-16xmzca"),o(is,"class","svelte-16xmzca"),o(ds,"class","svelte-16xmzca"),o(ks,"class","panel-inset svelte-16xmzca"),o(vs,"class","svelte-16xmzca"),o(hs,"class","panel-inset svelte-16xmzca"),o(ms,"class","panel-inset svelte-16xmzca"),g(f,"--hue",d[12](d[2].value.get("a")),!1),o(bs,"href","https://github.com/spiderspace/spiderspace/discussions/5"),o(Es,"href","https://github.com/spiderspace/mutable"),o(pa,"class","markup svelte-16xmzca"),o(p,"class","markup column svelte-16xmzca")},m(h,r){gl(h,p,r),a(p,v),a(v,m),a(m,E),a(E,x),a(v,D),a(v,_),a(_,M),a(M,N),a(_,B),a(_,y),a(y,va),a(v,ra),a(v,z),a(z,ua),a(z,ia),a(ia,js),a(z,k),a(z,ha),a(ha,_e),a(p,ge),a(p,da),a(da,Me),a(p,ze),a(p,I),a(I,xe),a(I,ma),a(ma,De),a(I,Ce),a(p,Pe),a(p,C),a(C,fa),fa.innerHTML=Ho,a(C,Oe),a(C,q),a(q,j),a(j,ba),a(ba,Vs),a(j,Re),a(j,Ea),Ea.innerHTML=yo,a(q,He),a(q,A),a(A,ye),a(A,wa),a(wa,Ae),a(A,Te),a(A,V),a(V,We),a(V,Le),a(V,Se),a(A,Fe),a(C,Ne),a(C,_a),_a.innerHTML=Ao,a(p,$e),a(p,G),a(G,Be),a(G,ga),a(ga,Ie),a(G,qe),a(p,je),a(p,P),a(P,Ma),Ma.innerHTML=To,a(P,Ve),a(P,K),a(K,U),a(U,za),a(za,Gs),a(U,Ge),a(U,xa),xa.innerHTML=Wo,a(K,Ke),a(K,T),a(T,Ue),a(T,Da),a(Da,Qe),a(T,Je),a(T,Ca),a(Ca,Xe),a(T,Ye),a(P,Ze),a(P,Pa),Pa.innerHTML=Lo,a(p,at),a(p,st),a(p,et),a(p,Q),a(Q,tt),a(Q,Oa),a(Oa,nt),a(Q,ot),a(p,lt),a(p,ct),a(p,pt),a(p,W),a(W,rt),a(W,Ra),a(Ra,ut),a(W,it),a(W,Ha),a(Ha,dt),a(W,kt),a(p,vt),a(p,O),a(O,ya),ya.innerHTML=So,a(O,ht),a(O,J),a(J,X),a(X,Aa),a(Aa,Ks),a(X,mt),a(X,Ta),Ta.innerHTML=Fo,a(J,ft),a(J,Y),a(Y,bt),a(Y,Wa),a(Wa,Et),a(Y,wt),a(O,_t),a(O,La),La.innerHTML=No,a(p,gt),a(p,Z),a(Z,Mt),a(Z,Sa),a(Sa,Fa),a(Fa,zt),a(Z,xt),a(p,Dt),a(p,R),a(R,Na),Na.innerHTML=$o,a(R,Ct),a(R,aa),a(aa,sa),a(sa,$a),a($a,Us),a(sa,Pt),a(sa,Ba),Ba.innerHTML=Bo,a(aa,Ot),a(aa,L),a(L,Rt),a(L,Ia),a(Ia,qa),a(qa,Ht),a(L,yt),a(L,ja),a(ja,At),a(L,Tt),a(R,Wt),a(R,Va),Va.innerHTML=Io,a(p,Lt),a(p,ea),a(ea,St),a(ea,Ga),a(Ga,Ka),a(Ka,Ft),a(ea,Nt),a(p,$t),a(p,H),a(H,Ua),Ua.innerHTML=qo,a(H,Bt),a(H,ta),a(ta,na),a(na,Qa),a(Qa,Qs),a(na,It),a(na,Ja),Ja.innerHTML=jo,a(ta,qt),a(ta,S),a(S,jt),a(S,Xa),a(Xa,Ya),a(Ya,Vt),a(S,Gt),a(S,Za),a(Za,as),a(as,Kt),a(S,Ut),a(H,Qt),a(H,ss),ss.innerHTML=Vo,a(p,Jt),a(p,oa),a(oa,Xt),a(oa,es),a(es,ts),a(ts,Yt),a(oa,Zt),a(p,an),a(p,ns),ns.innerHTML=Go,a(p,sn),a(p,f),a(f,la),a(la,ca),a(ca,os),a(os,Js),a(ca,en),a(ca,ls),ls.innerHTML=Ko,a(la,tn),a(la,F),a(F,nn),a(F,cs),a(cs,ps),a(ps,on),a(F,ln),a(F,rs),a(rs,cn),a(F,pn),a(f,rn),a(f,us),us.innerHTML=Uo,a(f,un),a(f,$),a($,dn),a($,is),a(is,kn),a($,vn),a($,ds),a(ds,hn),a($,mn),a(f,fn),a(f,ks),ks.innerHTML=Qo,a(f,bn),a(f,ka),a(ka,En),a(ka,vs),a(vs,wn),a(ka,_n),a(f,gn),a(f,hs),hs.innerHTML=Jo,a(f,Mn),a(f,Bs),a(Bs,zn),a(f,xn),a(f,ms),ms.innerHTML=Xo,a(p,Dn),a(p,Cn),a(p,Pn),a(p,pa),a(pa,fs),a(fs,On),a(fs,bs),a(bs,Rn),a(pa,Hn),a(pa,Is),a(Is,Es),a(Es,yn),An||(Ln=Ml(da,"click",d[13]),An=!0)},p(h,[r]){r&1&&Ws!==(Ws=h[0].get("a")+"")&&As(Vs,Ws),r&1&&g(C,"--hue",h[12](h[0].get("a")),!1),r&2&&Ls!==(Ls=h[1].get("a")+"")&&As(Gs,Ls),r&2&&g(P,"--hue",h[12](h[1].get("a")),!1),r&8&&Ss!==(Ss=h[3].value.get("a")+"")&&As(Ks,Ss),r&8&&g(O,"--hue",h[12](h[3].value.get("a")),!1),r&16&&Fs!==(Fs=h[4].value.get("a")+"")&&As(Us,Fs),r&16&&g(R,"--hue",h[12](h[4].value.get("a")),!1),r&32&&Ns!==(Ns=h[5].value.get("a")+"")&&As(Qs,Ns),r&32&&g(H,"--hue",h[12](h[5].value.get("a")),!1),r&4&&$s!==($s=h[2].value.get("a")+"")&&As(Js,$s),r&4&&g(f,"--hue",h[12](h[2].value.get("a")),!1)},i:Oo,o:Oo,d(h){h&&t(p),An=!1,Ln()}}}function Ql(d,p,v){let m,E,x,D,_,M;const N=[["a",1]],B=we(new Map(N));Ts(d,B,k=>v(0,m=k));const y=we(new Map(N));Ts(d,y,k=>v(1,E=k));const va=zl(B,k=>({value:k}));Ts(d,va,k=>v(3,D=k));const ra=Ro(new Map(N));Ts(d,ra,k=>v(4,_=k));const z=Dl(new Map(N));Ts(d,z,k=>v(5,M=k));const ua=Ro(new Map(N));return Ts(d,ua,k=>v(2,x=k)),[m,E,x,D,_,M,B,y,va,ra,z,ua,k=>k*37+"",()=>{m.set("a",m.get("a")+1),B.set(m),E.set("a",E.get("a")+1),xl(y,E=new Map(E),E),ra.update(k=>{k.set("a",k.get("a")+1)}),z.update(k=>{k.set("a",k.get("a")+1)}),x.value.set("a",x.value.get("a")+1),ua.update()}]}class Xl extends El{constructor(p){super();wl(this,p,Ql,Ul,_l,{})}}export{Xl as default};
