import{C as at,S as Dl,i as Cl,n as Pl,e as s,t as o,j as r,c as t,a as n,g as p,d as e,m as i,b as l,K as M,f as Rl,F as a,L as Hl,s as ks,J as Ln,M as fs,N as yl,O as Ol}from"../chunks/vendor-7ffe92ef.js";const Fn=d=>{const{subscribe:c,set:v}=at({value:d});return{subscribe:c,update:b=>{if(b){const E=b(d);E!==void 0&&E!==d&&(d=E)}v({value:d})},set:b=>{d=b,v({value:d})}}},Tl=d=>{let c=!1;const v={value:d},b={value:d},{subscribe:E,set:z}=at(v);return{subscribe:E,update:D=>{if(D){const _=D(d);_!==void 0&&_!==d&&(d=v.value=b.value=_)}z((c=!c)?b:v)},set:D=>{d=v.value=b.value=D,z((c=!c)?b:v)}}},Wl='<span class="token keyword">const</span> writableMap <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Al=`$writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Ll=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,Fl='<span class="token keyword">const</span> writableMapCloned <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Sl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Nl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,$l='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Bl=`$derivedWritableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Il=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,ql='<span class="token keyword">const</span> mutableMap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',jl=`$mutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Vl=`mutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Gl='<span class="token keyword">const</span> fastMutableMap <span class="token operator">=</span> <span class="token function">fastMutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Kl=`$fastMutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Ul=`fastMutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Ql='<span class="token keyword">const</span> mutableMapManual <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Jl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Xl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Yl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$mutableMapManual <span class="token operator">=</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">;</span>`,Zl='$mutableMapManual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',xl='mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>';var m={ADef:Wl,ARead:Al,AWrite:Ll,BDef:Fl,BRead:Sl,BWrite:Nl,CDef:$l,CRead:Bl,CWrite:Il,DDef:ql,DRead:jl,DWrite:Vl,EDef:Gl,ERead:Kl,EWrite:Ul,FDef:Ql,FRead:Jl,F1Write:Xl,F2Write:Yl,F3Write:Zl,F4Write:xl};function ao(d){let c,v,b,E,z,D,_,ca,g,N,ea,S,na,la,C,zs,Ds,k,st,ua,tt,et,nt,P,ra,Sn=m.ADef+"",lt,$,B,ia,vs=d[0].get("a")+"",Cs,ot,da,Nn=m.ARead+"",pt,T,ct,ka,ut,rt,I,it,Ze="{",dt,kt,ft,vt,fa,$n=m.AWrite+"",bt,q,ht,va,mt,Et,wt,R,ba,Bn=m.BDef+"",_t,j,V,ha,bs=d[1].get("a")+"",Ps,Mt,ma,In=m.BRead+"",gt,Ea,zt,Dt,wa,qn=m.BWrite+"",Ct,Pt,Rt,G,Ht,_a,yt,Ot,Tt,Wt,At,W,Lt,Ma,Ft,St,ga,Nt,$t,Bt,H,za,jn=m.CDef+"",It,K,U,Da,hs=d[3].value.get("a")+"",Rs,qt,Ca,Vn=m.CRead+"",jt,Pa,Vt,Gt,Ra,Gn=m.CWrite+"",Kt,Q,Ut,Ha,Qt,Jt,Xt,y,ya,Kn=m.DDef+"",Yt,J,X,Oa,ms=d[4].value.get("a")+"",Hs,Zt,Ta,Un=m.DRead+"",xt,A,ae,Wa,se,te,Aa,ee,ne,le,La,Qn=m.DWrite+"",oe,Y,pe,Fa,ce,ue,re,O,Sa,Jn=m.EDef+"",ie,Z,x,Na,Es=d[5].value.get("a")+"",ys,de,$a,Xn=m.ERead+"",ke,L,fe,Ba,ve,be,Ia,he,me,Ee,qa,Yn=m.EWrite+"",we,aa,_e,ja,Me,ge,ze,Va,Zn=m.FDef+"",De,h,sa,ta,Ga,ws=d[2].value.get("a")+"",Os,Ce,Ka,xn=m.FRead+"",Pe,F,Re,Ua,He,ye,Qa,Oe,Te,We,Ja,al=m.F1Write+"",Ae,oa,Le,Xa,Fe,Se,Ne,Ya,sl=m.F2Write+"",$e,pa,Be,Za,Ie,qe,je,xa,tl=m.F3Write+"",Ve,_s,Ge,Ke,as,el=m.F4Write+"",Ue,Qe,Je,ss,Ms,ts,Xe,Ye,xe;return{c(){c=s("main"),v=s("header"),b=s("h1"),E=s("a"),z=o("mutable"),D=r(),_=s("blockquote"),ca=o("using mutable values in Svelte stores with the "),g=s("code"),N=o("immutable"),ea=o(` compiler flag \u2014
			`),S=s("a"),na=o("learn more on GitHub"),la=r(),C=s("button"),zs=o("click me to make number++ go up"),Ds=r(),k=s("h2"),st=o("A. "),ua=s("code"),tt=o("writable"),et=o(" store (broken! D:)"),nt=r(),P=s("section"),ra=s("pre"),lt=r(),$=s("div"),B=s("p"),ia=s("span"),Cs=o(vs),ot=r(),da=s("span"),pt=r(),T=s("p"),ct=o("fails to update as a "),ka=s("code"),ut=o("writable"),rt=o(" store because "),I=s("code"),it=o("immutable="),dt=o(Ze),kt=o("true}"),ft=o(` and
				we're mutating the map`),vt=r(),fa=s("pre"),bt=r(),q=s("h2"),ht=o("B. cloned "),va=s("code"),mt=o("writable"),Et=o(" store"),wt=r(),R=s("section"),ba=s("pre"),_t=r(),j=s("div"),V=s("p"),ha=s("span"),Ps=o(bs),Mt=r(),ma=s("span"),gt=r(),Ea=s("p"),zt=o("works, but in some cases, causes tremendous garbage and slowness"),Dt=r(),wa=s("pre"),Ct=r(),Pt=s("hr"),Rt=r(),G=s("blockquote"),Ht=o("in the examples below, notice that you need to access "),_a=s("code"),yt=o(".value"),Ot=o(" for reads, unlike above"),Tt=r(),Wt=s("hr"),At=r(),W=s("h2"),Lt=o("C. "),Ma=s("code"),Ft=o("derived"),St=o(" from "),ga=s("code"),Nt=o("writable"),$t=o(" store"),Bt=r(),H=s("section"),za=s("pre"),It=r(),K=s("div"),U=s("p"),Da=s("span"),Rs=o(hs),qt=r(),Ca=s("span"),jt=r(),Pa=s("p"),Vt=o(`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads, and it creates garbage every change`),Gt=r(),Ra=s("pre"),Kt=r(),Q=s("h2"),Ut=o("D. "),Ha=s("code"),Qt=o("mutable"),Jt=o(" store"),Xt=r(),y=s("section"),ya=s("pre"),Yt=r(),J=s("div"),X=s("p"),Oa=s("span"),Hs=o(ms),Zt=r(),Ta=s("span"),xt=r(),A=s("p"),ae=o("works because it's a "),Wa=s("code"),se=o("mutable"),te=o(` store; doesn't clone the map; however notice that
				you need to access `),Aa=s("code"),ee=o(".value"),ne=o(" on reads"),le=r(),La=s("pre"),oe=r(),Y=s("h2"),pe=o("E. "),Fa=s("code"),ce=o("fastMutable"),ue=o(" store"),re=r(),O=s("section"),Sa=s("pre"),ie=r(),Z=s("div"),x=s("p"),Na=s("span"),ys=o(Es),de=r(),$a=s("span"),ke=r(),L=s("p"),fe=o("works because it's a "),Ba=s("code"),ve=o("fastMutable"),be=o(` store, which compared to
				`),Ia=s("code"),he=o("mutable"),me=o(` is slightly more efficient because it swaps between two stable object references,
				but it doesn't compose as an immutable value stream, so it may be a dangerously too-clever design`),Ee=r(),qa=s("pre"),we=r(),aa=s("h2"),_e=o("F. "),ja=s("code"),Me=o("mutable"),ge=o(" store with manual update and set"),ze=r(),Va=s("pre"),De=r(),h=s("section"),sa=s("div"),ta=s("p"),Ga=s("span"),Os=o(ws),Ce=r(),Ka=s("span"),Pe=r(),F=s("p"),Re=o("works because it's a "),Ua=s("code"),He=o("mutable"),ye=o(` store, but mutates the value directly and then
				manually calls `),Qa=s("code"),Oe=o(".update()"),Te=o(", which may be an antipattern"),We=r(),Ja=s("pre"),Ae=r(),oa=s("p"),Le=o("an alternative using the store's "),Xa=s("code"),Fe=o("set"),Se=o(" method:"),Ne=r(),Ya=s("pre"),$e=r(),pa=s("p"),Be=o("and you can set a new value if you need to, but if this is all you need, prefer a "),Za=s("code"),Ie=o("writable"),qe=o(":"),je=r(),xa=s("pre"),Ve=r(),_s=s("p"),Ge=o("or:"),Ke=r(),as=s("pre"),Ue=r(),Qe=s("hr"),Je=r(),ss=s("footer"),Ms=s("p"),ts=s("a"),Xe=o("get the docs and public domain source code on GitHub"),this.h()},l(f){c=t(f,"MAIN",{class:!0});var u=n(c);v=t(u,"HEADER",{});var Ts=n(v);b=t(Ts,"H1",{class:!0});var an=n(b);E=t(an,"A",{href:!0});var sn=n(E);z=p(sn,"mutable"),sn.forEach(e),an.forEach(e),D=i(Ts),_=t(Ts,"BLOCKQUOTE",{});var gs=n(_);ca=p(gs,"using mutable values in Svelte stores with the "),g=t(gs,"CODE",{class:!0});var tn=n(g);N=p(tn,"immutable"),tn.forEach(e),ea=p(gs,` compiler flag \u2014
			`),S=t(gs,"A",{href:!0});var en=n(S);na=p(en,"learn more on GitHub"),en.forEach(e),gs.forEach(e),Ts.forEach(e),la=i(u),C=t(u,"BUTTON",{class:!0});var nn=n(C);zs=p(nn,"click me to make number++ go up"),nn.forEach(e),Ds=i(u),k=t(u,"H2",{class:!0});var Ws=n(k);st=p(Ws,"A. "),ua=t(Ws,"CODE",{class:!0});var ln=n(ua);tt=p(ln,"writable"),ln.forEach(e),et=p(Ws," store (broken! D:)"),Ws.forEach(e),nt=i(u),P=t(u,"SECTION",{});var es=n(P);ra=t(es,"PRE",{class:!0});var nl=n(ra);nl.forEach(e),lt=i(es),$=t(es,"DIV",{class:!0});var As=n($);B=t(As,"P",{class:!0});var Ls=n(B);ia=t(Ls,"SPAN",{class:!0});var on=n(ia);Cs=p(on,vs),on.forEach(e),ot=i(Ls),da=t(Ls,"SPAN",{class:!0});var ll=n(da);ll.forEach(e),Ls.forEach(e),pt=i(As),T=t(As,"P",{class:!0});var ns=n(T);ct=p(ns,"fails to update as a "),ka=t(ns,"CODE",{class:!0});var pn=n(ka);ut=p(pn,"writable"),pn.forEach(e),rt=p(ns," store because "),I=t(ns,"CODE",{class:!0});var Fs=n(I);it=p(Fs,"immutable="),dt=p(Fs,Ze),kt=p(Fs,"true}"),Fs.forEach(e),ft=p(ns,` and
				we're mutating the map`),ns.forEach(e),As.forEach(e),vt=i(es),fa=t(es,"PRE",{class:!0});var ol=n(fa);ol.forEach(e),es.forEach(e),bt=i(u),q=t(u,"H2",{class:!0});var Ss=n(q);ht=p(Ss,"B. cloned "),va=t(Ss,"CODE",{class:!0});var cn=n(va);mt=p(cn,"writable"),cn.forEach(e),Et=p(Ss," store"),Ss.forEach(e),wt=i(u),R=t(u,"SECTION",{});var ls=n(R);ba=t(ls,"PRE",{class:!0});var pl=n(ba);pl.forEach(e),_t=i(ls),j=t(ls,"DIV",{class:!0});var Ns=n(j);V=t(Ns,"P",{class:!0});var $s=n(V);ha=t($s,"SPAN",{class:!0});var un=n(ha);Ps=p(un,bs),un.forEach(e),Mt=i($s),ma=t($s,"SPAN",{class:!0});var cl=n(ma);cl.forEach(e),$s.forEach(e),gt=i(Ns),Ea=t(Ns,"P",{class:!0});var rn=n(Ea);zt=p(rn,"works, but in some cases, causes tremendous garbage and slowness"),rn.forEach(e),Ns.forEach(e),Dt=i(ls),wa=t(ls,"PRE",{class:!0});var ul=n(wa);ul.forEach(e),ls.forEach(e),Ct=i(u),Pt=t(u,"HR",{}),Rt=i(u),G=t(u,"BLOCKQUOTE",{style:!0});var Bs=n(G);Ht=p(Bs,"in the examples below, notice that you need to access "),_a=t(Bs,"CODE",{class:!0});var dn=n(_a);yt=p(dn,".value"),dn.forEach(e),Ot=p(Bs," for reads, unlike above"),Bs.forEach(e),Tt=i(u),Wt=t(u,"HR",{}),At=i(u),W=t(u,"H2",{class:!0});var os=n(W);Lt=p(os,"C. "),Ma=t(os,"CODE",{class:!0});var kn=n(Ma);Ft=p(kn,"derived"),kn.forEach(e),St=p(os," from "),ga=t(os,"CODE",{class:!0});var fn=n(ga);Nt=p(fn,"writable"),fn.forEach(e),$t=p(os," store"),os.forEach(e),Bt=i(u),H=t(u,"SECTION",{});var ps=n(H);za=t(ps,"PRE",{class:!0});var rl=n(za);rl.forEach(e),It=i(ps),K=t(ps,"DIV",{class:!0});var Is=n(K);U=t(Is,"P",{class:!0});var qs=n(U);Da=t(qs,"SPAN",{class:!0});var vn=n(Da);Rs=p(vn,hs),vn.forEach(e),qt=i(qs),Ca=t(qs,"SPAN",{class:!0});var il=n(Ca);il.forEach(e),qs.forEach(e),jt=i(Is),Pa=t(Is,"P",{class:!0});var bn=n(Pa);Vt=p(bn,`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads, and it creates garbage every change`),bn.forEach(e),Is.forEach(e),Gt=i(ps),Ra=t(ps,"PRE",{class:!0});var dl=n(Ra);dl.forEach(e),ps.forEach(e),Kt=i(u),Q=t(u,"H2",{class:!0});var js=n(Q);Ut=p(js,"D. "),Ha=t(js,"CODE",{class:!0});var hn=n(Ha);Qt=p(hn,"mutable"),hn.forEach(e),Jt=p(js," store"),js.forEach(e),Xt=i(u),y=t(u,"SECTION",{});var cs=n(y);ya=t(cs,"PRE",{class:!0});var kl=n(ya);kl.forEach(e),Yt=i(cs),J=t(cs,"DIV",{class:!0});var Vs=n(J);X=t(Vs,"P",{class:!0});var Gs=n(X);Oa=t(Gs,"SPAN",{class:!0});var mn=n(Oa);Hs=p(mn,ms),mn.forEach(e),Zt=i(Gs),Ta=t(Gs,"SPAN",{class:!0});var fl=n(Ta);fl.forEach(e),Gs.forEach(e),xt=i(Vs),A=t(Vs,"P",{class:!0});var us=n(A);ae=p(us,"works because it's a "),Wa=t(us,"CODE",{class:!0});var En=n(Wa);se=p(En,"mutable"),En.forEach(e),te=p(us,` store; doesn't clone the map; however notice that
				you need to access `),Aa=t(us,"CODE",{class:!0});var wn=n(Aa);ee=p(wn,".value"),wn.forEach(e),ne=p(us," on reads"),us.forEach(e),Vs.forEach(e),le=i(cs),La=t(cs,"PRE",{class:!0});var vl=n(La);vl.forEach(e),cs.forEach(e),oe=i(u),Y=t(u,"H2",{class:!0});var Ks=n(Y);pe=p(Ks,"E. "),Fa=t(Ks,"CODE",{class:!0});var _n=n(Fa);ce=p(_n,"fastMutable"),_n.forEach(e),ue=p(Ks," store"),Ks.forEach(e),re=i(u),O=t(u,"SECTION",{});var rs=n(O);Sa=t(rs,"PRE",{class:!0});var bl=n(Sa);bl.forEach(e),ie=i(rs),Z=t(rs,"DIV",{class:!0});var Us=n(Z);x=t(Us,"P",{class:!0});var Qs=n(x);Na=t(Qs,"SPAN",{class:!0});var Mn=n(Na);ys=p(Mn,Es),Mn.forEach(e),de=i(Qs),$a=t(Qs,"SPAN",{class:!0});var hl=n($a);hl.forEach(e),Qs.forEach(e),ke=i(Us),L=t(Us,"P",{class:!0});var is=n(L);fe=p(is,"works because it's a "),Ba=t(is,"CODE",{class:!0});var gn=n(Ba);ve=p(gn,"fastMutable"),gn.forEach(e),be=p(is,` store, which compared to
				`),Ia=t(is,"CODE",{class:!0});var zn=n(Ia);he=p(zn,"mutable"),zn.forEach(e),me=p(is,` is slightly more efficient because it swaps between two stable object references,
				but it doesn't compose as an immutable value stream, so it may be a dangerously too-clever design`),is.forEach(e),Us.forEach(e),Ee=i(rs),qa=t(rs,"PRE",{class:!0});var ml=n(qa);ml.forEach(e),rs.forEach(e),we=i(u),aa=t(u,"H2",{class:!0});var Js=n(aa);_e=p(Js,"F. "),ja=t(Js,"CODE",{class:!0});var Dn=n(ja);Me=p(Dn,"mutable"),Dn.forEach(e),ge=p(Js," store with manual update and set"),Js.forEach(e),ze=i(u),Va=t(u,"PRE",{class:!0});var El=n(Va);El.forEach(e),De=i(u),h=t(u,"SECTION",{});var w=n(h);sa=t(w,"DIV",{class:!0});var Xs=n(sa);ta=t(Xs,"P",{class:!0});var Ys=n(ta);Ga=t(Ys,"SPAN",{class:!0});var Cn=n(Ga);Os=p(Cn,ws),Cn.forEach(e),Ce=i(Ys),Ka=t(Ys,"SPAN",{class:!0});var wl=n(Ka);wl.forEach(e),Ys.forEach(e),Pe=i(Xs),F=t(Xs,"P",{class:!0});var ds=n(F);Re=p(ds,"works because it's a "),Ua=t(ds,"CODE",{class:!0});var Pn=n(Ua);He=p(Pn,"mutable"),Pn.forEach(e),ye=p(ds,` store, but mutates the value directly and then
				manually calls `),Qa=t(ds,"CODE",{class:!0});var Rn=n(Qa);Oe=p(Rn,".update()"),Rn.forEach(e),Te=p(ds,", which may be an antipattern"),ds.forEach(e),Xs.forEach(e),We=i(w),Ja=t(w,"PRE",{class:!0});var _l=n(Ja);_l.forEach(e),Ae=i(w),oa=t(w,"P",{});var Zs=n(oa);Le=p(Zs,"an alternative using the store's "),Xa=t(Zs,"CODE",{class:!0});var Hn=n(Xa);Fe=p(Hn,"set"),Hn.forEach(e),Se=p(Zs," method:"),Zs.forEach(e),Ne=i(w),Ya=t(w,"PRE",{class:!0});var Ml=n(Ya);Ml.forEach(e),$e=i(w),pa=t(w,"P",{});var xs=n(pa);Be=p(xs,"and you can set a new value if you need to, but if this is all you need, prefer a "),Za=t(xs,"CODE",{class:!0});var yn=n(Za);Ie=p(yn,"writable"),yn.forEach(e),qe=p(xs,":"),xs.forEach(e),je=i(w),xa=t(w,"PRE",{class:!0});var gl=n(xa);gl.forEach(e),Ve=i(w),_s=t(w,"P",{});var On=n(_s);Ge=p(On,"or:"),On.forEach(e),Ke=i(w),as=t(w,"PRE",{class:!0});var zl=n(as);zl.forEach(e),w.forEach(e),Ue=i(u),Qe=t(u,"HR",{}),Je=i(u),ss=t(u,"FOOTER",{class:!0});var Tn=n(ss);Ms=t(Tn,"P",{});var Wn=n(Ms);ts=t(Wn,"A",{href:!0});var An=n(ts);Xe=p(An,"get the docs and public domain source code on GitHub"),An.forEach(e),Wn.forEach(e),Tn.forEach(e),u.forEach(e),this.h()},h(){l(E,"href","https://github.com/spiderspace/mutable"),l(b,"class","svelte-z1t7fb"),l(g,"class","svelte-z1t7fb"),l(S,"href","https://github.com/spiderspace/mutable"),l(C,"class","svelte-z1t7fb"),l(ua,"class","svelte-z1t7fb"),l(k,"class","svelte-z1t7fb"),l(ra,"class","panel-inset svelte-z1t7fb"),l(ia,"class","count svelte-z1t7fb"),l(da,"class","read-example svelte-z1t7fb"),l(B,"class","count-wrapper panel-outset svelte-z1t7fb"),l(ka,"class","svelte-z1t7fb"),l(I,"class","svelte-z1t7fb"),l(T,"class","count-label svelte-z1t7fb"),l($,"class","count-with-label svelte-z1t7fb"),l(fa,"class","panel-inset svelte-z1t7fb"),M(P,"--hue",d[12](d[0].get("a")),!1),l(va,"class","svelte-z1t7fb"),l(q,"class","svelte-z1t7fb"),l(ba,"class","panel-inset svelte-z1t7fb"),l(ha,"class","count svelte-z1t7fb"),l(ma,"class","read-example svelte-z1t7fb"),l(V,"class","count-wrapper panel-outset svelte-z1t7fb"),l(Ea,"class","count-label svelte-z1t7fb"),l(j,"class","count-with-label svelte-z1t7fb"),l(wa,"class","panel-inset svelte-z1t7fb"),M(R,"--hue",d[12](d[1].get("a")),!1),l(_a,"class","svelte-z1t7fb"),M(G,"margin-bottom","0"),l(Ma,"class","svelte-z1t7fb"),l(ga,"class","svelte-z1t7fb"),l(W,"class","svelte-z1t7fb"),l(za,"class","panel-inset svelte-z1t7fb"),l(Da,"class","count svelte-z1t7fb"),l(Ca,"class","read-example svelte-z1t7fb"),l(U,"class","count-wrapper panel-outset svelte-z1t7fb"),l(Pa,"class","count-label svelte-z1t7fb"),l(K,"class","count-with-label svelte-z1t7fb"),l(Ra,"class","panel-inset svelte-z1t7fb"),M(H,"--hue",d[12](d[3].value.get("a")),!1),l(Ha,"class","svelte-z1t7fb"),l(Q,"class","svelte-z1t7fb"),l(ya,"class","panel-inset svelte-z1t7fb"),l(Oa,"class","count svelte-z1t7fb"),l(Ta,"class","read-example svelte-z1t7fb"),l(X,"class","count-wrapper panel-outset svelte-z1t7fb"),l(Wa,"class","svelte-z1t7fb"),l(Aa,"class","svelte-z1t7fb"),l(A,"class","count-label svelte-z1t7fb"),l(J,"class","count-with-label svelte-z1t7fb"),l(La,"class","panel-inset svelte-z1t7fb"),M(y,"--hue",d[12](d[4].value.get("a")),!1),l(Fa,"class","svelte-z1t7fb"),l(Y,"class","svelte-z1t7fb"),l(Sa,"class","panel-inset svelte-z1t7fb"),l(Na,"class","count svelte-z1t7fb"),l($a,"class","read-example svelte-z1t7fb"),l(x,"class","count-wrapper panel-outset svelte-z1t7fb"),l(Ba,"class","svelte-z1t7fb"),l(Ia,"class","svelte-z1t7fb"),l(L,"class","count-label svelte-z1t7fb"),l(Z,"class","count-with-label svelte-z1t7fb"),l(qa,"class","panel-inset svelte-z1t7fb"),M(O,"--hue",d[12](d[5].value.get("a")),!1),l(ja,"class","svelte-z1t7fb"),l(aa,"class","svelte-z1t7fb"),l(Va,"class","panel-inset svelte-z1t7fb"),l(Ga,"class","count svelte-z1t7fb"),l(Ka,"class","read-example svelte-z1t7fb"),l(ta,"class","count-wrapper panel-outset svelte-z1t7fb"),l(Ua,"class","svelte-z1t7fb"),l(Qa,"class","svelte-z1t7fb"),l(F,"class","count-label svelte-z1t7fb"),l(sa,"class","count-with-label svelte-z1t7fb"),l(Ja,"class","panel-inset svelte-z1t7fb"),l(Xa,"class","svelte-z1t7fb"),l(Ya,"class","panel-inset svelte-z1t7fb"),l(Za,"class","svelte-z1t7fb"),l(xa,"class","panel-inset svelte-z1t7fb"),l(as,"class","panel-inset svelte-z1t7fb"),M(h,"--hue",d[12](d[2].value.get("a")),!1),l(ts,"href","https://github.com/spiderspace/mutable"),l(ss,"class","svelte-z1t7fb"),l(c,"class","markup column svelte-z1t7fb")},m(f,u){Rl(f,c,u),a(c,v),a(v,b),a(b,E),a(E,z),a(v,D),a(v,_),a(_,ca),a(_,g),a(g,N),a(_,ea),a(_,S),a(S,na),a(c,la),a(c,C),a(C,zs),a(c,Ds),a(c,k),a(k,st),a(k,ua),a(ua,tt),a(k,et),a(c,nt),a(c,P),a(P,ra),ra.innerHTML=Sn,a(P,lt),a(P,$),a($,B),a(B,ia),a(ia,Cs),a(B,ot),a(B,da),da.innerHTML=Nn,a($,pt),a($,T),a(T,ct),a(T,ka),a(ka,ut),a(T,rt),a(T,I),a(I,it),a(I,dt),a(I,kt),a(T,ft),a(P,vt),a(P,fa),fa.innerHTML=$n,a(c,bt),a(c,q),a(q,ht),a(q,va),a(va,mt),a(q,Et),a(c,wt),a(c,R),a(R,ba),ba.innerHTML=Bn,a(R,_t),a(R,j),a(j,V),a(V,ha),a(ha,Ps),a(V,Mt),a(V,ma),ma.innerHTML=In,a(j,gt),a(j,Ea),a(Ea,zt),a(R,Dt),a(R,wa),wa.innerHTML=qn,a(c,Ct),a(c,Pt),a(c,Rt),a(c,G),a(G,Ht),a(G,_a),a(_a,yt),a(G,Ot),a(c,Tt),a(c,Wt),a(c,At),a(c,W),a(W,Lt),a(W,Ma),a(Ma,Ft),a(W,St),a(W,ga),a(ga,Nt),a(W,$t),a(c,Bt),a(c,H),a(H,za),za.innerHTML=jn,a(H,It),a(H,K),a(K,U),a(U,Da),a(Da,Rs),a(U,qt),a(U,Ca),Ca.innerHTML=Vn,a(K,jt),a(K,Pa),a(Pa,Vt),a(H,Gt),a(H,Ra),Ra.innerHTML=Gn,a(c,Kt),a(c,Q),a(Q,Ut),a(Q,Ha),a(Ha,Qt),a(Q,Jt),a(c,Xt),a(c,y),a(y,ya),ya.innerHTML=Kn,a(y,Yt),a(y,J),a(J,X),a(X,Oa),a(Oa,Hs),a(X,Zt),a(X,Ta),Ta.innerHTML=Un,a(J,xt),a(J,A),a(A,ae),a(A,Wa),a(Wa,se),a(A,te),a(A,Aa),a(Aa,ee),a(A,ne),a(y,le),a(y,La),La.innerHTML=Qn,a(c,oe),a(c,Y),a(Y,pe),a(Y,Fa),a(Fa,ce),a(Y,ue),a(c,re),a(c,O),a(O,Sa),Sa.innerHTML=Jn,a(O,ie),a(O,Z),a(Z,x),a(x,Na),a(Na,ys),a(x,de),a(x,$a),$a.innerHTML=Xn,a(Z,ke),a(Z,L),a(L,fe),a(L,Ba),a(Ba,ve),a(L,be),a(L,Ia),a(Ia,he),a(L,me),a(O,Ee),a(O,qa),qa.innerHTML=Yn,a(c,we),a(c,aa),a(aa,_e),a(aa,ja),a(ja,Me),a(aa,ge),a(c,ze),a(c,Va),Va.innerHTML=Zn,a(c,De),a(c,h),a(h,sa),a(sa,ta),a(ta,Ga),a(Ga,Os),a(ta,Ce),a(ta,Ka),Ka.innerHTML=xn,a(sa,Pe),a(sa,F),a(F,Re),a(F,Ua),a(Ua,He),a(F,ye),a(F,Qa),a(Qa,Oe),a(F,Te),a(h,We),a(h,Ja),Ja.innerHTML=al,a(h,Ae),a(h,oa),a(oa,Le),a(oa,Xa),a(Xa,Fe),a(oa,Se),a(h,Ne),a(h,Ya),Ya.innerHTML=sl,a(h,$e),a(h,pa),a(pa,Be),a(pa,Za),a(Za,Ie),a(pa,qe),a(h,je),a(h,xa),xa.innerHTML=tl,a(h,Ve),a(h,_s),a(_s,Ge),a(h,Ke),a(h,as),as.innerHTML=el,a(c,Ue),a(c,Qe),a(c,Je),a(c,ss),a(ss,Ms),a(Ms,ts),a(ts,Xe),Ye||(xe=Hl(C,"click",d[13]),Ye=!0)},p(f,[u]){u&1&&vs!==(vs=f[0].get("a")+"")&&ks(Cs,vs),u&1&&M(P,"--hue",f[12](f[0].get("a")),!1),u&2&&bs!==(bs=f[1].get("a")+"")&&ks(Ps,bs),u&2&&M(R,"--hue",f[12](f[1].get("a")),!1),u&8&&hs!==(hs=f[3].value.get("a")+"")&&ks(Rs,hs),u&8&&M(H,"--hue",f[12](f[3].value.get("a")),!1),u&16&&ms!==(ms=f[4].value.get("a")+"")&&ks(Hs,ms),u&16&&M(y,"--hue",f[12](f[4].value.get("a")),!1),u&32&&Es!==(Es=f[5].value.get("a")+"")&&ks(ys,Es),u&32&&M(O,"--hue",f[12](f[5].value.get("a")),!1),u&4&&ws!==(ws=f[2].value.get("a")+"")&&ks(Os,ws),u&4&&M(h,"--hue",f[12](f[2].value.get("a")),!1)},i:Ln,o:Ln,d(f){f&&e(c),Ye=!1,xe()}}}function so(d,c,v){let b,E,z,D,_,ca;const g=[["a",1]],N=at(new Map(g));fs(d,N,k=>v(0,b=k));const ea=at(new Map(g));fs(d,ea,k=>v(1,E=k));const S=yl(N,k=>({value:k}));fs(d,S,k=>v(3,D=k));const na=Fn(new Map(g));fs(d,na,k=>v(4,_=k));const la=Tl(new Map(g));fs(d,la,k=>v(5,ca=k));const C=Fn(new Map(g));return fs(d,C,k=>v(2,z=k)),[b,E,z,D,_,ca,N,ea,S,na,la,C,k=>k*37+"",()=>{b.set("a",b.get("a")+1),N.set(b),E.set("a",E.get("a")+1),Ol(ea,E=new Map(E),E),na.update(k=>{k.set("a",k.get("a")+1)}),la.update(k=>{k.set("a",k.get("a")+1)}),z.value.set("a",z.value.get("a")+1),C.update()}]}class eo extends Dl{constructor(c){super();Cl(this,c,so,ao,Pl,{})}}export{eo as default};
