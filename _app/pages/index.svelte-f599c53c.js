import{C as et,S as Ao,i as Lo,n as Fo,e as s,t as l,j as r,c as t,a as n,g as p,d as e,m as i,b as o,K as M,f as So,F as a,L as No,s as bs,J as jn,M as hs,N as $o,O as Bo}from"../chunks/vendor-7ffe92ef.js";const Vn=d=>{const{subscribe:c,set:v}=et({value:d});return{subscribe:c,update:b=>{if(b){const E=b(d);E!==void 0&&E!==d&&(d=E)}v({value:d})},set:b=>{d=b,v({value:d})}}},Io=d=>{let c=!1;const v={value:d},b={value:d},{subscribe:E,set:z}=et(v);return{subscribe:E,update:D=>{if(D){const _=D(d);_!==void 0&&_!==d&&(d=v.value=b.value=_)}z((c=!c)?b:v)},set:D=>{d=v.value=b.value=D,z((c=!c)?b:v)}}},qo='<span class="token keyword">const</span> writableMap <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',jo=`$writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Vo=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,Go='<span class="token keyword">const</span> writableMapCloned <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Ko=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Uo=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,Qo='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Jo=`$derivedWritableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Xo=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,Yo='<span class="token keyword">const</span> mutableMap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Zo=`$mutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,xo=`mutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,al='<span class="token keyword">const</span> fastMutableMap <span class="token operator">=</span> <span class="token function">fastMutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',sl=`$fastMutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,tl=`fastMutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,el='<span class="token keyword">const</span> mutableMapManual <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',nl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,ol=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,ll=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$mutableMapManual <span class="token operator">=</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">;</span>`,pl='$mutableMapManual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',cl='mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>';var m={ADef:qo,ARead:jo,AWrite:Vo,BDef:Go,BRead:Ko,BWrite:Uo,CDef:Qo,CRead:Jo,CWrite:Xo,DDef:Yo,DRead:Zo,DWrite:xo,EDef:al,ERead:sl,EWrite:tl,FDef:el,FRead:nl,F1Write:ol,F2Write:ll,F3Write:pl,F4Write:cl};function ul(d){let c,v,b,E,z,D,_,ua,g,$,na,N,oa,la,C,Ps,Rs,k,nt,ra,ot,lt,pt,P,ia,Gn=m.ADef+"",ct,B,I,da,ms=d[0].get("a")+"",Hs,ut,ka,Kn=m.ARead+"",rt,W,it,fa,dt,kt,q,ft,on="{",vt,bt,ht,mt,va,Un=m.AWrite+"",Et,j,wt,ba,_t,Mt,gt,R,ha,Qn=m.BDef+"",zt,V,G,ma,Es=d[1].get("a")+"",ys,Dt,Ea,Jn=m.BRead+"",Ct,T,Pt,wa,Rt,Ht,_a,yt,Ot,Wt,Ma,Xn=m.BWrite+"",Tt,At,Lt,K,Ft,ga,St,Nt,$t,Bt,It,A,qt,za,jt,Vt,Da,Gt,Kt,Ut,H,Ca,Yn=m.CDef+"",Qt,U,Q,Pa,ws=d[3].value.get("a")+"",Os,Jt,Ra,Zn=m.CRead+"",Xt,Ha,Yt,Zt,ya,xn=m.CWrite+"",xt,J,ae,Oa,se,te,ee,y,Wa,ao=m.DDef+"",ne,X,Y,Ta,_s=d[4].value.get("a")+"",Ws,oe,Aa,so=m.DRead+"",le,L,pe,La,ce,ue,Fa,re,ie,de,Sa,to=m.DWrite+"",ke,Z,fe,Na,ve,be,he,O,$a,eo=m.EDef+"",me,x,aa,Ba,Ms=d[5].value.get("a")+"",Ts,Ee,Ia,no=m.ERead+"",we,F,_e,qa,Me,ge,ja,ze,De,Ce,Va,oo=m.EWrite+"",Pe,sa,Re,Ga,He,ye,Oe,Ka,lo=m.FDef+"",We,h,ta,ea,Ua,gs=d[2].value.get("a")+"",As,Te,Qa,po=m.FRead+"",Ae,S,Le,Ja,Fe,Se,Xa,Ne,$e,Be,Ya,co=m.F1Write+"",Ie,pa,qe,Za,je,Ve,Ge,xa,uo=m.F2Write+"",Ke,ca,Ue,as,Qe,Je,Xe,ss,ro=m.F3Write+"",Ye,zs,Ze,xe,ts,io=m.F4Write+"",an,sn,tn,es,Ds,ns,en,nn,ln;return{c(){c=s("main"),v=s("header"),b=s("h1"),E=s("a"),z=l("mutable"),D=r(),_=s("blockquote"),ua=l("using mutable values in Svelte stores with the "),g=s("code"),$=l("immutable"),na=l(` compiler flag \u2014
			`),N=s("a"),oa=l("learn more on GitHub"),la=r(),C=s("button"),Ps=l("click me to make number++ go up"),Rs=r(),k=s("h2"),nt=l("A. "),ra=s("code"),ot=l("writable"),lt=l(" store (broken! D:)"),pt=r(),P=s("section"),ia=s("pre"),ct=r(),B=s("div"),I=s("p"),da=s("span"),Hs=l(ms),ut=r(),ka=s("span"),rt=r(),W=s("p"),it=l("fails to update as a "),fa=s("code"),dt=l("writable"),kt=l(" store because "),q=s("code"),ft=l("immutable="),vt=l(on),bt=l("true}"),ht=l(` and
				we're mutating the map`),mt=r(),va=s("pre"),Et=r(),j=s("h2"),wt=l("B. cloned "),ba=s("code"),_t=l("writable"),Mt=l(" store"),gt=r(),R=s("section"),ha=s("pre"),zt=r(),V=s("div"),G=s("p"),ma=s("span"),ys=l(Es),Dt=r(),Ea=s("span"),Ct=r(),T=s("p"),Pt=l("works for "),wa=s("code"),Rt=l("Map"),Ht=l(`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),_a=s("code"),yt=l("WeakMap"),Ot=l(", one of the motivating usecases for this document"),Wt=r(),Ma=s("pre"),Tt=r(),At=s("hr"),Lt=r(),K=s("blockquote"),Ft=l("in the examples below, notice that you need to access "),ga=s("code"),St=l(".value"),Nt=l(" for reads, unlike above"),$t=r(),Bt=s("hr"),It=r(),A=s("h2"),qt=l("C. "),za=s("code"),jt=l("derived"),Vt=l(" from "),Da=s("code"),Gt=l("writable"),Kt=l(" store"),Ut=r(),H=s("section"),Ca=s("pre"),Qt=r(),U=s("div"),Q=s("p"),Pa=s("span"),Os=l(ws),Jt=r(),Ra=s("span"),Xt=r(),Ha=s("p"),Yt=l(`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads, and it creates garbage every change`),Zt=r(),ya=s("pre"),xt=r(),J=s("h2"),ae=l("D. "),Oa=s("code"),se=l("mutable"),te=l(" store"),ee=r(),y=s("section"),Wa=s("pre"),ne=r(),X=s("div"),Y=s("p"),Ta=s("span"),Ws=l(_s),oe=r(),Aa=s("span"),le=r(),L=s("p"),pe=l("works because it's a "),La=s("code"),ce=l("mutable"),ue=l(` store; doesn't clone the map; however notice that
				you need to access `),Fa=s("code"),re=l(".value"),ie=l(" on reads"),de=r(),Sa=s("pre"),ke=r(),Z=s("h2"),fe=l("E. "),Na=s("code"),ve=l("fastMutable"),be=l(" store"),he=r(),O=s("section"),$a=s("pre"),me=r(),x=s("div"),aa=s("p"),Ba=s("span"),Ts=l(Ms),Ee=r(),Ia=s("span"),we=r(),F=s("p"),_e=l("works because it's a "),qa=s("code"),Me=l("fastMutable"),ge=l(` store, which compared to
				`),ja=s("code"),ze=l("mutable"),De=l(` is slightly more efficient because it swaps between two stable object references,
				but it doesn't compose as an immutable value stream, so it may be a dangerously too-clever design`),Ce=r(),Va=s("pre"),Pe=r(),sa=s("h2"),Re=l("F. "),Ga=s("code"),He=l("mutable"),ye=l(" store with manual update and set"),Oe=r(),Ka=s("pre"),We=r(),h=s("section"),ta=s("div"),ea=s("p"),Ua=s("span"),As=l(gs),Te=r(),Qa=s("span"),Ae=r(),S=s("p"),Le=l("works because it's a "),Ja=s("code"),Fe=l("mutable"),Se=l(` store, but mutates the value directly and then
				manually calls `),Xa=s("code"),Ne=l(".update()"),$e=l(", which may be an antipattern"),Be=r(),Ya=s("pre"),Ie=r(),pa=s("p"),qe=l("an alternative using the store's "),Za=s("code"),je=l("set"),Ve=l(" method:"),Ge=r(),xa=s("pre"),Ke=r(),ca=s("p"),Ue=l("and you can set a new value if you need to, but if this is all you need, prefer a "),as=s("code"),Qe=l("writable"),Je=l(":"),Xe=r(),ss=s("pre"),Ye=r(),zs=s("p"),Ze=l("or:"),xe=r(),ts=s("pre"),an=r(),sn=s("hr"),tn=r(),es=s("footer"),Ds=s("p"),ns=s("a"),en=l("get the docs and public domain source code on GitHub"),this.h()},l(f){c=t(f,"MAIN",{class:!0});var u=n(c);v=t(u,"HEADER",{});var Ls=n(v);b=t(Ls,"H1",{class:!0});var pn=n(b);E=t(pn,"A",{href:!0});var cn=n(E);z=p(cn,"mutable"),cn.forEach(e),pn.forEach(e),D=i(Ls),_=t(Ls,"BLOCKQUOTE",{});var Cs=n(_);ua=p(Cs,"using mutable values in Svelte stores with the "),g=t(Cs,"CODE",{class:!0});var un=n(g);$=p(un,"immutable"),un.forEach(e),na=p(Cs,` compiler flag \u2014
			`),N=t(Cs,"A",{href:!0});var rn=n(N);oa=p(rn,"learn more on GitHub"),rn.forEach(e),Cs.forEach(e),Ls.forEach(e),la=i(u),C=t(u,"BUTTON",{class:!0});var dn=n(C);Ps=p(dn,"click me to make number++ go up"),dn.forEach(e),Rs=i(u),k=t(u,"H2",{class:!0});var Fs=n(k);nt=p(Fs,"A. "),ra=t(Fs,"CODE",{class:!0});var kn=n(ra);ot=p(kn,"writable"),kn.forEach(e),lt=p(Fs," store (broken! D:)"),Fs.forEach(e),pt=i(u),P=t(u,"SECTION",{});var os=n(P);ia=t(os,"PRE",{class:!0});var ko=n(ia);ko.forEach(e),ct=i(os),B=t(os,"DIV",{class:!0});var Ss=n(B);I=t(Ss,"P",{class:!0});var Ns=n(I);da=t(Ns,"SPAN",{class:!0});var fn=n(da);Hs=p(fn,ms),fn.forEach(e),ut=i(Ns),ka=t(Ns,"SPAN",{class:!0});var fo=n(ka);fo.forEach(e),Ns.forEach(e),rt=i(Ss),W=t(Ss,"P",{class:!0});var ls=n(W);it=p(ls,"fails to update as a "),fa=t(ls,"CODE",{class:!0});var vn=n(fa);dt=p(vn,"writable"),vn.forEach(e),kt=p(ls," store because "),q=t(ls,"CODE",{class:!0});var $s=n(q);ft=p($s,"immutable="),vt=p($s,on),bt=p($s,"true}"),$s.forEach(e),ht=p(ls,` and
				we're mutating the map`),ls.forEach(e),Ss.forEach(e),mt=i(os),va=t(os,"PRE",{class:!0});var vo=n(va);vo.forEach(e),os.forEach(e),Et=i(u),j=t(u,"H2",{class:!0});var Bs=n(j);wt=p(Bs,"B. cloned "),ba=t(Bs,"CODE",{class:!0});var bn=n(ba);_t=p(bn,"writable"),bn.forEach(e),Mt=p(Bs," store"),Bs.forEach(e),gt=i(u),R=t(u,"SECTION",{});var ps=n(R);ha=t(ps,"PRE",{class:!0});var bo=n(ha);bo.forEach(e),zt=i(ps),V=t(ps,"DIV",{class:!0});var Is=n(V);G=t(Is,"P",{class:!0});var qs=n(G);ma=t(qs,"SPAN",{class:!0});var hn=n(ma);ys=p(hn,Es),hn.forEach(e),Dt=i(qs),Ea=t(qs,"SPAN",{class:!0});var ho=n(Ea);ho.forEach(e),qs.forEach(e),Ct=i(Is),T=t(Is,"P",{class:!0});var cs=n(T);Pt=p(cs,"works for "),wa=t(cs,"CODE",{class:!0});var mn=n(wa);Rt=p(mn,"Map"),mn.forEach(e),Ht=p(cs,`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),_a=t(cs,"CODE",{class:!0});var En=n(_a);yt=p(En,"WeakMap"),En.forEach(e),Ot=p(cs,", one of the motivating usecases for this document"),cs.forEach(e),Is.forEach(e),Wt=i(ps),Ma=t(ps,"PRE",{class:!0});var mo=n(Ma);mo.forEach(e),ps.forEach(e),Tt=i(u),At=t(u,"HR",{}),Lt=i(u),K=t(u,"BLOCKQUOTE",{style:!0});var js=n(K);Ft=p(js,"in the examples below, notice that you need to access "),ga=t(js,"CODE",{class:!0});var wn=n(ga);St=p(wn,".value"),wn.forEach(e),Nt=p(js," for reads, unlike above"),js.forEach(e),$t=i(u),Bt=t(u,"HR",{}),It=i(u),A=t(u,"H2",{class:!0});var us=n(A);qt=p(us,"C. "),za=t(us,"CODE",{class:!0});var _n=n(za);jt=p(_n,"derived"),_n.forEach(e),Vt=p(us," from "),Da=t(us,"CODE",{class:!0});var Mn=n(Da);Gt=p(Mn,"writable"),Mn.forEach(e),Kt=p(us," store"),us.forEach(e),Ut=i(u),H=t(u,"SECTION",{});var rs=n(H);Ca=t(rs,"PRE",{class:!0});var Eo=n(Ca);Eo.forEach(e),Qt=i(rs),U=t(rs,"DIV",{class:!0});var Vs=n(U);Q=t(Vs,"P",{class:!0});var Gs=n(Q);Pa=t(Gs,"SPAN",{class:!0});var gn=n(Pa);Os=p(gn,ws),gn.forEach(e),Jt=i(Gs),Ra=t(Gs,"SPAN",{class:!0});var wo=n(Ra);wo.forEach(e),Gs.forEach(e),Xt=i(Vs),Ha=t(Vs,"P",{class:!0});var zn=n(Ha);Yt=p(zn,`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads, and it creates garbage every change`),zn.forEach(e),Vs.forEach(e),Zt=i(rs),ya=t(rs,"PRE",{class:!0});var _o=n(ya);_o.forEach(e),rs.forEach(e),xt=i(u),J=t(u,"H2",{class:!0});var Ks=n(J);ae=p(Ks,"D. "),Oa=t(Ks,"CODE",{class:!0});var Dn=n(Oa);se=p(Dn,"mutable"),Dn.forEach(e),te=p(Ks," store"),Ks.forEach(e),ee=i(u),y=t(u,"SECTION",{});var is=n(y);Wa=t(is,"PRE",{class:!0});var Mo=n(Wa);Mo.forEach(e),ne=i(is),X=t(is,"DIV",{class:!0});var Us=n(X);Y=t(Us,"P",{class:!0});var Qs=n(Y);Ta=t(Qs,"SPAN",{class:!0});var Cn=n(Ta);Ws=p(Cn,_s),Cn.forEach(e),oe=i(Qs),Aa=t(Qs,"SPAN",{class:!0});var go=n(Aa);go.forEach(e),Qs.forEach(e),le=i(Us),L=t(Us,"P",{class:!0});var ds=n(L);pe=p(ds,"works because it's a "),La=t(ds,"CODE",{class:!0});var Pn=n(La);ce=p(Pn,"mutable"),Pn.forEach(e),ue=p(ds,` store; doesn't clone the map; however notice that
				you need to access `),Fa=t(ds,"CODE",{class:!0});var Rn=n(Fa);re=p(Rn,".value"),Rn.forEach(e),ie=p(ds," on reads"),ds.forEach(e),Us.forEach(e),de=i(is),Sa=t(is,"PRE",{class:!0});var zo=n(Sa);zo.forEach(e),is.forEach(e),ke=i(u),Z=t(u,"H2",{class:!0});var Js=n(Z);fe=p(Js,"E. "),Na=t(Js,"CODE",{class:!0});var Hn=n(Na);ve=p(Hn,"fastMutable"),Hn.forEach(e),be=p(Js," store"),Js.forEach(e),he=i(u),O=t(u,"SECTION",{});var ks=n(O);$a=t(ks,"PRE",{class:!0});var Do=n($a);Do.forEach(e),me=i(ks),x=t(ks,"DIV",{class:!0});var Xs=n(x);aa=t(Xs,"P",{class:!0});var Ys=n(aa);Ba=t(Ys,"SPAN",{class:!0});var yn=n(Ba);Ts=p(yn,Ms),yn.forEach(e),Ee=i(Ys),Ia=t(Ys,"SPAN",{class:!0});var Co=n(Ia);Co.forEach(e),Ys.forEach(e),we=i(Xs),F=t(Xs,"P",{class:!0});var fs=n(F);_e=p(fs,"works because it's a "),qa=t(fs,"CODE",{class:!0});var On=n(qa);Me=p(On,"fastMutable"),On.forEach(e),ge=p(fs,` store, which compared to
				`),ja=t(fs,"CODE",{class:!0});var Wn=n(ja);ze=p(Wn,"mutable"),Wn.forEach(e),De=p(fs,` is slightly more efficient because it swaps between two stable object references,
				but it doesn't compose as an immutable value stream, so it may be a dangerously too-clever design`),fs.forEach(e),Xs.forEach(e),Ce=i(ks),Va=t(ks,"PRE",{class:!0});var Po=n(Va);Po.forEach(e),ks.forEach(e),Pe=i(u),sa=t(u,"H2",{class:!0});var Zs=n(sa);Re=p(Zs,"F. "),Ga=t(Zs,"CODE",{class:!0});var Tn=n(Ga);He=p(Tn,"mutable"),Tn.forEach(e),ye=p(Zs," store with manual update and set"),Zs.forEach(e),Oe=i(u),Ka=t(u,"PRE",{class:!0});var Ro=n(Ka);Ro.forEach(e),We=i(u),h=t(u,"SECTION",{});var w=n(h);ta=t(w,"DIV",{class:!0});var xs=n(ta);ea=t(xs,"P",{class:!0});var at=n(ea);Ua=t(at,"SPAN",{class:!0});var An=n(Ua);As=p(An,gs),An.forEach(e),Te=i(at),Qa=t(at,"SPAN",{class:!0});var Ho=n(Qa);Ho.forEach(e),at.forEach(e),Ae=i(xs),S=t(xs,"P",{class:!0});var vs=n(S);Le=p(vs,"works because it's a "),Ja=t(vs,"CODE",{class:!0});var Ln=n(Ja);Fe=p(Ln,"mutable"),Ln.forEach(e),Se=p(vs,` store, but mutates the value directly and then
				manually calls `),Xa=t(vs,"CODE",{class:!0});var Fn=n(Xa);Ne=p(Fn,".update()"),Fn.forEach(e),$e=p(vs,", which may be an antipattern"),vs.forEach(e),xs.forEach(e),Be=i(w),Ya=t(w,"PRE",{class:!0});var yo=n(Ya);yo.forEach(e),Ie=i(w),pa=t(w,"P",{});var st=n(pa);qe=p(st,"an alternative using the store's "),Za=t(st,"CODE",{class:!0});var Sn=n(Za);je=p(Sn,"set"),Sn.forEach(e),Ve=p(st," method:"),st.forEach(e),Ge=i(w),xa=t(w,"PRE",{class:!0});var Oo=n(xa);Oo.forEach(e),Ke=i(w),ca=t(w,"P",{});var tt=n(ca);Ue=p(tt,"and you can set a new value if you need to, but if this is all you need, prefer a "),as=t(tt,"CODE",{class:!0});var Nn=n(as);Qe=p(Nn,"writable"),Nn.forEach(e),Je=p(tt,":"),tt.forEach(e),Xe=i(w),ss=t(w,"PRE",{class:!0});var Wo=n(ss);Wo.forEach(e),Ye=i(w),zs=t(w,"P",{});var $n=n(zs);Ze=p($n,"or:"),$n.forEach(e),xe=i(w),ts=t(w,"PRE",{class:!0});var To=n(ts);To.forEach(e),w.forEach(e),an=i(u),sn=t(u,"HR",{}),tn=i(u),es=t(u,"FOOTER",{class:!0});var Bn=n(es);Ds=t(Bn,"P",{});var In=n(Ds);ns=t(In,"A",{href:!0});var qn=n(ns);en=p(qn,"get the docs and public domain source code on GitHub"),qn.forEach(e),In.forEach(e),Bn.forEach(e),u.forEach(e),this.h()},h(){o(E,"href","https://github.com/spiderspace/mutable"),o(b,"class","svelte-z1t7fb"),o(g,"class","svelte-z1t7fb"),o(N,"href","https://github.com/spiderspace/mutable"),o(C,"class","svelte-z1t7fb"),o(ra,"class","svelte-z1t7fb"),o(k,"class","svelte-z1t7fb"),o(ia,"class","panel-inset svelte-z1t7fb"),o(da,"class","count svelte-z1t7fb"),o(ka,"class","read-example svelte-z1t7fb"),o(I,"class","count-wrapper panel-outset svelte-z1t7fb"),o(fa,"class","svelte-z1t7fb"),o(q,"class","svelte-z1t7fb"),o(W,"class","count-label svelte-z1t7fb"),o(B,"class","count-with-label svelte-z1t7fb"),o(va,"class","panel-inset svelte-z1t7fb"),M(P,"--hue",d[12](d[0].get("a")),!1),o(ba,"class","svelte-z1t7fb"),o(j,"class","svelte-z1t7fb"),o(ha,"class","panel-inset svelte-z1t7fb"),o(ma,"class","count svelte-z1t7fb"),o(Ea,"class","read-example svelte-z1t7fb"),o(G,"class","count-wrapper panel-outset svelte-z1t7fb"),o(wa,"class","svelte-z1t7fb"),o(_a,"class","svelte-z1t7fb"),o(T,"class","count-label svelte-z1t7fb"),o(V,"class","count-with-label svelte-z1t7fb"),o(Ma,"class","panel-inset svelte-z1t7fb"),M(R,"--hue",d[12](d[1].get("a")),!1),o(ga,"class","svelte-z1t7fb"),M(K,"margin-bottom","0"),o(za,"class","svelte-z1t7fb"),o(Da,"class","svelte-z1t7fb"),o(A,"class","svelte-z1t7fb"),o(Ca,"class","panel-inset svelte-z1t7fb"),o(Pa,"class","count svelte-z1t7fb"),o(Ra,"class","read-example svelte-z1t7fb"),o(Q,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Ha,"class","count-label svelte-z1t7fb"),o(U,"class","count-with-label svelte-z1t7fb"),o(ya,"class","panel-inset svelte-z1t7fb"),M(H,"--hue",d[12](d[3].value.get("a")),!1),o(Oa,"class","svelte-z1t7fb"),o(J,"class","svelte-z1t7fb"),o(Wa,"class","panel-inset svelte-z1t7fb"),o(Ta,"class","count svelte-z1t7fb"),o(Aa,"class","read-example svelte-z1t7fb"),o(Y,"class","count-wrapper panel-outset svelte-z1t7fb"),o(La,"class","svelte-z1t7fb"),o(Fa,"class","svelte-z1t7fb"),o(L,"class","count-label svelte-z1t7fb"),o(X,"class","count-with-label svelte-z1t7fb"),o(Sa,"class","panel-inset svelte-z1t7fb"),M(y,"--hue",d[12](d[4].value.get("a")),!1),o(Na,"class","svelte-z1t7fb"),o(Z,"class","svelte-z1t7fb"),o($a,"class","panel-inset svelte-z1t7fb"),o(Ba,"class","count svelte-z1t7fb"),o(Ia,"class","read-example svelte-z1t7fb"),o(aa,"class","count-wrapper panel-outset svelte-z1t7fb"),o(qa,"class","svelte-z1t7fb"),o(ja,"class","svelte-z1t7fb"),o(F,"class","count-label svelte-z1t7fb"),o(x,"class","count-with-label svelte-z1t7fb"),o(Va,"class","panel-inset svelte-z1t7fb"),M(O,"--hue",d[12](d[5].value.get("a")),!1),o(Ga,"class","svelte-z1t7fb"),o(sa,"class","svelte-z1t7fb"),o(Ka,"class","panel-inset svelte-z1t7fb"),o(Ua,"class","count svelte-z1t7fb"),o(Qa,"class","read-example svelte-z1t7fb"),o(ea,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Ja,"class","svelte-z1t7fb"),o(Xa,"class","svelte-z1t7fb"),o(S,"class","count-label svelte-z1t7fb"),o(ta,"class","count-with-label svelte-z1t7fb"),o(Ya,"class","panel-inset svelte-z1t7fb"),o(Za,"class","svelte-z1t7fb"),o(xa,"class","panel-inset svelte-z1t7fb"),o(as,"class","svelte-z1t7fb"),o(ss,"class","panel-inset svelte-z1t7fb"),o(ts,"class","panel-inset svelte-z1t7fb"),M(h,"--hue",d[12](d[2].value.get("a")),!1),o(ns,"href","https://github.com/spiderspace/mutable"),o(es,"class","svelte-z1t7fb"),o(c,"class","markup column svelte-z1t7fb")},m(f,u){So(f,c,u),a(c,v),a(v,b),a(b,E),a(E,z),a(v,D),a(v,_),a(_,ua),a(_,g),a(g,$),a(_,na),a(_,N),a(N,oa),a(c,la),a(c,C),a(C,Ps),a(c,Rs),a(c,k),a(k,nt),a(k,ra),a(ra,ot),a(k,lt),a(c,pt),a(c,P),a(P,ia),ia.innerHTML=Gn,a(P,ct),a(P,B),a(B,I),a(I,da),a(da,Hs),a(I,ut),a(I,ka),ka.innerHTML=Kn,a(B,rt),a(B,W),a(W,it),a(W,fa),a(fa,dt),a(W,kt),a(W,q),a(q,ft),a(q,vt),a(q,bt),a(W,ht),a(P,mt),a(P,va),va.innerHTML=Un,a(c,Et),a(c,j),a(j,wt),a(j,ba),a(ba,_t),a(j,Mt),a(c,gt),a(c,R),a(R,ha),ha.innerHTML=Qn,a(R,zt),a(R,V),a(V,G),a(G,ma),a(ma,ys),a(G,Dt),a(G,Ea),Ea.innerHTML=Jn,a(V,Ct),a(V,T),a(T,Pt),a(T,wa),a(wa,Rt),a(T,Ht),a(T,_a),a(_a,yt),a(T,Ot),a(R,Wt),a(R,Ma),Ma.innerHTML=Xn,a(c,Tt),a(c,At),a(c,Lt),a(c,K),a(K,Ft),a(K,ga),a(ga,St),a(K,Nt),a(c,$t),a(c,Bt),a(c,It),a(c,A),a(A,qt),a(A,za),a(za,jt),a(A,Vt),a(A,Da),a(Da,Gt),a(A,Kt),a(c,Ut),a(c,H),a(H,Ca),Ca.innerHTML=Yn,a(H,Qt),a(H,U),a(U,Q),a(Q,Pa),a(Pa,Os),a(Q,Jt),a(Q,Ra),Ra.innerHTML=Zn,a(U,Xt),a(U,Ha),a(Ha,Yt),a(H,Zt),a(H,ya),ya.innerHTML=xn,a(c,xt),a(c,J),a(J,ae),a(J,Oa),a(Oa,se),a(J,te),a(c,ee),a(c,y),a(y,Wa),Wa.innerHTML=ao,a(y,ne),a(y,X),a(X,Y),a(Y,Ta),a(Ta,Ws),a(Y,oe),a(Y,Aa),Aa.innerHTML=so,a(X,le),a(X,L),a(L,pe),a(L,La),a(La,ce),a(L,ue),a(L,Fa),a(Fa,re),a(L,ie),a(y,de),a(y,Sa),Sa.innerHTML=to,a(c,ke),a(c,Z),a(Z,fe),a(Z,Na),a(Na,ve),a(Z,be),a(c,he),a(c,O),a(O,$a),$a.innerHTML=eo,a(O,me),a(O,x),a(x,aa),a(aa,Ba),a(Ba,Ts),a(aa,Ee),a(aa,Ia),Ia.innerHTML=no,a(x,we),a(x,F),a(F,_e),a(F,qa),a(qa,Me),a(F,ge),a(F,ja),a(ja,ze),a(F,De),a(O,Ce),a(O,Va),Va.innerHTML=oo,a(c,Pe),a(c,sa),a(sa,Re),a(sa,Ga),a(Ga,He),a(sa,ye),a(c,Oe),a(c,Ka),Ka.innerHTML=lo,a(c,We),a(c,h),a(h,ta),a(ta,ea),a(ea,Ua),a(Ua,As),a(ea,Te),a(ea,Qa),Qa.innerHTML=po,a(ta,Ae),a(ta,S),a(S,Le),a(S,Ja),a(Ja,Fe),a(S,Se),a(S,Xa),a(Xa,Ne),a(S,$e),a(h,Be),a(h,Ya),Ya.innerHTML=co,a(h,Ie),a(h,pa),a(pa,qe),a(pa,Za),a(Za,je),a(pa,Ve),a(h,Ge),a(h,xa),xa.innerHTML=uo,a(h,Ke),a(h,ca),a(ca,Ue),a(ca,as),a(as,Qe),a(ca,Je),a(h,Xe),a(h,ss),ss.innerHTML=ro,a(h,Ye),a(h,zs),a(zs,Ze),a(h,xe),a(h,ts),ts.innerHTML=io,a(c,an),a(c,sn),a(c,tn),a(c,es),a(es,Ds),a(Ds,ns),a(ns,en),nn||(ln=No(C,"click",d[13]),nn=!0)},p(f,[u]){u&1&&ms!==(ms=f[0].get("a")+"")&&bs(Hs,ms),u&1&&M(P,"--hue",f[12](f[0].get("a")),!1),u&2&&Es!==(Es=f[1].get("a")+"")&&bs(ys,Es),u&2&&M(R,"--hue",f[12](f[1].get("a")),!1),u&8&&ws!==(ws=f[3].value.get("a")+"")&&bs(Os,ws),u&8&&M(H,"--hue",f[12](f[3].value.get("a")),!1),u&16&&_s!==(_s=f[4].value.get("a")+"")&&bs(Ws,_s),u&16&&M(y,"--hue",f[12](f[4].value.get("a")),!1),u&32&&Ms!==(Ms=f[5].value.get("a")+"")&&bs(Ts,Ms),u&32&&M(O,"--hue",f[12](f[5].value.get("a")),!1),u&4&&gs!==(gs=f[2].value.get("a")+"")&&bs(As,gs),u&4&&M(h,"--hue",f[12](f[2].value.get("a")),!1)},i:jn,o:jn,d(f){f&&e(c),nn=!1,ln()}}}function rl(d,c,v){let b,E,z,D,_,ua;const g=[["a",1]],$=et(new Map(g));hs(d,$,k=>v(0,b=k));const na=et(new Map(g));hs(d,na,k=>v(1,E=k));const N=$o($,k=>({value:k}));hs(d,N,k=>v(3,D=k));const oa=Vn(new Map(g));hs(d,oa,k=>v(4,_=k));const la=Io(new Map(g));hs(d,la,k=>v(5,ua=k));const C=Vn(new Map(g));return hs(d,C,k=>v(2,z=k)),[b,E,z,D,_,ua,$,na,N,oa,la,C,k=>k*37+"",()=>{b.set("a",b.get("a")+1),$.set(b),E.set("a",E.get("a")+1),Bo(na,E=new Map(E),E),oa.update(k=>{k.set("a",k.get("a")+1)}),la.update(k=>{k.set("a",k.get("a")+1)}),z.value.set("a",z.value.get("a")+1),C.update()}]}class dl extends Ao{constructor(c){super();Lo(this,c,rl,ul,Fo,{})}}export{dl as default};
