import{C as ft,S as tl,i as el,n as nl,e as s,t as l,j as u,c as t,a as n,g as p,d as e,m as i,b as o,K as M,f as ol,F as a,L as ll,s as Cs,J as io,M as Ps,N as pl,O as cl}from"../chunks/vendor-7ffe92ef.js";const fo=d=>{const{subscribe:c,set:b}=ft({value:d});return{subscribe:c,update:m=>{if(m){const E=m(d);E!==void 0&&E!==d&&(d=E)}b({value:d})},set:m=>{d=m,b({value:d})}}},rl=d=>{let c=!1;const b={value:d},m={value:d},{subscribe:E,set:z}=ft(b);return{subscribe:E,update:D=>{c=!c;const w=c?m:b;if(D){const y=D(d);y!==void 0&&y!==d&&(d=w.value=y)}z(w)},set:D=>{c=!c;const w=c?m:b;d=w.value=D,z(w)}}},ul='<span class="token keyword">const</span> writableMap <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',il=`$writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,dl=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,fl='<span class="token keyword">const</span> writableMapCloned <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',kl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,bl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,vl='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',hl=`$derivedWritableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,ml=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,El='<span class="token keyword">const</span> mutableMap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',wl=`$mutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,_l=`mutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Ml='<span class="token keyword">const</span> fastMutableMap <span class="token operator">=</span> <span class="token function">fastMutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',gl=`$fastMutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,zl=`fastMutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Dl='<span class="token keyword">const</span> mutableMapManual <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Cl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Pl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Rl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$mutableMapManual <span class="token operator">=</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">;</span>`,Hl='$mutableMapManual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Ol='mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>';var h={ADef:ul,ARead:il,AWrite:dl,BDef:fl,BRead:kl,BWrite:bl,CDef:vl,CRead:hl,CWrite:ml,DDef:El,DRead:wl,DWrite:_l,EDef:Ml,ERead:gl,EWrite:zl,FDef:Dl,FRead:Cl,F1Write:Pl,F2Write:Rl,F3Write:Hl,F4Write:Ol};function Al(d){let c,b,m,E,z,D,w,y,g,I,pa,$,ca,ra,C,Ss,Ns,f,kt,ia,bt,vt,ht,P,da,ko=h.ADef+"",mt,q,j,fa,Rs=d[0].get("a")+"",$s,Et,ka,bo=h.ARead+"",wt,W,_t,ba,Mt,gt,V,zt,wn="{",Dt,Ct,Pt,Rt,va,vo=h.AWrite+"",Ht,G,Ot,ha,At,yt,Wt,R,ma,ho=h.BDef+"",Tt,K,U,Ea,Hs=d[1].get("a")+"",Bs,Lt,wa,mo=h.BRead+"",Ft,T,St,_a,Nt,$t,Ma,Bt,It,qt,ga,Eo=h.BWrite+"",jt,Vt,Gt,Q,Kt,za,Ut,Qt,Jt,Xt,Yt,L,Zt,Da,xt,ae,Ca,se,te,ee,H,Pa,wo=h.CDef+"",ne,J,X,Ra,Os=d[3].value.get("a")+"",Is,oe,Ha,_o=h.CRead+"",le,Y,pe,Oa,ce,re,ue,Aa,Mo=h.CWrite+"",ie,Z,de,ya,Wa,fe,ke,be,O,Ta,go=h.DDef+"",ve,x,aa,La,As=d[4].value.get("a")+"",qs,he,Fa,zo=h.DRead+"",me,F,Ee,Sa,Na,we,_e,$a,Me,ge,ze,Ba,Do=h.DWrite+"",De,sa,Ce,Ia,qa,Pe,Re,He,A,ja,Co=h.EDef+"",Oe,ta,ea,Va,ys=d[5].value.get("a")+"",js,Ae,Ga,Po=h.ERead+"",ye,S,We,Ka,Ua,Te,Le,Qa,Ja,Fe,Se,Ne,Xa,Ro=h.EWrite+"",$e,na,Be,Ya,Za,Ie,qe,je,xa,Ho=h.FDef+"",Ve,v,oa,la,as,Ws=d[2].value.get("a")+"",Vs,Ge,ss,Oo=h.FRead+"",Ke,N,Ue,ts,es,Qe,Je,ns,Xe,Ye,Ze,os,Ao=h.F1Write+"",xe,B,an,ls,sn,tn,ps,en,nn,on,cs,yo=h.F2Write+"",ln,ua,pn,rs,cn,rn,un,us,Wo=h.F3Write+"",dn,Ts,fn,kn,is,To=h.F4Write+"",bn,vn,hn,ds,Ls,fs,mn,En,_n;return{c(){c=s("main"),b=s("header"),m=s("h1"),E=s("a"),z=l("mutable"),D=u(),w=s("blockquote"),y=l("using mutable values in Svelte stores with the "),g=s("code"),I=l("immutable"),pa=l(` compiler flag \u2014
			`),$=s("a"),ca=l("learn more on GitHub"),ra=u(),C=s("button"),Ss=l("click me to make number++ go up"),Ns=u(),f=s("h2"),kt=l("A. "),ia=s("code"),bt=l("writable"),vt=l(" store (broken! D:)"),ht=u(),P=s("section"),da=s("pre"),mt=u(),q=s("div"),j=s("p"),fa=s("span"),$s=l(Rs),Et=u(),ka=s("span"),wt=u(),W=s("p"),_t=l("fails to update as a "),ba=s("code"),Mt=l("writable"),gt=l(" store because "),V=s("code"),zt=l("immutable="),Dt=l(wn),Ct=l("true}"),Pt=l(` and
				we're mutating the map`),Rt=u(),va=s("pre"),Ht=u(),G=s("h2"),Ot=l("B. cloned "),ha=s("code"),At=l("writable"),yt=l(" store"),Wt=u(),R=s("section"),ma=s("pre"),Tt=u(),K=s("div"),U=s("p"),Ea=s("span"),Bs=l(Hs),Lt=u(),wa=s("span"),Ft=u(),T=s("p"),St=l("works for "),_a=s("code"),Nt=l("Map"),$t=l(`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),Ma=s("code"),Bt=l("WeakMap"),It=l(", one of the motivating usecases for this document"),qt=u(),ga=s("pre"),jt=u(),Vt=s("hr"),Gt=u(),Q=s("blockquote"),Kt=l("in the examples below, notice that you need to access "),za=s("code"),Ut=l(".value"),Qt=l(" for reads, unlike above"),Jt=u(),Xt=s("hr"),Yt=u(),L=s("h2"),Zt=l("C. "),Da=s("code"),xt=l("derived"),ae=l(" from "),Ca=s("code"),se=l("writable"),te=l(" store"),ee=u(),H=s("section"),Pa=s("pre"),ne=u(),J=s("div"),X=s("p"),Ra=s("span"),Is=l(Os),oe=u(),Ha=s("span"),le=u(),Y=s("p"),pe=l(`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; is error prone because reading the `),Oa=s("code"),ce=l("writable"),re=l(` isn't
				reactive!`),ue=u(),Aa=s("pre"),ie=u(),Z=s("h2"),de=l("D. "),ya=s("code"),Wa=s("a"),fe=l("mutable"),ke=l(" store"),be=u(),O=s("section"),Ta=s("pre"),ve=u(),x=s("div"),aa=s("p"),La=s("span"),qs=l(As),he=u(),Fa=s("span"),me=u(),F=s("p"),Ee=l("works because it's a "),Sa=s("code"),Na=s("a"),we=l("mutable"),_e=l(`
				store; doesn't clone the map; however notice that you need to access `),$a=s("code"),Me=l(".value"),ge=l(" on reads"),ze=u(),Ba=s("pre"),De=u(),sa=s("h2"),Ce=l("E. "),Ia=s("code"),qa=s("a"),Pe=l("fastMutable"),Re=l(" store"),He=u(),A=s("section"),ja=s("pre"),Oe=u(),ta=s("div"),ea=s("p"),Va=s("span"),js=l(ys),Ae=u(),Ga=s("span"),ye=u(),S=s("p"),We=l("works because it's a "),Ka=s("code"),Ua=s("a"),Te=l("fastMutable"),Le=l(`
				store, which compared to
				`),Qa=s("code"),Ja=s("a"),Fe=l("mutable"),Se=l(` is slightly more efficient because it swaps between two stable object references, so there's
				no extra garbage created, but it doesn't compose as an immutable value stream, so it may be a
				dangerously too-clever design`),Ne=u(),Xa=s("pre"),$e=u(),na=s("h2"),Be=l("F. "),Ya=s("code"),Za=s("a"),Ie=l("mutable"),qe=l(" store with manual update and set"),je=u(),xa=s("pre"),Ve=u(),v=s("section"),oa=s("div"),la=s("p"),as=s("span"),Vs=l(Ws),Ge=u(),ss=s("span"),Ke=u(),N=s("p"),Ue=l("works because it's a "),ts=s("code"),es=s("a"),Qe=l("mutable"),Je=l(`
				store, but mutates the value directly and then manually calls `),ns=s("code"),Xe=l(".update()"),Ye=l(`, which
				may be an antipattern`),Ze=u(),os=s("pre"),xe=u(),B=s("p"),an=l("an alternative using the store's "),ls=s("code"),sn=l("set"),tn=l(` method, which is extra awkward because of
			the `),ps=s("code"),en=l(".value"),nn=l(":"),on=u(),cs=s("pre"),ln=u(),ua=s("p"),pn=l("and you can set a new value if you need to, but if this is all you need, prefer a "),rs=s("code"),cn=l("writable"),rn=l(":"),un=u(),us=s("pre"),dn=u(),Ts=s("p"),fn=l("or:"),kn=u(),is=s("pre"),bn=u(),vn=s("hr"),hn=u(),ds=s("footer"),Ls=s("p"),fs=s("a"),mn=l("get the docs and public domain source code on GitHub"),this.h()},l(k){c=t(k,"MAIN",{class:!0});var r=n(c);b=t(r,"HEADER",{});var Gs=n(b);m=t(Gs,"H1",{class:!0});var Mn=n(m);E=t(Mn,"A",{href:!0});var gn=n(E);z=p(gn,"mutable"),gn.forEach(e),Mn.forEach(e),D=i(Gs),w=t(Gs,"BLOCKQUOTE",{});var Fs=n(w);y=p(Fs,"using mutable values in Svelte stores with the "),g=t(Fs,"CODE",{class:!0});var zn=n(g);I=p(zn,"immutable"),zn.forEach(e),pa=p(Fs,` compiler flag \u2014
			`),$=t(Fs,"A",{href:!0});var Dn=n($);ca=p(Dn,"learn more on GitHub"),Dn.forEach(e),Fs.forEach(e),Gs.forEach(e),ra=i(r),C=t(r,"BUTTON",{class:!0});var Cn=n(C);Ss=p(Cn,"click me to make number++ go up"),Cn.forEach(e),Ns=i(r),f=t(r,"H2",{class:!0});var Ks=n(f);kt=p(Ks,"A. "),ia=t(Ks,"CODE",{class:!0});var Pn=n(ia);bt=p(Pn,"writable"),Pn.forEach(e),vt=p(Ks," store (broken! D:)"),Ks.forEach(e),ht=i(r),P=t(r,"SECTION",{});var ks=n(P);da=t(ks,"PRE",{class:!0});var Lo=n(da);Lo.forEach(e),mt=i(ks),q=t(ks,"DIV",{class:!0});var Us=n(q);j=t(Us,"P",{class:!0});var Qs=n(j);fa=t(Qs,"SPAN",{class:!0});var Rn=n(fa);$s=p(Rn,Rs),Rn.forEach(e),Et=i(Qs),ka=t(Qs,"SPAN",{class:!0});var Fo=n(ka);Fo.forEach(e),Qs.forEach(e),wt=i(Us),W=t(Us,"P",{class:!0});var bs=n(W);_t=p(bs,"fails to update as a "),ba=t(bs,"CODE",{class:!0});var Hn=n(ba);Mt=p(Hn,"writable"),Hn.forEach(e),gt=p(bs," store because "),V=t(bs,"CODE",{class:!0});var Js=n(V);zt=p(Js,"immutable="),Dt=p(Js,wn),Ct=p(Js,"true}"),Js.forEach(e),Pt=p(bs,` and
				we're mutating the map`),bs.forEach(e),Us.forEach(e),Rt=i(ks),va=t(ks,"PRE",{class:!0});var So=n(va);So.forEach(e),ks.forEach(e),Ht=i(r),G=t(r,"H2",{class:!0});var Xs=n(G);Ot=p(Xs,"B. cloned "),ha=t(Xs,"CODE",{class:!0});var On=n(ha);At=p(On,"writable"),On.forEach(e),yt=p(Xs," store"),Xs.forEach(e),Wt=i(r),R=t(r,"SECTION",{});var vs=n(R);ma=t(vs,"PRE",{class:!0});var No=n(ma);No.forEach(e),Tt=i(vs),K=t(vs,"DIV",{class:!0});var Ys=n(K);U=t(Ys,"P",{class:!0});var Zs=n(U);Ea=t(Zs,"SPAN",{class:!0});var An=n(Ea);Bs=p(An,Hs),An.forEach(e),Lt=i(Zs),wa=t(Zs,"SPAN",{class:!0});var $o=n(wa);$o.forEach(e),Zs.forEach(e),Ft=i(Ys),T=t(Ys,"P",{class:!0});var hs=n(T);St=p(hs,"works for "),_a=t(hs,"CODE",{class:!0});var yn=n(_a);Nt=p(yn,"Map"),yn.forEach(e),$t=p(hs,`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),Ma=t(hs,"CODE",{class:!0});var Wn=n(Ma);Bt=p(Wn,"WeakMap"),Wn.forEach(e),It=p(hs,", one of the motivating usecases for this document"),hs.forEach(e),Ys.forEach(e),qt=i(vs),ga=t(vs,"PRE",{class:!0});var Bo=n(ga);Bo.forEach(e),vs.forEach(e),jt=i(r),Vt=t(r,"HR",{}),Gt=i(r),Q=t(r,"BLOCKQUOTE",{style:!0});var xs=n(Q);Kt=p(xs,"in the examples below, notice that you need to access "),za=t(xs,"CODE",{class:!0});var Tn=n(za);Ut=p(Tn,".value"),Tn.forEach(e),Qt=p(xs," for reads, unlike above"),xs.forEach(e),Jt=i(r),Xt=t(r,"HR",{}),Yt=i(r),L=t(r,"H2",{class:!0});var ms=n(L);Zt=p(ms,"C. "),Da=t(ms,"CODE",{class:!0});var Ln=n(Da);xt=p(Ln,"derived"),Ln.forEach(e),ae=p(ms," from "),Ca=t(ms,"CODE",{class:!0});var Fn=n(Ca);se=p(Fn,"writable"),Fn.forEach(e),te=p(ms," store"),ms.forEach(e),ee=i(r),H=t(r,"SECTION",{});var Es=n(H);Pa=t(Es,"PRE",{class:!0});var Io=n(Pa);Io.forEach(e),ne=i(Es),J=t(Es,"DIV",{class:!0});var at=n(J);X=t(at,"P",{class:!0});var st=n(X);Ra=t(st,"SPAN",{class:!0});var Sn=n(Ra);Is=p(Sn,Os),Sn.forEach(e),oe=i(st),Ha=t(st,"SPAN",{class:!0});var qo=n(Ha);qo.forEach(e),st.forEach(e),le=i(at),Y=t(at,"P",{class:!0});var tt=n(Y);pe=p(tt,`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; is error prone because reading the `),Oa=t(tt,"CODE",{class:!0});var Nn=n(Oa);ce=p(Nn,"writable"),Nn.forEach(e),re=p(tt,` isn't
				reactive!`),tt.forEach(e),at.forEach(e),ue=i(Es),Aa=t(Es,"PRE",{class:!0});var jo=n(Aa);jo.forEach(e),Es.forEach(e),ie=i(r),Z=t(r,"H2",{class:!0});var et=n(Z);de=p(et,"D. "),ya=t(et,"CODE",{class:!0});var $n=n(ya);Wa=t($n,"A",{href:!0});var Bn=n(Wa);fe=p(Bn,"mutable"),Bn.forEach(e),$n.forEach(e),ke=p(et," store"),et.forEach(e),be=i(r),O=t(r,"SECTION",{});var ws=n(O);Ta=t(ws,"PRE",{class:!0});var Vo=n(Ta);Vo.forEach(e),ve=i(ws),x=t(ws,"DIV",{class:!0});var nt=n(x);aa=t(nt,"P",{class:!0});var ot=n(aa);La=t(ot,"SPAN",{class:!0});var In=n(La);qs=p(In,As),In.forEach(e),he=i(ot),Fa=t(ot,"SPAN",{class:!0});var Go=n(Fa);Go.forEach(e),ot.forEach(e),me=i(nt),F=t(nt,"P",{class:!0});var _s=n(F);Ee=p(_s,"works because it's a "),Sa=t(_s,"CODE",{class:!0});var qn=n(Sa);Na=t(qn,"A",{href:!0});var jn=n(Na);we=p(jn,"mutable"),jn.forEach(e),qn.forEach(e),_e=p(_s,`
				store; doesn't clone the map; however notice that you need to access `),$a=t(_s,"CODE",{class:!0});var Vn=n($a);Me=p(Vn,".value"),Vn.forEach(e),ge=p(_s," on reads"),_s.forEach(e),nt.forEach(e),ze=i(ws),Ba=t(ws,"PRE",{class:!0});var Ko=n(Ba);Ko.forEach(e),ws.forEach(e),De=i(r),sa=t(r,"H2",{class:!0});var lt=n(sa);Ce=p(lt,"E. "),Ia=t(lt,"CODE",{class:!0});var Gn=n(Ia);qa=t(Gn,"A",{href:!0});var Kn=n(qa);Pe=p(Kn,"fastMutable"),Kn.forEach(e),Gn.forEach(e),Re=p(lt," store"),lt.forEach(e),He=i(r),A=t(r,"SECTION",{});var Ms=n(A);ja=t(Ms,"PRE",{class:!0});var Uo=n(ja);Uo.forEach(e),Oe=i(Ms),ta=t(Ms,"DIV",{class:!0});var pt=n(ta);ea=t(pt,"P",{class:!0});var ct=n(ea);Va=t(ct,"SPAN",{class:!0});var Un=n(Va);js=p(Un,ys),Un.forEach(e),Ae=i(ct),Ga=t(ct,"SPAN",{class:!0});var Qo=n(Ga);Qo.forEach(e),ct.forEach(e),ye=i(pt),S=t(pt,"P",{class:!0});var gs=n(S);We=p(gs,"works because it's a "),Ka=t(gs,"CODE",{class:!0});var Qn=n(Ka);Ua=t(Qn,"A",{href:!0});var Jn=n(Ua);Te=p(Jn,"fastMutable"),Jn.forEach(e),Qn.forEach(e),Le=p(gs,`
				store, which compared to
				`),Qa=t(gs,"CODE",{class:!0});var Xn=n(Qa);Ja=t(Xn,"A",{href:!0});var Yn=n(Ja);Fe=p(Yn,"mutable"),Yn.forEach(e),Xn.forEach(e),Se=p(gs,` is slightly more efficient because it swaps between two stable object references, so there's
				no extra garbage created, but it doesn't compose as an immutable value stream, so it may be a
				dangerously too-clever design`),gs.forEach(e),pt.forEach(e),Ne=i(Ms),Xa=t(Ms,"PRE",{class:!0});var Jo=n(Xa);Jo.forEach(e),Ms.forEach(e),$e=i(r),na=t(r,"H2",{class:!0});var rt=n(na);Be=p(rt,"F. "),Ya=t(rt,"CODE",{class:!0});var Zn=n(Ya);Za=t(Zn,"A",{href:!0});var xn=n(Za);Ie=p(xn,"mutable"),xn.forEach(e),Zn.forEach(e),qe=p(rt," store with manual update and set"),rt.forEach(e),je=i(r),xa=t(r,"PRE",{class:!0});var Xo=n(xa);Xo.forEach(e),Ve=i(r),v=t(r,"SECTION",{});var _=n(v);oa=t(_,"DIV",{class:!0});var ut=n(oa);la=t(ut,"P",{class:!0});var it=n(la);as=t(it,"SPAN",{class:!0});var ao=n(as);Vs=p(ao,Ws),ao.forEach(e),Ge=i(it),ss=t(it,"SPAN",{class:!0});var Yo=n(ss);Yo.forEach(e),it.forEach(e),Ke=i(ut),N=t(ut,"P",{class:!0});var zs=n(N);Ue=p(zs,"works because it's a "),ts=t(zs,"CODE",{class:!0});var so=n(ts);es=t(so,"A",{href:!0});var to=n(es);Qe=p(to,"mutable"),to.forEach(e),so.forEach(e),Je=p(zs,`
				store, but mutates the value directly and then manually calls `),ns=t(zs,"CODE",{class:!0});var eo=n(ns);Xe=p(eo,".update()"),eo.forEach(e),Ye=p(zs,`, which
				may be an antipattern`),zs.forEach(e),ut.forEach(e),Ze=i(_),os=t(_,"PRE",{class:!0});var Zo=n(os);Zo.forEach(e),xe=i(_),B=t(_,"P",{});var Ds=n(B);an=p(Ds,"an alternative using the store's "),ls=t(Ds,"CODE",{class:!0});var no=n(ls);sn=p(no,"set"),no.forEach(e),tn=p(Ds,` method, which is extra awkward because of
			the `),ps=t(Ds,"CODE",{class:!0});var oo=n(ps);en=p(oo,".value"),oo.forEach(e),nn=p(Ds,":"),Ds.forEach(e),on=i(_),cs=t(_,"PRE",{class:!0});var xo=n(cs);xo.forEach(e),ln=i(_),ua=t(_,"P",{});var dt=n(ua);pn=p(dt,"and you can set a new value if you need to, but if this is all you need, prefer a "),rs=t(dt,"CODE",{class:!0});var lo=n(rs);cn=p(lo,"writable"),lo.forEach(e),rn=p(dt,":"),dt.forEach(e),un=i(_),us=t(_,"PRE",{class:!0});var al=n(us);al.forEach(e),dn=i(_),Ts=t(_,"P",{});var po=n(Ts);fn=p(po,"or:"),po.forEach(e),kn=i(_),is=t(_,"PRE",{class:!0});var sl=n(is);sl.forEach(e),_.forEach(e),bn=i(r),vn=t(r,"HR",{}),hn=i(r),ds=t(r,"FOOTER",{class:!0});var co=n(ds);Ls=t(co,"P",{});var ro=n(Ls);fs=t(ro,"A",{href:!0});var uo=n(fs);mn=p(uo,"get the docs and public domain source code on GitHub"),uo.forEach(e),ro.forEach(e),co.forEach(e),r.forEach(e),this.h()},h(){o(E,"href","https://github.com/spiderspace/mutable"),o(m,"class","svelte-z1t7fb"),o(g,"class","svelte-z1t7fb"),o($,"href","https://github.com/spiderspace/mutable"),o(C,"class","svelte-z1t7fb"),o(ia,"class","svelte-z1t7fb"),o(f,"class","svelte-z1t7fb"),o(da,"class","panel-inset svelte-z1t7fb"),o(fa,"class","count svelte-z1t7fb"),o(ka,"class","read-example svelte-z1t7fb"),o(j,"class","count-wrapper panel-outset svelte-z1t7fb"),o(ba,"class","svelte-z1t7fb"),o(V,"class","svelte-z1t7fb"),o(W,"class","count-label svelte-z1t7fb"),o(q,"class","count-with-label svelte-z1t7fb"),o(va,"class","panel-inset svelte-z1t7fb"),M(P,"--hue",d[12](d[0].get("a")),!1),o(ha,"class","svelte-z1t7fb"),o(G,"class","svelte-z1t7fb"),o(ma,"class","panel-inset svelte-z1t7fb"),o(Ea,"class","count svelte-z1t7fb"),o(wa,"class","read-example svelte-z1t7fb"),o(U,"class","count-wrapper panel-outset svelte-z1t7fb"),o(_a,"class","svelte-z1t7fb"),o(Ma,"class","svelte-z1t7fb"),o(T,"class","count-label svelte-z1t7fb"),o(K,"class","count-with-label svelte-z1t7fb"),o(ga,"class","panel-inset svelte-z1t7fb"),M(R,"--hue",d[12](d[1].get("a")),!1),o(za,"class","svelte-z1t7fb"),M(Q,"margin-bottom","0"),o(Da,"class","svelte-z1t7fb"),o(Ca,"class","svelte-z1t7fb"),o(L,"class","svelte-z1t7fb"),o(Pa,"class","panel-inset svelte-z1t7fb"),o(Ra,"class","count svelte-z1t7fb"),o(Ha,"class","read-example svelte-z1t7fb"),o(X,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Oa,"class","svelte-z1t7fb"),o(Y,"class","count-label svelte-z1t7fb"),o(J,"class","count-with-label svelte-z1t7fb"),o(Aa,"class","panel-inset svelte-z1t7fb"),M(H,"--hue",d[12](d[3].value.get("a")),!1),o(Wa,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(ya,"class","svelte-z1t7fb"),o(Z,"class","svelte-z1t7fb"),o(Ta,"class","panel-inset svelte-z1t7fb"),o(La,"class","count svelte-z1t7fb"),o(Fa,"class","read-example svelte-z1t7fb"),o(aa,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Na,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Sa,"class","svelte-z1t7fb"),o($a,"class","svelte-z1t7fb"),o(F,"class","count-label svelte-z1t7fb"),o(x,"class","count-with-label svelte-z1t7fb"),o(Ba,"class","panel-inset svelte-z1t7fb"),M(O,"--hue",d[12](d[4].value.get("a")),!1),o(qa,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/fastMutable.ts"),o(Ia,"class","svelte-z1t7fb"),o(sa,"class","svelte-z1t7fb"),o(ja,"class","panel-inset svelte-z1t7fb"),o(Va,"class","count svelte-z1t7fb"),o(Ga,"class","read-example svelte-z1t7fb"),o(ea,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Ua,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/fastMutable.ts"),o(Ka,"class","svelte-z1t7fb"),o(Ja,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Qa,"class","svelte-z1t7fb"),o(S,"class","count-label svelte-z1t7fb"),o(ta,"class","count-with-label svelte-z1t7fb"),o(Xa,"class","panel-inset svelte-z1t7fb"),M(A,"--hue",d[12](d[5].value.get("a")),!1),o(Za,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Ya,"class","svelte-z1t7fb"),o(na,"class","svelte-z1t7fb"),o(xa,"class","panel-inset svelte-z1t7fb"),o(as,"class","count svelte-z1t7fb"),o(ss,"class","read-example svelte-z1t7fb"),o(la,"class","count-wrapper panel-outset svelte-z1t7fb"),o(es,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(ts,"class","svelte-z1t7fb"),o(ns,"class","svelte-z1t7fb"),o(N,"class","count-label svelte-z1t7fb"),o(oa,"class","count-with-label svelte-z1t7fb"),o(os,"class","panel-inset svelte-z1t7fb"),o(ls,"class","svelte-z1t7fb"),o(ps,"class","svelte-z1t7fb"),o(cs,"class","panel-inset svelte-z1t7fb"),o(rs,"class","svelte-z1t7fb"),o(us,"class","panel-inset svelte-z1t7fb"),o(is,"class","panel-inset svelte-z1t7fb"),M(v,"--hue",d[12](d[2].value.get("a")),!1),o(fs,"href","https://github.com/spiderspace/mutable"),o(ds,"class","svelte-z1t7fb"),o(c,"class","markup column svelte-z1t7fb")},m(k,r){ol(k,c,r),a(c,b),a(b,m),a(m,E),a(E,z),a(b,D),a(b,w),a(w,y),a(w,g),a(g,I),a(w,pa),a(w,$),a($,ca),a(c,ra),a(c,C),a(C,Ss),a(c,Ns),a(c,f),a(f,kt),a(f,ia),a(ia,bt),a(f,vt),a(c,ht),a(c,P),a(P,da),da.innerHTML=ko,a(P,mt),a(P,q),a(q,j),a(j,fa),a(fa,$s),a(j,Et),a(j,ka),ka.innerHTML=bo,a(q,wt),a(q,W),a(W,_t),a(W,ba),a(ba,Mt),a(W,gt),a(W,V),a(V,zt),a(V,Dt),a(V,Ct),a(W,Pt),a(P,Rt),a(P,va),va.innerHTML=vo,a(c,Ht),a(c,G),a(G,Ot),a(G,ha),a(ha,At),a(G,yt),a(c,Wt),a(c,R),a(R,ma),ma.innerHTML=ho,a(R,Tt),a(R,K),a(K,U),a(U,Ea),a(Ea,Bs),a(U,Lt),a(U,wa),wa.innerHTML=mo,a(K,Ft),a(K,T),a(T,St),a(T,_a),a(_a,Nt),a(T,$t),a(T,Ma),a(Ma,Bt),a(T,It),a(R,qt),a(R,ga),ga.innerHTML=Eo,a(c,jt),a(c,Vt),a(c,Gt),a(c,Q),a(Q,Kt),a(Q,za),a(za,Ut),a(Q,Qt),a(c,Jt),a(c,Xt),a(c,Yt),a(c,L),a(L,Zt),a(L,Da),a(Da,xt),a(L,ae),a(L,Ca),a(Ca,se),a(L,te),a(c,ee),a(c,H),a(H,Pa),Pa.innerHTML=wo,a(H,ne),a(H,J),a(J,X),a(X,Ra),a(Ra,Is),a(X,oe),a(X,Ha),Ha.innerHTML=_o,a(J,le),a(J,Y),a(Y,pe),a(Y,Oa),a(Oa,ce),a(Y,re),a(H,ue),a(H,Aa),Aa.innerHTML=Mo,a(c,ie),a(c,Z),a(Z,de),a(Z,ya),a(ya,Wa),a(Wa,fe),a(Z,ke),a(c,be),a(c,O),a(O,Ta),Ta.innerHTML=go,a(O,ve),a(O,x),a(x,aa),a(aa,La),a(La,qs),a(aa,he),a(aa,Fa),Fa.innerHTML=zo,a(x,me),a(x,F),a(F,Ee),a(F,Sa),a(Sa,Na),a(Na,we),a(F,_e),a(F,$a),a($a,Me),a(F,ge),a(O,ze),a(O,Ba),Ba.innerHTML=Do,a(c,De),a(c,sa),a(sa,Ce),a(sa,Ia),a(Ia,qa),a(qa,Pe),a(sa,Re),a(c,He),a(c,A),a(A,ja),ja.innerHTML=Co,a(A,Oe),a(A,ta),a(ta,ea),a(ea,Va),a(Va,js),a(ea,Ae),a(ea,Ga),Ga.innerHTML=Po,a(ta,ye),a(ta,S),a(S,We),a(S,Ka),a(Ka,Ua),a(Ua,Te),a(S,Le),a(S,Qa),a(Qa,Ja),a(Ja,Fe),a(S,Se),a(A,Ne),a(A,Xa),Xa.innerHTML=Ro,a(c,$e),a(c,na),a(na,Be),a(na,Ya),a(Ya,Za),a(Za,Ie),a(na,qe),a(c,je),a(c,xa),xa.innerHTML=Ho,a(c,Ve),a(c,v),a(v,oa),a(oa,la),a(la,as),a(as,Vs),a(la,Ge),a(la,ss),ss.innerHTML=Oo,a(oa,Ke),a(oa,N),a(N,Ue),a(N,ts),a(ts,es),a(es,Qe),a(N,Je),a(N,ns),a(ns,Xe),a(N,Ye),a(v,Ze),a(v,os),os.innerHTML=Ao,a(v,xe),a(v,B),a(B,an),a(B,ls),a(ls,sn),a(B,tn),a(B,ps),a(ps,en),a(B,nn),a(v,on),a(v,cs),cs.innerHTML=yo,a(v,ln),a(v,ua),a(ua,pn),a(ua,rs),a(rs,cn),a(ua,rn),a(v,un),a(v,us),us.innerHTML=Wo,a(v,dn),a(v,Ts),a(Ts,fn),a(v,kn),a(v,is),is.innerHTML=To,a(c,bn),a(c,vn),a(c,hn),a(c,ds),a(ds,Ls),a(Ls,fs),a(fs,mn),En||(_n=ll(C,"click",d[13]),En=!0)},p(k,[r]){r&1&&Rs!==(Rs=k[0].get("a")+"")&&Cs($s,Rs),r&1&&M(P,"--hue",k[12](k[0].get("a")),!1),r&2&&Hs!==(Hs=k[1].get("a")+"")&&Cs(Bs,Hs),r&2&&M(R,"--hue",k[12](k[1].get("a")),!1),r&8&&Os!==(Os=k[3].value.get("a")+"")&&Cs(Is,Os),r&8&&M(H,"--hue",k[12](k[3].value.get("a")),!1),r&16&&As!==(As=k[4].value.get("a")+"")&&Cs(qs,As),r&16&&M(O,"--hue",k[12](k[4].value.get("a")),!1),r&32&&ys!==(ys=k[5].value.get("a")+"")&&Cs(js,ys),r&32&&M(A,"--hue",k[12](k[5].value.get("a")),!1),r&4&&Ws!==(Ws=k[2].value.get("a")+"")&&Cs(Vs,Ws),r&4&&M(v,"--hue",k[12](k[2].value.get("a")),!1)},i:io,o:io,d(k){k&&e(c),En=!1,_n()}}}function yl(d,c,b){let m,E,z,D,w,y;const g=[["a",1]],I=ft(new Map(g));Ps(d,I,f=>b(0,m=f));const pa=ft(new Map(g));Ps(d,pa,f=>b(1,E=f));const $=pl(I,f=>({value:f}));Ps(d,$,f=>b(3,D=f));const ca=fo(new Map(g));Ps(d,ca,f=>b(4,w=f));const ra=rl(new Map(g));Ps(d,ra,f=>b(5,y=f));const C=fo(new Map(g));return Ps(d,C,f=>b(2,z=f)),[m,E,z,D,w,y,I,pa,$,ca,ra,C,f=>f*37+"",()=>{m.set("a",m.get("a")+1),I.set(m),E.set("a",E.get("a")+1),cl(pa,E=new Map(E),E),ca.update(f=>{f.set("a",f.get("a")+1)}),ra.update(f=>{f.set("a",f.get("a")+1)}),z.value.set("a",z.value.get("a")+1),C.update()}]}class Tl extends tl{constructor(c){super();el(this,c,yl,Al,nl,{})}}export{Tl as default};
