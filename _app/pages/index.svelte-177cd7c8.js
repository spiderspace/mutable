import{C as me,S as rl,i as ul,n as il,e as s,t as l,j as u,c as e,a as n,g as c,d as t,m as i,b as o,K as g,f as dl,F as a,L as kl,s as Ps,J as Eo,M as Rs,N as vl,O as hl}from"../chunks/vendor-7ffe92ef.js";const wo=d=>{const{subscribe:p,set:h}=me({value:d});return{subscribe:p,update:b=>{if(b){const E=b(d);E!==void 0&&E!==d&&(d=E)}h({value:d})},set:b=>{d=b,h({value:d})}}},ml=d=>{let p=!1;const h={value:d},b={value:d},{subscribe:E,set:z}=me(h);return{subscribe:E,update:x=>{p=!p;const w=p?b:h;if(x){const A=x(d);A!==void 0&&A!==d&&(d=w.value=A)}z(w)},set:x=>{p=!p;const w=p?b:h;d=w.value=x,z(w)}}},fl='<span class="token keyword">const</span> writableMap <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',bl=`$writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,El=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,wl='<span class="token keyword">const</span> writableMapCloned <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',_l=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,gl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,Ml='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',zl=`$derivedWritableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,xl=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,Dl='<span class="token keyword">const</span> mutableMap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Cl=`$mutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Pl=`mutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Rl='<span class="token keyword">const</span> fastMutableMap <span class="token operator">=</span> <span class="token function">fastMutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Hl=`$fastMutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Ol=`fastMutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Al='<span class="token keyword">const</span> mutableMapManual <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',yl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Wl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,Tl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$mutableMapManual <span class="token operator">=</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">;</span>`,Ll='$mutableMapManual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Fl='mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token comment">/*...*/</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>';var f={ADef:fl,ARead:bl,AWrite:El,BDef:wl,BRead:_l,BWrite:gl,CDef:Ml,CRead:zl,CWrite:xl,DDef:Dl,DRead:Cl,DWrite:Pl,EDef:Rl,ERead:Hl,EWrite:Ol,FDef:Al,FRead:yl,F1Write:Wl,F2Write:Tl,F3Write:Ll,F4Write:Fl};function Sl(d){let p,h,b,E,z,x,w,A,M,B,pa,N,ra,ua,D,Ns,$s,k,fe,da,be,Ee,we,C,ka,_o=f.ADef+"",_e,I,q,va,Hs=d[0].get("a")+"",Bs,ge,ha,go=f.ARead+"",Me,y,ze,ma,xe,De,j,Ce,Cn="{",Pe,Re,He,Oe,fa,Mo=f.AWrite+"",Ae,V,ye,ba,We,Te,Le,P,Ea,zo=f.BDef+"",Fe,G,K,wa,Os=d[1].get("a")+"",Is,Se,_a,xo=f.BRead+"",Ne,W,$e,ga,Be,Ie,Ma,qe,je,Ve,za,Do=f.BWrite+"",Ge,Ke,Ue,U,Qe,xa,Je,Xe,Ye,Ze,at,T,st,Da,et,tt,Ca,nt,ot,lt,R,Pa,Co=f.CDef+"",ct,Q,J,Ra,As=d[3].value.get("a")+"",qs,pt,Ha,Po=f.CRead+"",rt,X,ut,Oa,it,dt,kt,Aa,Ro=f.CWrite+"",vt,Y,ht,ya,Wa,mt,ft,bt,H,Ta,Ho=f.DDef+"",Et,Z,aa,La,ys=d[4].value.get("a")+"",js,wt,Fa,Oo=f.DRead+"",_t,L,gt,Sa,Na,Mt,zt,$a,xt,Dt,Ct,Ba,Ao=f.DWrite+"",Pt,sa,Rt,Ia,qa,Ht,Ot,At,O,ja,yo=f.EDef+"",yt,ea,ta,Va,Ws=d[5].value.get("a")+"",Vs,Wt,Ga,Wo=f.ERead+"",Tt,F,Lt,Ka,Ua,Ft,St,Qa,Ja,Nt,$t,Bt,Xa,To=f.EWrite+"",It,na,qt,Ya,Za,jt,Vt,Gt,as,Lo=f.FDef+"",Kt,m,oa,la,ss,Ts=d[2].value.get("a")+"",Gs,Ut,es,Fo=f.FRead+"",Qt,S,Jt,ts,ns,Xt,Yt,os,Zt,an,sn,ls,So=f.F1Write+"",en,$,tn,cs,nn,on,ps,ln,cn,pn,rs,No=f.F2Write+"",rn,ia,un,us,dn,kn,vn,is,$o=f.F3Write+"",hn,Ls,mn,fn,ds,Bo=f.F4Write+"",bn,En,wn,ca,ks,_n,vs,gn,Mn,Fs,hs,zn,xn,Pn;return{c(){p=s("main"),h=s("header"),b=s("h1"),E=s("a"),z=l("mutable"),x=u(),w=s("blockquote"),A=l("using mutable values in Svelte stores with the "),M=s("code"),B=l("immutable"),pa=l(` compiler flag \u2014
			`),N=s("a"),ra=l("learn more on GitHub"),ua=u(),D=s("button"),Ns=l("click me to make number++ go up"),$s=u(),k=s("h2"),fe=l("A. "),da=s("code"),be=l("writable"),Ee=l(" store (broken! D:)"),we=u(),C=s("section"),ka=s("pre"),_e=u(),I=s("div"),q=s("p"),va=s("span"),Bs=l(Hs),ge=u(),ha=s("span"),Me=u(),y=s("p"),ze=l("fails to update as a "),ma=s("code"),xe=l("writable"),De=l(" store because "),j=s("code"),Ce=l("immutable="),Pe=l(Cn),Re=l("true}"),He=l(` and
				we're mutating the map`),Oe=u(),fa=s("pre"),Ae=u(),V=s("h2"),ye=l("B. cloned "),ba=s("code"),We=l("writable"),Te=l(" store"),Le=u(),P=s("section"),Ea=s("pre"),Fe=u(),G=s("div"),K=s("p"),wa=s("span"),Is=l(Os),Se=u(),_a=s("span"),Ne=u(),W=s("p"),$e=l("works for "),ga=s("code"),Be=l("Map"),Ie=l(`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),Ma=s("code"),qe=l("WeakMap"),je=l(", one of the motivating usecases for this document"),Ve=u(),za=s("pre"),Ge=u(),Ke=s("hr"),Ue=u(),U=s("blockquote"),Qe=l("in the examples below, notice that you need to access "),xa=s("code"),Je=l(".value"),Xe=l(" for reads, unlike above"),Ye=u(),Ze=s("hr"),at=u(),T=s("h2"),st=l("C. "),Da=s("code"),et=l("derived"),tt=l(" from "),Ca=s("code"),nt=l("writable"),ot=l(" store"),lt=u(),R=s("section"),Pa=s("pre"),ct=u(),Q=s("div"),J=s("p"),Ra=s("span"),qs=l(As),pt=u(),Ha=s("span"),rt=u(),X=s("p"),ut=l(`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; is error prone because reading the `),Oa=s("code"),it=l("writable"),dt=l(` isn't
				reactive!`),kt=u(),Aa=s("pre"),vt=u(),Y=s("h2"),ht=l("D. "),ya=s("code"),Wa=s("a"),mt=l("mutable"),ft=l(" store"),bt=u(),H=s("section"),Ta=s("pre"),Et=u(),Z=s("div"),aa=s("p"),La=s("span"),js=l(ys),wt=u(),Fa=s("span"),_t=u(),L=s("p"),gt=l("works because it's a "),Sa=s("code"),Na=s("a"),Mt=l("mutable"),zt=l(`
				store; doesn't clone the map; however notice that you need to access `),$a=s("code"),xt=l(".value"),Dt=l(" on reads"),Ct=u(),Ba=s("pre"),Pt=u(),sa=s("h2"),Rt=l("E. "),Ia=s("code"),qa=s("a"),Ht=l("fastMutable"),Ot=l(" store"),At=u(),O=s("section"),ja=s("pre"),yt=u(),ea=s("div"),ta=s("p"),Va=s("span"),Vs=l(Ws),Wt=u(),Ga=s("span"),Tt=u(),F=s("p"),Lt=l("works because it's a "),Ka=s("code"),Ua=s("a"),Ft=l("fastMutable"),St=l(`
				store, which compared to
				`),Qa=s("code"),Ja=s("a"),Nt=l("mutable"),$t=l(` is slightly more efficient because it swaps between two stable object references, so there's
				no extra garbage created, but it doesn't compose as an immutable value stream, so it may be a
				dangerously too-clever design`),Bt=u(),Xa=s("pre"),It=u(),na=s("h2"),qt=l("F. "),Ya=s("code"),Za=s("a"),jt=l("mutable"),Vt=l(" store with manual update and set"),Gt=u(),as=s("pre"),Kt=u(),m=s("section"),oa=s("div"),la=s("p"),ss=s("span"),Gs=l(Ts),Ut=u(),es=s("span"),Qt=u(),S=s("p"),Jt=l("works because it's a "),ts=s("code"),ns=s("a"),Xt=l("mutable"),Yt=l(`
				store, but mutates the value directly and then manually calls `),os=s("code"),Zt=l(".update()"),an=l(`, which
				may be an antipattern`),sn=u(),ls=s("pre"),en=u(),$=s("p"),tn=l("an alternative using the store's "),cs=s("code"),nn=l("set"),on=l(` method, which is extra awkward because of
			the `),ps=s("code"),ln=l(".value"),cn=l(":"),pn=u(),rs=s("pre"),rn=u(),ia=s("p"),un=l("and you can set a new value if you need to, but if this is all you need, prefer a "),us=s("code"),dn=l("writable"),kn=l(":"),vn=u(),is=s("pre"),hn=u(),Ls=s("p"),mn=l("or:"),fn=u(),ds=s("pre"),bn=u(),En=s("hr"),wn=u(),ca=s("footer"),ks=s("p"),_n=l("want to discuss or help with some open questions? "),vs=s("a"),gn=l("go here"),Mn=u(),Fs=s("p"),hs=s("a"),zn=l("get the docs and public domain source code on GitHub"),this.h()},l(v){p=e(v,"MAIN",{class:!0});var r=n(p);h=e(r,"HEADER",{});var Ks=n(h);b=e(Ks,"H1",{class:!0});var Rn=n(b);E=e(Rn,"A",{href:!0});var Hn=n(E);z=c(Hn,"mutable"),Hn.forEach(t),Rn.forEach(t),x=i(Ks),w=e(Ks,"BLOCKQUOTE",{});var Ss=n(w);A=c(Ss,"using mutable values in Svelte stores with the "),M=e(Ss,"CODE",{class:!0});var On=n(M);B=c(On,"immutable"),On.forEach(t),pa=c(Ss,` compiler flag \u2014
			`),N=e(Ss,"A",{href:!0});var An=n(N);ra=c(An,"learn more on GitHub"),An.forEach(t),Ss.forEach(t),Ks.forEach(t),ua=i(r),D=e(r,"BUTTON",{class:!0});var yn=n(D);Ns=c(yn,"click me to make number++ go up"),yn.forEach(t),$s=i(r),k=e(r,"H2",{class:!0});var Us=n(k);fe=c(Us,"A. "),da=e(Us,"CODE",{class:!0});var Wn=n(da);be=c(Wn,"writable"),Wn.forEach(t),Ee=c(Us," store (broken! D:)"),Us.forEach(t),we=i(r),C=e(r,"SECTION",{});var ms=n(C);ka=e(ms,"PRE",{class:!0});var Io=n(ka);Io.forEach(t),_e=i(ms),I=e(ms,"DIV",{class:!0});var Qs=n(I);q=e(Qs,"P",{class:!0});var Js=n(q);va=e(Js,"SPAN",{class:!0});var Tn=n(va);Bs=c(Tn,Hs),Tn.forEach(t),ge=i(Js),ha=e(Js,"SPAN",{class:!0});var qo=n(ha);qo.forEach(t),Js.forEach(t),Me=i(Qs),y=e(Qs,"P",{class:!0});var fs=n(y);ze=c(fs,"fails to update as a "),ma=e(fs,"CODE",{class:!0});var Ln=n(ma);xe=c(Ln,"writable"),Ln.forEach(t),De=c(fs," store because "),j=e(fs,"CODE",{class:!0});var Xs=n(j);Ce=c(Xs,"immutable="),Pe=c(Xs,Cn),Re=c(Xs,"true}"),Xs.forEach(t),He=c(fs,` and
				we're mutating the map`),fs.forEach(t),Qs.forEach(t),Oe=i(ms),fa=e(ms,"PRE",{class:!0});var jo=n(fa);jo.forEach(t),ms.forEach(t),Ae=i(r),V=e(r,"H2",{class:!0});var Ys=n(V);ye=c(Ys,"B. cloned "),ba=e(Ys,"CODE",{class:!0});var Fn=n(ba);We=c(Fn,"writable"),Fn.forEach(t),Te=c(Ys," store"),Ys.forEach(t),Le=i(r),P=e(r,"SECTION",{});var bs=n(P);Ea=e(bs,"PRE",{class:!0});var Vo=n(Ea);Vo.forEach(t),Fe=i(bs),G=e(bs,"DIV",{class:!0});var Zs=n(G);K=e(Zs,"P",{class:!0});var ae=n(K);wa=e(ae,"SPAN",{class:!0});var Sn=n(wa);Is=c(Sn,Os),Sn.forEach(t),Se=i(ae),_a=e(ae,"SPAN",{class:!0});var Go=n(_a);Go.forEach(t),ae.forEach(t),Ne=i(Zs),W=e(Zs,"P",{class:!0});var Es=n(W);$e=c(Es,"works for "),ga=e(Es,"CODE",{class:!0});var Nn=n(ga);Be=c(Nn,"Map"),Nn.forEach(t),Ie=c(Es,`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),Ma=e(Es,"CODE",{class:!0});var $n=n(Ma);qe=c($n,"WeakMap"),$n.forEach(t),je=c(Es,", one of the motivating usecases for this document"),Es.forEach(t),Zs.forEach(t),Ve=i(bs),za=e(bs,"PRE",{class:!0});var Ko=n(za);Ko.forEach(t),bs.forEach(t),Ge=i(r),Ke=e(r,"HR",{}),Ue=i(r),U=e(r,"BLOCKQUOTE",{style:!0});var se=n(U);Qe=c(se,"in the examples below, notice that you need to access "),xa=e(se,"CODE",{class:!0});var Bn=n(xa);Je=c(Bn,".value"),Bn.forEach(t),Xe=c(se," for reads, unlike above"),se.forEach(t),Ye=i(r),Ze=e(r,"HR",{}),at=i(r),T=e(r,"H2",{class:!0});var ws=n(T);st=c(ws,"C. "),Da=e(ws,"CODE",{class:!0});var In=n(Da);et=c(In,"derived"),In.forEach(t),tt=c(ws," from "),Ca=e(ws,"CODE",{class:!0});var qn=n(Ca);nt=c(qn,"writable"),qn.forEach(t),ot=c(ws," store"),ws.forEach(t),lt=i(r),R=e(r,"SECTION",{});var _s=n(R);Pa=e(_s,"PRE",{class:!0});var Uo=n(Pa);Uo.forEach(t),ct=i(_s),Q=e(_s,"DIV",{class:!0});var ee=n(Q);J=e(ee,"P",{class:!0});var te=n(J);Ra=e(te,"SPAN",{class:!0});var jn=n(Ra);qs=c(jn,As),jn.forEach(t),pt=i(te),Ha=e(te,"SPAN",{class:!0});var Qo=n(Ha);Qo.forEach(t),te.forEach(t),rt=i(ee),X=e(ee,"P",{class:!0});var ne=n(X);ut=c(ne,`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; is error prone because reading the `),Oa=e(ne,"CODE",{class:!0});var Vn=n(Oa);it=c(Vn,"writable"),Vn.forEach(t),dt=c(ne,` isn't
				reactive!`),ne.forEach(t),ee.forEach(t),kt=i(_s),Aa=e(_s,"PRE",{class:!0});var Jo=n(Aa);Jo.forEach(t),_s.forEach(t),vt=i(r),Y=e(r,"H2",{class:!0});var oe=n(Y);ht=c(oe,"D. "),ya=e(oe,"CODE",{class:!0});var Gn=n(ya);Wa=e(Gn,"A",{href:!0});var Kn=n(Wa);mt=c(Kn,"mutable"),Kn.forEach(t),Gn.forEach(t),ft=c(oe," store"),oe.forEach(t),bt=i(r),H=e(r,"SECTION",{});var gs=n(H);Ta=e(gs,"PRE",{class:!0});var Xo=n(Ta);Xo.forEach(t),Et=i(gs),Z=e(gs,"DIV",{class:!0});var le=n(Z);aa=e(le,"P",{class:!0});var ce=n(aa);La=e(ce,"SPAN",{class:!0});var Un=n(La);js=c(Un,ys),Un.forEach(t),wt=i(ce),Fa=e(ce,"SPAN",{class:!0});var Yo=n(Fa);Yo.forEach(t),ce.forEach(t),_t=i(le),L=e(le,"P",{class:!0});var Ms=n(L);gt=c(Ms,"works because it's a "),Sa=e(Ms,"CODE",{class:!0});var Qn=n(Sa);Na=e(Qn,"A",{href:!0});var Jn=n(Na);Mt=c(Jn,"mutable"),Jn.forEach(t),Qn.forEach(t),zt=c(Ms,`
				store; doesn't clone the map; however notice that you need to access `),$a=e(Ms,"CODE",{class:!0});var Xn=n($a);xt=c(Xn,".value"),Xn.forEach(t),Dt=c(Ms," on reads"),Ms.forEach(t),le.forEach(t),Ct=i(gs),Ba=e(gs,"PRE",{class:!0});var Zo=n(Ba);Zo.forEach(t),gs.forEach(t),Pt=i(r),sa=e(r,"H2",{class:!0});var pe=n(sa);Rt=c(pe,"E. "),Ia=e(pe,"CODE",{class:!0});var Yn=n(Ia);qa=e(Yn,"A",{href:!0});var Zn=n(qa);Ht=c(Zn,"fastMutable"),Zn.forEach(t),Yn.forEach(t),Ot=c(pe," store"),pe.forEach(t),At=i(r),O=e(r,"SECTION",{});var zs=n(O);ja=e(zs,"PRE",{class:!0});var al=n(ja);al.forEach(t),yt=i(zs),ea=e(zs,"DIV",{class:!0});var re=n(ea);ta=e(re,"P",{class:!0});var ue=n(ta);Va=e(ue,"SPAN",{class:!0});var ao=n(Va);Vs=c(ao,Ws),ao.forEach(t),Wt=i(ue),Ga=e(ue,"SPAN",{class:!0});var sl=n(Ga);sl.forEach(t),ue.forEach(t),Tt=i(re),F=e(re,"P",{class:!0});var xs=n(F);Lt=c(xs,"works because it's a "),Ka=e(xs,"CODE",{class:!0});var so=n(Ka);Ua=e(so,"A",{href:!0});var eo=n(Ua);Ft=c(eo,"fastMutable"),eo.forEach(t),so.forEach(t),St=c(xs,`
				store, which compared to
				`),Qa=e(xs,"CODE",{class:!0});var to=n(Qa);Ja=e(to,"A",{href:!0});var no=n(Ja);Nt=c(no,"mutable"),no.forEach(t),to.forEach(t),$t=c(xs,` is slightly more efficient because it swaps between two stable object references, so there's
				no extra garbage created, but it doesn't compose as an immutable value stream, so it may be a
				dangerously too-clever design`),xs.forEach(t),re.forEach(t),Bt=i(zs),Xa=e(zs,"PRE",{class:!0});var el=n(Xa);el.forEach(t),zs.forEach(t),It=i(r),na=e(r,"H2",{class:!0});var ie=n(na);qt=c(ie,"F. "),Ya=e(ie,"CODE",{class:!0});var oo=n(Ya);Za=e(oo,"A",{href:!0});var lo=n(Za);jt=c(lo,"mutable"),lo.forEach(t),oo.forEach(t),Vt=c(ie," store with manual update and set"),ie.forEach(t),Gt=i(r),as=e(r,"PRE",{class:!0});var tl=n(as);tl.forEach(t),Kt=i(r),m=e(r,"SECTION",{});var _=n(m);oa=e(_,"DIV",{class:!0});var de=n(oa);la=e(de,"P",{class:!0});var ke=n(la);ss=e(ke,"SPAN",{class:!0});var co=n(ss);Gs=c(co,Ts),co.forEach(t),Ut=i(ke),es=e(ke,"SPAN",{class:!0});var nl=n(es);nl.forEach(t),ke.forEach(t),Qt=i(de),S=e(de,"P",{class:!0});var Ds=n(S);Jt=c(Ds,"works because it's a "),ts=e(Ds,"CODE",{class:!0});var po=n(ts);ns=e(po,"A",{href:!0});var ro=n(ns);Xt=c(ro,"mutable"),ro.forEach(t),po.forEach(t),Yt=c(Ds,`
				store, but mutates the value directly and then manually calls `),os=e(Ds,"CODE",{class:!0});var uo=n(os);Zt=c(uo,".update()"),uo.forEach(t),an=c(Ds,`, which
				may be an antipattern`),Ds.forEach(t),de.forEach(t),sn=i(_),ls=e(_,"PRE",{class:!0});var ol=n(ls);ol.forEach(t),en=i(_),$=e(_,"P",{});var Cs=n($);tn=c(Cs,"an alternative using the store's "),cs=e(Cs,"CODE",{class:!0});var io=n(cs);nn=c(io,"set"),io.forEach(t),on=c(Cs,` method, which is extra awkward because of
			the `),ps=e(Cs,"CODE",{class:!0});var ko=n(ps);ln=c(ko,".value"),ko.forEach(t),cn=c(Cs,":"),Cs.forEach(t),pn=i(_),rs=e(_,"PRE",{class:!0});var ll=n(rs);ll.forEach(t),rn=i(_),ia=e(_,"P",{});var ve=n(ia);un=c(ve,"and you can set a new value if you need to, but if this is all you need, prefer a "),us=e(ve,"CODE",{class:!0});var vo=n(us);dn=c(vo,"writable"),vo.forEach(t),kn=c(ve,":"),ve.forEach(t),vn=i(_),is=e(_,"PRE",{class:!0});var cl=n(is);cl.forEach(t),hn=i(_),Ls=e(_,"P",{});var ho=n(Ls);mn=c(ho,"or:"),ho.forEach(t),fn=i(_),ds=e(_,"PRE",{class:!0});var pl=n(ds);pl.forEach(t),_.forEach(t),bn=i(r),En=e(r,"HR",{}),wn=i(r),ca=e(r,"FOOTER",{class:!0});var he=n(ca);ks=e(he,"P",{});var Dn=n(ks);_n=c(Dn,"want to discuss or help with some open questions? "),vs=e(Dn,"A",{href:!0});var mo=n(vs);gn=c(mo,"go here"),mo.forEach(t),Dn.forEach(t),Mn=i(he),Fs=e(he,"P",{});var fo=n(Fs);hs=e(fo,"A",{href:!0});var bo=n(hs);zn=c(bo,"get the docs and public domain source code on GitHub"),bo.forEach(t),fo.forEach(t),he.forEach(t),r.forEach(t),this.h()},h(){o(E,"href","https://github.com/spiderspace/mutable"),o(b,"class","svelte-16xmzca"),o(M,"class","svelte-16xmzca"),o(N,"href","https://github.com/spiderspace/mutable"),o(D,"class","svelte-16xmzca"),o(da,"class","svelte-16xmzca"),o(k,"class","svelte-16xmzca"),o(ka,"class","panel-inset svelte-16xmzca"),o(va,"class","count svelte-16xmzca"),o(ha,"class","read-example svelte-16xmzca"),o(q,"class","count-wrapper panel-outset svelte-16xmzca"),o(ma,"class","svelte-16xmzca"),o(j,"class","svelte-16xmzca"),o(y,"class","count-label svelte-16xmzca"),o(I,"class","count-with-label svelte-16xmzca"),o(fa,"class","panel-inset svelte-16xmzca"),g(C,"--hue",d[12](d[0].get("a")),!1),o(ba,"class","svelte-16xmzca"),o(V,"class","svelte-16xmzca"),o(Ea,"class","panel-inset svelte-16xmzca"),o(wa,"class","count svelte-16xmzca"),o(_a,"class","read-example svelte-16xmzca"),o(K,"class","count-wrapper panel-outset svelte-16xmzca"),o(ga,"class","svelte-16xmzca"),o(Ma,"class","svelte-16xmzca"),o(W,"class","count-label svelte-16xmzca"),o(G,"class","count-with-label svelte-16xmzca"),o(za,"class","panel-inset svelte-16xmzca"),g(P,"--hue",d[12](d[1].get("a")),!1),o(xa,"class","svelte-16xmzca"),g(U,"margin-bottom","0"),o(Da,"class","svelte-16xmzca"),o(Ca,"class","svelte-16xmzca"),o(T,"class","svelte-16xmzca"),o(Pa,"class","panel-inset svelte-16xmzca"),o(Ra,"class","count svelte-16xmzca"),o(Ha,"class","read-example svelte-16xmzca"),o(J,"class","count-wrapper panel-outset svelte-16xmzca"),o(Oa,"class","svelte-16xmzca"),o(X,"class","count-label svelte-16xmzca"),o(Q,"class","count-with-label svelte-16xmzca"),o(Aa,"class","panel-inset svelte-16xmzca"),g(R,"--hue",d[12](d[3].value.get("a")),!1),o(Wa,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(ya,"class","svelte-16xmzca"),o(Y,"class","svelte-16xmzca"),o(Ta,"class","panel-inset svelte-16xmzca"),o(La,"class","count svelte-16xmzca"),o(Fa,"class","read-example svelte-16xmzca"),o(aa,"class","count-wrapper panel-outset svelte-16xmzca"),o(Na,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Sa,"class","svelte-16xmzca"),o($a,"class","svelte-16xmzca"),o(L,"class","count-label svelte-16xmzca"),o(Z,"class","count-with-label svelte-16xmzca"),o(Ba,"class","panel-inset svelte-16xmzca"),g(H,"--hue",d[12](d[4].value.get("a")),!1),o(qa,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/fastMutable.ts"),o(Ia,"class","svelte-16xmzca"),o(sa,"class","svelte-16xmzca"),o(ja,"class","panel-inset svelte-16xmzca"),o(Va,"class","count svelte-16xmzca"),o(Ga,"class","read-example svelte-16xmzca"),o(ta,"class","count-wrapper panel-outset svelte-16xmzca"),o(Ua,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/fastMutable.ts"),o(Ka,"class","svelte-16xmzca"),o(Ja,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Qa,"class","svelte-16xmzca"),o(F,"class","count-label svelte-16xmzca"),o(ea,"class","count-with-label svelte-16xmzca"),o(Xa,"class","panel-inset svelte-16xmzca"),g(O,"--hue",d[12](d[5].value.get("a")),!1),o(Za,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(Ya,"class","svelte-16xmzca"),o(na,"class","svelte-16xmzca"),o(as,"class","panel-inset svelte-16xmzca"),o(ss,"class","count svelte-16xmzca"),o(es,"class","read-example svelte-16xmzca"),o(la,"class","count-wrapper panel-outset svelte-16xmzca"),o(ns,"href","https://github.com/spiderspace/mutable/blob/main/src/lib/mutable.ts"),o(ts,"class","svelte-16xmzca"),o(os,"class","svelte-16xmzca"),o(S,"class","count-label svelte-16xmzca"),o(oa,"class","count-with-label svelte-16xmzca"),o(ls,"class","panel-inset svelte-16xmzca"),o(cs,"class","svelte-16xmzca"),o(ps,"class","svelte-16xmzca"),o(rs,"class","panel-inset svelte-16xmzca"),o(us,"class","svelte-16xmzca"),o(is,"class","panel-inset svelte-16xmzca"),o(ds,"class","panel-inset svelte-16xmzca"),g(m,"--hue",d[12](d[2].value.get("a")),!1),o(vs,"href","https://github.com/spiderspace/spiderspace/discussions/5"),o(hs,"href","https://github.com/spiderspace/mutable"),o(ca,"class","markup svelte-16xmzca"),o(p,"class","markup column svelte-16xmzca")},m(v,r){dl(v,p,r),a(p,h),a(h,b),a(b,E),a(E,z),a(h,x),a(h,w),a(w,A),a(w,M),a(M,B),a(w,pa),a(w,N),a(N,ra),a(p,ua),a(p,D),a(D,Ns),a(p,$s),a(p,k),a(k,fe),a(k,da),a(da,be),a(k,Ee),a(p,we),a(p,C),a(C,ka),ka.innerHTML=_o,a(C,_e),a(C,I),a(I,q),a(q,va),a(va,Bs),a(q,ge),a(q,ha),ha.innerHTML=go,a(I,Me),a(I,y),a(y,ze),a(y,ma),a(ma,xe),a(y,De),a(y,j),a(j,Ce),a(j,Pe),a(j,Re),a(y,He),a(C,Oe),a(C,fa),fa.innerHTML=Mo,a(p,Ae),a(p,V),a(V,ye),a(V,ba),a(ba,We),a(V,Te),a(p,Le),a(p,P),a(P,Ea),Ea.innerHTML=zo,a(P,Fe),a(P,G),a(G,K),a(K,wa),a(wa,Is),a(K,Se),a(K,_a),_a.innerHTML=xo,a(G,Ne),a(G,W),a(W,$e),a(W,ga),a(ga,Be),a(W,Ie),a(W,Ma),a(Ma,qe),a(W,je),a(P,Ve),a(P,za),za.innerHTML=Do,a(p,Ge),a(p,Ke),a(p,Ue),a(p,U),a(U,Qe),a(U,xa),a(xa,Je),a(U,Xe),a(p,Ye),a(p,Ze),a(p,at),a(p,T),a(T,st),a(T,Da),a(Da,et),a(T,tt),a(T,Ca),a(Ca,nt),a(T,ot),a(p,lt),a(p,R),a(R,Pa),Pa.innerHTML=Co,a(R,ct),a(R,Q),a(Q,J),a(J,Ra),a(Ra,qs),a(J,pt),a(J,Ha),Ha.innerHTML=Po,a(Q,rt),a(Q,X),a(X,ut),a(X,Oa),a(Oa,it),a(X,dt),a(R,kt),a(R,Aa),Aa.innerHTML=Ro,a(p,vt),a(p,Y),a(Y,ht),a(Y,ya),a(ya,Wa),a(Wa,mt),a(Y,ft),a(p,bt),a(p,H),a(H,Ta),Ta.innerHTML=Ho,a(H,Et),a(H,Z),a(Z,aa),a(aa,La),a(La,js),a(aa,wt),a(aa,Fa),Fa.innerHTML=Oo,a(Z,_t),a(Z,L),a(L,gt),a(L,Sa),a(Sa,Na),a(Na,Mt),a(L,zt),a(L,$a),a($a,xt),a(L,Dt),a(H,Ct),a(H,Ba),Ba.innerHTML=Ao,a(p,Pt),a(p,sa),a(sa,Rt),a(sa,Ia),a(Ia,qa),a(qa,Ht),a(sa,Ot),a(p,At),a(p,O),a(O,ja),ja.innerHTML=yo,a(O,yt),a(O,ea),a(ea,ta),a(ta,Va),a(Va,Vs),a(ta,Wt),a(ta,Ga),Ga.innerHTML=Wo,a(ea,Tt),a(ea,F),a(F,Lt),a(F,Ka),a(Ka,Ua),a(Ua,Ft),a(F,St),a(F,Qa),a(Qa,Ja),a(Ja,Nt),a(F,$t),a(O,Bt),a(O,Xa),Xa.innerHTML=To,a(p,It),a(p,na),a(na,qt),a(na,Ya),a(Ya,Za),a(Za,jt),a(na,Vt),a(p,Gt),a(p,as),as.innerHTML=Lo,a(p,Kt),a(p,m),a(m,oa),a(oa,la),a(la,ss),a(ss,Gs),a(la,Ut),a(la,es),es.innerHTML=Fo,a(oa,Qt),a(oa,S),a(S,Jt),a(S,ts),a(ts,ns),a(ns,Xt),a(S,Yt),a(S,os),a(os,Zt),a(S,an),a(m,sn),a(m,ls),ls.innerHTML=So,a(m,en),a(m,$),a($,tn),a($,cs),a(cs,nn),a($,on),a($,ps),a(ps,ln),a($,cn),a(m,pn),a(m,rs),rs.innerHTML=No,a(m,rn),a(m,ia),a(ia,un),a(ia,us),a(us,dn),a(ia,kn),a(m,vn),a(m,is),is.innerHTML=$o,a(m,hn),a(m,Ls),a(Ls,mn),a(m,fn),a(m,ds),ds.innerHTML=Bo,a(p,bn),a(p,En),a(p,wn),a(p,ca),a(ca,ks),a(ks,_n),a(ks,vs),a(vs,gn),a(ca,Mn),a(ca,Fs),a(Fs,hs),a(hs,zn),xn||(Pn=kl(D,"click",d[13]),xn=!0)},p(v,[r]){r&1&&Hs!==(Hs=v[0].get("a")+"")&&Ps(Bs,Hs),r&1&&g(C,"--hue",v[12](v[0].get("a")),!1),r&2&&Os!==(Os=v[1].get("a")+"")&&Ps(Is,Os),r&2&&g(P,"--hue",v[12](v[1].get("a")),!1),r&8&&As!==(As=v[3].value.get("a")+"")&&Ps(qs,As),r&8&&g(R,"--hue",v[12](v[3].value.get("a")),!1),r&16&&ys!==(ys=v[4].value.get("a")+"")&&Ps(js,ys),r&16&&g(H,"--hue",v[12](v[4].value.get("a")),!1),r&32&&Ws!==(Ws=v[5].value.get("a")+"")&&Ps(Vs,Ws),r&32&&g(O,"--hue",v[12](v[5].value.get("a")),!1),r&4&&Ts!==(Ts=v[2].value.get("a")+"")&&Ps(Gs,Ts),r&4&&g(m,"--hue",v[12](v[2].value.get("a")),!1)},i:Eo,o:Eo,d(v){v&&t(p),xn=!1,Pn()}}}function Nl(d,p,h){let b,E,z,x,w,A;const M=[["a",1]],B=me(new Map(M));Rs(d,B,k=>h(0,b=k));const pa=me(new Map(M));Rs(d,pa,k=>h(1,E=k));const N=vl(B,k=>({value:k}));Rs(d,N,k=>h(3,x=k));const ra=wo(new Map(M));Rs(d,ra,k=>h(4,w=k));const ua=ml(new Map(M));Rs(d,ua,k=>h(5,A=k));const D=wo(new Map(M));return Rs(d,D,k=>h(2,z=k)),[b,E,z,x,w,A,B,pa,N,ra,ua,D,k=>k*37+"",()=>{b.set("a",b.get("a")+1),B.set(b),E.set("a",E.get("a")+1),hl(pa,E=new Map(E),E),ra.update(k=>{k.set("a",k.get("a")+1)}),ua.update(k=>{k.set("a",k.get("a")+1)}),z.value.set("a",z.value.get("a")+1),D.update()}]}class Bl extends rl{constructor(p){super();ul(this,p,Nl,Sl,il,{})}}export{Bl as default};
