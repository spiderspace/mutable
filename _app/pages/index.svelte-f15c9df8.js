import{C as ms,S as Jt,i as zt,n as Vt,e as s,t as o,j as d,c as e,a as n,g as l,d as t,m as f,b as u,K as g,f as Xt,F as a,L as Yt,s as $a,J as Ht,M as Ba,N as Zt,O as an}from"../chunks/vendor-7ffe92ef.js";const Tt=r=>{const{subscribe:p,set:v}=ms({value:r});return{subscribe:p,update:h=>{if(h){const m=h(r);m!==void 0&&m!==r&&(r=m)}v({value:r})},set:h=>{r=h,v({value:r})}}},sn=r=>{let p=!1;const v={value:r},h={value:r},{subscribe:m,set:M}=ms(v);return{subscribe:m,update:C=>{if(C){const _=C(r);_!==void 0&&_!==r&&(r=v.value=h.value=_)}M((p=!p)?h:v)},set:C=>{r=v.value=h.value=C,M((p=!p)?h:v)}}},en=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,tn=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,nn='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',on=`mutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,ln=`fastMutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,pn=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,cn=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$mutableMapManual <span class="token operator">=</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">;</span>`,un='$mutableMapManual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',rn='mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>';var L={A:en,B:tn,C:nn,D:on,E:ln,F1:pn,F2:cn,F3:un,F4:rn};function dn(r){let p,v,h,m,M,C,_,Y,w,$,K,T,U,W,O,za,Va,i,Es,Z,_s,ws,gs,y,x,aa,qa=r[0].get("a")+"",Xa,Ms,sa,Cs,Os,B,Ds,Je="{",Ps,Hs,Ts,ea,yt=L.A+"",ys,q,xs,ta,As,Fs,Ss,A,na,oa,Ia=r[1].get("a")+"",Ya,Ns,Rs,la,xt=L.B+"",Ls,Q,$s,pa,Bs,qs,Is,D,js,ca,Gs,Ks,ua,Us,Ws,Qs,F,ra,ia,ja=r[3].value.get("a")+"",Za,Js,zs,da,At=L.C+"",Vs,I,Xs,fa,Ys,Zs,ae,S,N,ka,Ga=r[4].value.get("a")+"",as,se,va,ee,te,ha,ne,oe,ba,Ft=L.D+"",le,j,pe,ma,ce,ue,re,R,P,Ea,Ka=r[5].value.get("a")+"",ss,ie,_a,de,fe,wa,ke,ve,he,ga,St=L.E+"",be,G,me,Ma,Ee,_e,we,b,H,Ca,Ua=r[2].value.get("a")+"",es,ge,Oa,Me,Ce,Da,Oe,De,Pe,Pa,Nt=L.F1+"",He,J,Te,Ha,ye,xe,Ae,Ta,Rt=L.F2+"",Fe,z,Se,ya,Ne,Re,Le,xa,Lt=L.F3+"",$e,Wa,Be,qe,Aa,$t=L.F4+"",Ie,je,Ge,Fa,Qa,Sa,Ke,Ue,ze;return{c(){p=s("main"),v=s("header"),h=s("h1"),m=s("a"),M=o("mutable"),C=d(),_=s("blockquote"),Y=o("using mutable values in Svelte stores with the "),w=s("code"),$=o("immutable"),K=o(` compiler flag.
			`),T=s("a"),U=o("learn more on GitHub"),W=d(),O=s("button"),za=o("click me to make number++ go up"),Va=d(),i=s("h2"),Es=o("A. "),Z=s("code"),_s=o("writable"),ws=o(" store (broken! D:)"),gs=d(),y=s("section"),x=s("p"),aa=s("span"),Xa=o(qa),Ms=o(`
			\u2190 fails to update as a `),sa=s("code"),Cs=o("writable"),Os=o(" store because "),B=s("code"),Ds=o("immutable="),Ps=o(Je),Hs=o("true}"),Ts=d(),ea=s("pre"),ys=d(),q=s("h2"),xs=o("B. cloned "),ta=s("code"),As=o("writable"),Fs=o(" store"),Ss=d(),A=s("section"),na=s("p"),oa=s("span"),Ya=o(Ia),Ns=o(`
			\u2190 works, but in some cases, causes tremendous garbage and slowness`),Rs=d(),la=s("pre"),Ls=d(),Q=s("blockquote"),$s=o("in the examples below, notice that you need to access "),pa=s("code"),Bs=o(".value"),qs=o(" for reads, unlike above"),Is=d(),D=s("h2"),js=o("C. "),ca=s("code"),Gs=o("derived"),Ks=o(" from "),ua=s("code"),Us=o("writable"),Ws=o(" store"),Qs=d(),F=s("section"),ra=s("p"),ia=s("span"),Za=o(ja),Js=o(`
			\u2190 works with no new libraries, and doesn't clone the map, but now we're juggling two stores, one
			for writes and one for reads, and it creates garbage every change`),zs=d(),da=s("pre"),Vs=d(),I=s("h2"),Xs=o("D. "),fa=s("code"),Ys=o("mutable"),Zs=o(" store"),ae=d(),S=s("section"),N=s("p"),ka=s("span"),as=o(Ga),se=o(`
			\u2190 works because it's a `),va=s("code"),ee=o("mutable"),te=o(` store; doesn't clone the map; however notice that
			you need to access `),ha=s("code"),ne=o(".value"),oe=d(),ba=s("pre"),le=d(),j=s("h2"),pe=o("E. "),ma=s("code"),ce=o("fastMutable"),ue=o(" store"),re=d(),R=s("section"),P=s("p"),Ea=s("span"),ss=o(Ka),ie=o(`
			\u2190 works because it's a `),_a=s("code"),de=o("fastMutable"),fe=o(` store, which compared to
			`),wa=s("code"),ke=o("mutable"),ve=o(` is slightly more efficient because it swaps between two stable object references,
			but it doesn't compose as an immutable value stream`),he=d(),ga=s("pre"),be=d(),G=s("h2"),me=o("F. "),Ma=s("code"),Ee=o("mutable"),_e=o(" store with manual update and set"),we=d(),b=s("section"),H=s("p"),Ca=s("span"),es=o(Ua),ge=o(`
			\u2190 works because it's a `),Oa=s("code"),Me=o("mutable"),Ce=o(` store, but mutates the value directly and then
			manually calls `),Da=s("code"),Oe=o(".update()"),De=o(", which seems like an antipattern"),Pe=d(),Pa=s("pre"),He=d(),J=s("p"),Te=o("an alternative using the store's "),Ha=s("code"),ye=o("set"),xe=o(" method:"),Ae=d(),Ta=s("pre"),Fe=d(),z=s("p"),Se=o("and you can set a new value if you need to, but if this is all you need, prefer a "),ya=s("code"),Ne=o("writable"),Re=o(":"),Le=d(),xa=s("pre"),$e=d(),Wa=s("p"),Be=o("or:"),qe=d(),Aa=s("pre"),Ie=d(),je=s("hr"),Ge=d(),Fa=s("footer"),Qa=s("p"),Sa=s("a"),Ke=o("get the docs and public domain source code on GitHub"),this.h()},l(k){p=e(k,"MAIN",{class:!0});var c=n(p);v=e(c,"HEADER",{});var ts=n(v);h=e(ts,"H1",{class:!0});var Ve=n(h);m=e(Ve,"A",{href:!0});var Xe=n(m);M=l(Xe,"mutable"),Xe.forEach(t),Ve.forEach(t),C=f(ts),_=e(ts,"BLOCKQUOTE",{});var Ja=n(_);Y=l(Ja,"using mutable values in Svelte stores with the "),w=e(Ja,"CODE",{class:!0});var Ye=n(w);$=l(Ye,"immutable"),Ye.forEach(t),K=l(Ja,` compiler flag.
			`),T=e(Ja,"A",{href:!0});var Ze=n(T);U=l(Ze,"learn more on GitHub"),Ze.forEach(t),Ja.forEach(t),ts.forEach(t),W=f(c),O=e(c,"BUTTON",{class:!0});var at=n(O);za=l(at,"click me to make number++ go up"),at.forEach(t),Va=f(c),i=e(c,"H2",{class:!0});var ns=n(i);Es=l(ns,"A. "),Z=e(ns,"CODE",{class:!0});var st=n(Z);_s=l(st,"writable"),st.forEach(t),ws=l(ns," store (broken! D:)"),ns.forEach(t),gs=f(c),y=e(c,"SECTION",{});var os=n(y);x=e(os,"P",{});var Na=n(x);aa=e(Na,"SPAN",{class:!0});var et=n(aa);Xa=l(et,qa),et.forEach(t),Ms=l(Na,`
			\u2190 fails to update as a `),sa=e(Na,"CODE",{class:!0});var tt=n(sa);Cs=l(tt,"writable"),tt.forEach(t),Os=l(Na," store because "),B=e(Na,"CODE",{class:!0});var ls=n(B);Ds=l(ls,"immutable="),Ps=l(ls,Je),Hs=l(ls,"true}"),ls.forEach(t),Na.forEach(t),Ts=f(os),ea=e(os,"PRE",{class:!0});var Bt=n(ea);Bt.forEach(t),os.forEach(t),ys=f(c),q=e(c,"H2",{class:!0});var ps=n(q);xs=l(ps,"B. cloned "),ta=e(ps,"CODE",{class:!0});var nt=n(ta);As=l(nt,"writable"),nt.forEach(t),Fs=l(ps," store"),ps.forEach(t),Ss=f(c),A=e(c,"SECTION",{});var cs=n(A);na=e(cs,"P",{});var We=n(na);oa=e(We,"SPAN",{class:!0});var ot=n(oa);Ya=l(ot,Ia),ot.forEach(t),Ns=l(We,`
			\u2190 works, but in some cases, causes tremendous garbage and slowness`),We.forEach(t),Rs=f(cs),la=e(cs,"PRE",{class:!0});var qt=n(la);qt.forEach(t),cs.forEach(t),Ls=f(c),Q=e(c,"BLOCKQUOTE",{});var us=n(Q);$s=l(us,"in the examples below, notice that you need to access "),pa=e(us,"CODE",{class:!0});var lt=n(pa);Bs=l(lt,".value"),lt.forEach(t),qs=l(us," for reads, unlike above"),us.forEach(t),Is=f(c),D=e(c,"H2",{class:!0});var Ra=n(D);js=l(Ra,"C. "),ca=e(Ra,"CODE",{class:!0});var pt=n(ca);Gs=l(pt,"derived"),pt.forEach(t),Ks=l(Ra," from "),ua=e(Ra,"CODE",{class:!0});var ct=n(ua);Us=l(ct,"writable"),ct.forEach(t),Ws=l(Ra," store"),Ra.forEach(t),Qs=f(c),F=e(c,"SECTION",{});var rs=n(F);ra=e(rs,"P",{});var Qe=n(ra);ia=e(Qe,"SPAN",{class:!0});var ut=n(ia);Za=l(ut,ja),ut.forEach(t),Js=l(Qe,`
			\u2190 works with no new libraries, and doesn't clone the map, but now we're juggling two stores, one
			for writes and one for reads, and it creates garbage every change`),Qe.forEach(t),zs=f(rs),da=e(rs,"PRE",{class:!0});var It=n(da);It.forEach(t),rs.forEach(t),Vs=f(c),I=e(c,"H2",{class:!0});var is=n(I);Xs=l(is,"D. "),fa=e(is,"CODE",{class:!0});var rt=n(fa);Ys=l(rt,"mutable"),rt.forEach(t),Zs=l(is," store"),is.forEach(t),ae=f(c),S=e(c,"SECTION",{});var ds=n(S);N=e(ds,"P",{});var La=n(N);ka=e(La,"SPAN",{class:!0});var it=n(ka);as=l(it,Ga),it.forEach(t),se=l(La,`
			\u2190 works because it's a `),va=e(La,"CODE",{class:!0});var dt=n(va);ee=l(dt,"mutable"),dt.forEach(t),te=l(La,` store; doesn't clone the map; however notice that
			you need to access `),ha=e(La,"CODE",{class:!0});var ft=n(ha);ne=l(ft,".value"),ft.forEach(t),La.forEach(t),oe=f(ds),ba=e(ds,"PRE",{class:!0});var jt=n(ba);jt.forEach(t),ds.forEach(t),le=f(c),j=e(c,"H2",{class:!0});var fs=n(j);pe=l(fs,"E. "),ma=e(fs,"CODE",{class:!0});var kt=n(ma);ce=l(kt,"fastMutable"),kt.forEach(t),ue=l(fs," store"),fs.forEach(t),re=f(c),R=e(c,"SECTION",{});var ks=n(R);P=e(ks,"P",{});var V=n(P);Ea=e(V,"SPAN",{class:!0});var vt=n(Ea);ss=l(vt,Ka),vt.forEach(t),ie=l(V,`
			\u2190 works because it's a `),_a=e(V,"CODE",{class:!0});var ht=n(_a);de=l(ht,"fastMutable"),ht.forEach(t),fe=l(V,` store, which compared to
			`),wa=e(V,"CODE",{class:!0});var bt=n(wa);ke=l(bt,"mutable"),bt.forEach(t),ve=l(V,` is slightly more efficient because it swaps between two stable object references,
			but it doesn't compose as an immutable value stream`),V.forEach(t),he=f(ks),ga=e(ks,"PRE",{class:!0});var Gt=n(ga);Gt.forEach(t),ks.forEach(t),be=f(c),G=e(c,"H2",{class:!0});var vs=n(G);me=l(vs,"F. "),Ma=e(vs,"CODE",{class:!0});var mt=n(Ma);Ee=l(mt,"mutable"),mt.forEach(t),_e=l(vs," store with manual update and set"),vs.forEach(t),we=f(c),b=e(c,"SECTION",{});var E=n(b);H=e(E,"P",{});var X=n(H);Ca=e(X,"SPAN",{class:!0});var Et=n(Ca);es=l(Et,Ua),Et.forEach(t),ge=l(X,`
			\u2190 works because it's a `),Oa=e(X,"CODE",{class:!0});var _t=n(Oa);Me=l(_t,"mutable"),_t.forEach(t),Ce=l(X,` store, but mutates the value directly and then
			manually calls `),Da=e(X,"CODE",{class:!0});var wt=n(Da);Oe=l(wt,".update()"),wt.forEach(t),De=l(X,", which seems like an antipattern"),X.forEach(t),Pe=f(E),Pa=e(E,"PRE",{class:!0});var Kt=n(Pa);Kt.forEach(t),He=f(E),J=e(E,"P",{});var hs=n(J);Te=l(hs,"an alternative using the store's "),Ha=e(hs,"CODE",{class:!0});var gt=n(Ha);ye=l(gt,"set"),gt.forEach(t),xe=l(hs," method:"),hs.forEach(t),Ae=f(E),Ta=e(E,"PRE",{class:!0});var Ut=n(Ta);Ut.forEach(t),Fe=f(E),z=e(E,"P",{});var bs=n(z);Se=l(bs,"and you can set a new value if you need to, but if this is all you need, prefer a "),ya=e(bs,"CODE",{class:!0});var Mt=n(ya);Ne=l(Mt,"writable"),Mt.forEach(t),Re=l(bs,":"),bs.forEach(t),Le=f(E),xa=e(E,"PRE",{class:!0});var Wt=n(xa);Wt.forEach(t),$e=f(E),Wa=e(E,"P",{});var Ct=n(Wa);Be=l(Ct,"or:"),Ct.forEach(t),qe=f(E),Aa=e(E,"PRE",{class:!0});var Qt=n(Aa);Qt.forEach(t),E.forEach(t),Ie=f(c),je=e(c,"HR",{}),Ge=f(c),Fa=e(c,"FOOTER",{class:!0});var Ot=n(Fa);Qa=e(Ot,"P",{});var Dt=n(Qa);Sa=e(Dt,"A",{href:!0});var Pt=n(Sa);Ke=l(Pt,"get the docs and public domain source code on GitHub"),Pt.forEach(t),Dt.forEach(t),Ot.forEach(t),c.forEach(t),this.h()},h(){u(m,"href","https://github.com/spiderspace/mutable"),u(h,"class","svelte-1f2xu67"),u(w,"class","svelte-1f2xu67"),u(T,"href","https://github.com/spiderspace/mutable"),u(O,"class","svelte-1f2xu67"),u(Z,"class","svelte-1f2xu67"),u(i,"class","svelte-1f2xu67"),u(aa,"class","count svelte-1f2xu67"),u(sa,"class","svelte-1f2xu67"),u(B,"class","svelte-1f2xu67"),u(ea,"class","panel-inset svelte-1f2xu67"),g(y,"--hue",r[12](r[0].get("a")),!1),u(ta,"class","svelte-1f2xu67"),u(q,"class","svelte-1f2xu67"),u(oa,"class","count svelte-1f2xu67"),u(la,"class","panel-inset svelte-1f2xu67"),g(A,"--hue",r[12](r[1].get("a")),!1),u(pa,"class","svelte-1f2xu67"),u(ca,"class","svelte-1f2xu67"),u(ua,"class","svelte-1f2xu67"),u(D,"class","svelte-1f2xu67"),u(ia,"class","count svelte-1f2xu67"),u(da,"class","panel-inset svelte-1f2xu67"),g(F,"--hue",r[12](r[3].value.get("a")),!1),u(fa,"class","svelte-1f2xu67"),u(I,"class","svelte-1f2xu67"),u(ka,"class","count svelte-1f2xu67"),u(va,"class","svelte-1f2xu67"),u(ha,"class","svelte-1f2xu67"),u(ba,"class","panel-inset svelte-1f2xu67"),g(S,"--hue",r[12](r[4].value.get("a")),!1),u(ma,"class","svelte-1f2xu67"),u(j,"class","svelte-1f2xu67"),u(Ea,"class","count svelte-1f2xu67"),u(_a,"class","svelte-1f2xu67"),u(wa,"class","svelte-1f2xu67"),u(ga,"class","panel-inset svelte-1f2xu67"),g(R,"--hue",r[12](r[5].value.get("a")),!1),u(Ma,"class","svelte-1f2xu67"),u(G,"class","svelte-1f2xu67"),u(Ca,"class","count svelte-1f2xu67"),u(Oa,"class","svelte-1f2xu67"),u(Da,"class","svelte-1f2xu67"),u(Pa,"class","panel-inset svelte-1f2xu67"),u(Ha,"class","svelte-1f2xu67"),u(Ta,"class","panel-inset svelte-1f2xu67"),u(ya,"class","svelte-1f2xu67"),u(xa,"class","panel-inset svelte-1f2xu67"),u(Aa,"class","panel-inset svelte-1f2xu67"),g(b,"--hue",r[12](r[2].value.get("a")),!1),u(Sa,"href","https://github.com/spiderspace/mutable"),u(Fa,"class","svelte-1f2xu67"),u(p,"class","markup column svelte-1f2xu67")},m(k,c){Xt(k,p,c),a(p,v),a(v,h),a(h,m),a(m,M),a(v,C),a(v,_),a(_,Y),a(_,w),a(w,$),a(_,K),a(_,T),a(T,U),a(p,W),a(p,O),a(O,za),a(p,Va),a(p,i),a(i,Es),a(i,Z),a(Z,_s),a(i,ws),a(p,gs),a(p,y),a(y,x),a(x,aa),a(aa,Xa),a(x,Ms),a(x,sa),a(sa,Cs),a(x,Os),a(x,B),a(B,Ds),a(B,Ps),a(B,Hs),a(y,Ts),a(y,ea),ea.innerHTML=yt,a(p,ys),a(p,q),a(q,xs),a(q,ta),a(ta,As),a(q,Fs),a(p,Ss),a(p,A),a(A,na),a(na,oa),a(oa,Ya),a(na,Ns),a(A,Rs),a(A,la),la.innerHTML=xt,a(p,Ls),a(p,Q),a(Q,$s),a(Q,pa),a(pa,Bs),a(Q,qs),a(p,Is),a(p,D),a(D,js),a(D,ca),a(ca,Gs),a(D,Ks),a(D,ua),a(ua,Us),a(D,Ws),a(p,Qs),a(p,F),a(F,ra),a(ra,ia),a(ia,Za),a(ra,Js),a(F,zs),a(F,da),da.innerHTML=At,a(p,Vs),a(p,I),a(I,Xs),a(I,fa),a(fa,Ys),a(I,Zs),a(p,ae),a(p,S),a(S,N),a(N,ka),a(ka,as),a(N,se),a(N,va),a(va,ee),a(N,te),a(N,ha),a(ha,ne),a(S,oe),a(S,ba),ba.innerHTML=Ft,a(p,le),a(p,j),a(j,pe),a(j,ma),a(ma,ce),a(j,ue),a(p,re),a(p,R),a(R,P),a(P,Ea),a(Ea,ss),a(P,ie),a(P,_a),a(_a,de),a(P,fe),a(P,wa),a(wa,ke),a(P,ve),a(R,he),a(R,ga),ga.innerHTML=St,a(p,be),a(p,G),a(G,me),a(G,Ma),a(Ma,Ee),a(G,_e),a(p,we),a(p,b),a(b,H),a(H,Ca),a(Ca,es),a(H,ge),a(H,Oa),a(Oa,Me),a(H,Ce),a(H,Da),a(Da,Oe),a(H,De),a(b,Pe),a(b,Pa),Pa.innerHTML=Nt,a(b,He),a(b,J),a(J,Te),a(J,Ha),a(Ha,ye),a(J,xe),a(b,Ae),a(b,Ta),Ta.innerHTML=Rt,a(b,Fe),a(b,z),a(z,Se),a(z,ya),a(ya,Ne),a(z,Re),a(b,Le),a(b,xa),xa.innerHTML=Lt,a(b,$e),a(b,Wa),a(Wa,Be),a(b,qe),a(b,Aa),Aa.innerHTML=$t,a(p,Ie),a(p,je),a(p,Ge),a(p,Fa),a(Fa,Qa),a(Qa,Sa),a(Sa,Ke),Ue||(ze=Yt(O,"click",r[13]),Ue=!0)},p(k,[c]){c&1&&qa!==(qa=k[0].get("a")+"")&&$a(Xa,qa),c&1&&g(y,"--hue",k[12](k[0].get("a")),!1),c&2&&Ia!==(Ia=k[1].get("a")+"")&&$a(Ya,Ia),c&2&&g(A,"--hue",k[12](k[1].get("a")),!1),c&8&&ja!==(ja=k[3].value.get("a")+"")&&$a(Za,ja),c&8&&g(F,"--hue",k[12](k[3].value.get("a")),!1),c&16&&Ga!==(Ga=k[4].value.get("a")+"")&&$a(as,Ga),c&16&&g(S,"--hue",k[12](k[4].value.get("a")),!1),c&32&&Ka!==(Ka=k[5].value.get("a")+"")&&$a(ss,Ka),c&32&&g(R,"--hue",k[12](k[5].value.get("a")),!1),c&4&&Ua!==(Ua=k[2].value.get("a")+"")&&$a(es,Ua),c&4&&g(b,"--hue",k[12](k[2].value.get("a")),!1)},i:Ht,o:Ht,d(k){k&&t(p),Ue=!1,ze()}}}function fn(r,p,v){let h,m,M,C,_,Y;const w=[["a",1]],$=ms(new Map(w));Ba(r,$,i=>v(0,h=i));const K=ms(new Map(w));Ba(r,K,i=>v(1,m=i));const T=Zt($,i=>({value:i}));Ba(r,T,i=>v(3,C=i));const U=Tt(new Map(w));Ba(r,U,i=>v(4,_=i));const W=sn(new Map(w));Ba(r,W,i=>v(5,Y=i));const O=Tt(new Map(w));return Ba(r,O,i=>v(2,M=i)),[h,m,M,C,_,Y,$,K,T,U,W,O,i=>i*37+"",()=>{h.set("a",h.get("a")+1),$.set(h),m.set("a",m.get("a")+1),an(K,m=new Map(m),m),U.update(i=>{i.set("a",i.get("a")+1)}),W.update(i=>{i.set("a",i.get("a")+1)}),M.value.set("a",M.value.get("a")+1),O.update()}]}class vn extends Jt{constructor(p){super();zt(this,p,fn,dn,Vt,{})}}export{vn as default};
