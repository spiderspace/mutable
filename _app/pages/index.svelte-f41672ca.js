import{C as At,S as kl,i as Al,n as Il,e as s,t,j as i,c as l,a as r,g as a,d as o,m as v,b as u,K as M,f as $l,F as e,L as Sl,s as Ke,J as Ol,M as Qe,N as Hl,O as yl}from"../chunks/vendor-7ffe92ef.js";const Dl=d=>{const{subscribe:n,set:b}=At({value:d});return{subscribe:n,update:f=>{if(f){const m=f(d);m!==void 0&&m!==d&&(d=m)}b({value:d})},set:f=>{d=f,b({value:d})}}},Nl=d=>{let n=!1;const b={value:d},f={value:d},{subscribe:m,set:j}=At(b);return{subscribe:m,update:C=>{if(C){const E=C(d);E!==void 0&&E!==d&&(d=b.value=f.value=E)}j((n=!n)?f:b)},set:C=>{d=b.value=f.value=C,j((n=!n)?f:b)}}};function Pl(d){let n,b,f,m,j,C,E,ae,g,W,X,I,Y,Z,O,st,lt,h,It,se,$t,St,Ht,$,S,le,Je=d[0].get("a")+"",ot,yt,oe,Nt,Pt,B,Tt,ys="{",Rt,Lt,qt,re,Vt,Wt,F,Bt,ne,Ft,Gt,Ut,H,ce,ue,ze=d[1].get("a")+"",rt,Kt,Qt,de,Jt,zt,x,Xt,ie,Yt,Zt,xt,D,ea,ve,ta,aa,he,sa,la,oa,y,pe,be,Xe=d[3].value.get("a")+"",nt,ra,na,G,ca,Ns="{",ua,da,ia,U,va,fe,ha,pa,ba,N,P,me,Ye=d[4].value.get("a")+"",ct,fa,Ee,ma,Ea,_e,_a,ga,K,wa,Ps="{",Ma,ja,Ca,Q,Oa,ge,Da,ka,Aa,T,k,we,Ze=d[2].value.get("a")+"",ut,Ia,Me,$a,Sa,je,Ha,ya,Na,Ce,Pa,Ta,J,Ra,Oe,La,qa,Va,R,A,De,xe=d[5].value.get("a")+"",dt,Wa,ke,Ba,Fa,Ae,Ga,Ua,Ka,z,Qa,Ts="{",Ja,za,Xa,Ya,Za,Ie,xa,es,_,$e,ts,Se,as,ss,et,ls,os,tt,rs,ns,L,cs,He,us,ds,ye,is,vs,hs,q,ps,Ne,bs,fs,Pe,ms,Es,_s,V,gs,Te,ws,Ms,Re,js,Cs,Os,Ds,ks,Le,qe,As,Is,Rs;return{c(){n=s("main"),b=s("header"),f=s("h1"),m=s("a"),j=t("svelte-mutable"),C=i(),E=s("blockquote"),ae=t("using mutable values in Svelte stores with the "),g=s("code"),W=t("immutable"),X=t(` compiler flag.
			`),I=s("a"),Y=t("learn more on GitHub"),Z=i(),O=s("button"),st=t("click me to make number++ go up"),lt=i(),h=s("h2"),It=t("A. "),se=s("code"),$t=t("writable"),St=t(" store (broken! D:)"),Ht=i(),$=s("section"),S=s("div"),le=s("span"),ot=t(Je),yt=t(`
			\u2190 fails to update as a `),oe=s("code"),Nt=t("writable"),Pt=t(" store because "),B=s("code"),Tt=t("immutable="),Rt=t(ys),Lt=t("true}"),qt=i(),re=s("pre"),Vt=t(`$writableMap.set('a', $writableMap.get('a') + 1);
$writableMap = $writableMap;`),Wt=i(),F=s("h2"),Bt=t("B. cloned "),ne=s("code"),Ft=t("writable"),Gt=t(" store"),Ut=i(),H=s("section"),ce=s("div"),ue=s("span"),rt=t(ze),Kt=t(`
			\u2190 works, but causes heart pain and in some cases tremendous garbage and slowness`),Qt=i(),de=s("pre"),Jt=t(`$writableMapCloned.set('a', $writableMapCloned.get('a') + 1);
$writableMapCloned = new Map($writableMapCloned);`),zt=i(),x=s("blockquote"),Xt=t("in the examples below, notice that you need to access "),ie=s("code"),Yt=t(".value"),Zt=t(" for reads, unlike above"),xt=i(),D=s("h2"),ea=t("C. "),ve=s("code"),ta=t("derived"),aa=t(" from "),he=s("code"),sa=t("writable"),la=t(" store"),oa=i(),y=s("section"),pe=s("div"),be=s("span"),nt=t(Xe),ra=t(`
			\u2190 works with no new libraries, and doesn't clone the map, but we're juggling two stores, one for
			writes and one for reads, and it creates garbage every change`),na=i(),G=s("pre"),ca=t("const derivedWritableMap = derived(writableMap, ($v) => ("),ua=t(Ns),da=t("value: $v}));"),ia=i(),U=s("h2"),va=t("D. "),fe=s("code"),ha=t("mutable"),pa=t(" store"),ba=i(),N=s("section"),P=s("div"),me=s("span"),ct=t(Ye),fa=t(`
			\u2190 works because it's a `),Ee=s("code"),ma=t("mutable"),Ea=t(` store; doesn't clone the map; however notice that
			you need to access `),_e=s("code"),_a=t(".value"),ga=i(),K=s("pre"),wa=t("mutableMap.update(($v) => "),Ma=t(Ps),ja=t(`
	$v.set('a', $v.get('a') + 1);
});`),Ca=i(),Q=s("h2"),Oa=t("E. "),ge=s("code"),Da=t("mutable"),ka=t(" store antipattern"),Aa=i(),T=s("section"),k=s("div"),we=s("span"),ut=t(Ze),Ia=t(`
			\u2190 works because it's a `),Me=s("code"),$a=t("mutable"),Sa=t(` store, but mutates the value directly and then
			manually calls `),je=s("code"),Ha=t(".update()"),ya=t(", which seems like an antipattern"),Na=i(),Ce=s("pre"),Pa=t(`$mutableMapAntipattern.value.set('a', $mutableMapAntipattern.value.get('a') + 1);
mutableMapAntipattern.update();`),Ta=i(),J=s("h2"),Ra=t("F. "),Oe=s("code"),La=t("fastMutable"),qa=t(" store"),Va=i(),R=s("section"),A=s("div"),De=s("span"),dt=t(xe),Wa=t(`
			\u2190 works because it's a `),ke=s("code"),Ba=t("fastMutable"),Fa=t(` store, which compared to
			`),Ae=s("code"),Ga=t("mutable"),Ua=t(` is slightly more efficient because it swaps between two stable object references,
			but it doesn't compose as an immutable value stream`),Ka=i(),z=s("pre"),Qa=t("fastMutableMap.update(($v) => "),Ja=t(Ts),za=t(`
	$v.set('a', $v.get('a') + 1);
});`),Xa=i(),Ya=s("hr"),Za=i(),Ie=s("h2"),xa=t("notes:"),es=i(),_=s("ul"),$e=s("li"),ts=t("Why care about the immutable option? See this example: "),Se=s("a"),as=t("https://svelte.dev/examples/immutable-data"),ss=i(),et=s("li"),ls=t(`The usecases motivating these stores: large maps and other collections (often containing
			stores) for complex client-side indexing.`),os=i(),tt=s("li"),rs=t(`Can we solve this problem with a better pattern than these custom stores? Am I missing
			something?`),ns=i(),L=s("li"),cs=t("Is "),He=s("code"),us=t("fastMutable"),ds=t(`'s strategy of swapping between two stable references a dangerous
			footgun? It doesn't compose with code that expects every change to be referentially unique.
			Should the `),ye=s("code"),is=t("mutable"),vs=t(" implementation be preferred in all cases?"),hs=i(),q=s("li"),ps=t("Are there bettes names than "),Ne=s("code"),bs=t("mutable"),fs=t(" and "),Pe=s("code"),ms=t("fastMutable"),Es=t("?"),_s=i(),V=s("li"),gs=t("Add a "),Te=s("code"),ws=t("set"),Ms=t(" store method? Probably useful for "),Re=s("code"),js=t("bind:"),Cs=t(" usage in some cases\n			and less code than `update` to replace references."),Os=i(),Ds=s("hr"),ks=i(),Le=s("footer"),qe=s("a"),As=t("public domain source code on GitHub"),this.h()},l(p){n=l(p,"MAIN",{class:!0});var c=r(n);b=l(c,"HEADER",{});var it=r(b);f=l(it,"H1",{class:!0});var Ls=r(f);m=l(Ls,"A",{href:!0});var qs=r(m);j=a(qs,"svelte-mutable"),qs.forEach(o),Ls.forEach(o),C=v(it),E=l(it,"BLOCKQUOTE",{});var at=r(E);ae=a(at,"using mutable values in Svelte stores with the "),g=l(at,"CODE",{class:!0});var Vs=r(g);W=a(Vs,"immutable"),Vs.forEach(o),X=a(at,` compiler flag.
			`),I=l(at,"A",{href:!0});var Ws=r(I);Y=a(Ws,"learn more on GitHub"),Ws.forEach(o),at.forEach(o),it.forEach(o),Z=v(c),O=l(c,"BUTTON",{class:!0});var Bs=r(O);st=a(Bs,"click me to make number++ go up"),Bs.forEach(o),lt=v(c),h=l(c,"H2",{class:!0});var vt=r(h);It=a(vt,"A. "),se=l(vt,"CODE",{class:!0});var Fs=r(se);$t=a(Fs,"writable"),Fs.forEach(o),St=a(vt," store (broken! D:)"),vt.forEach(o),Ht=v(c),$=l(c,"SECTION",{});var ht=r($);S=l(ht,"DIV",{});var Ve=r(S);le=l(Ve,"SPAN",{class:!0});var Gs=r(le);ot=a(Gs,Je),Gs.forEach(o),yt=a(Ve,`
			\u2190 fails to update as a `),oe=l(Ve,"CODE",{class:!0});var Us=r(oe);Nt=a(Us,"writable"),Us.forEach(o),Pt=a(Ve," store because "),B=l(Ve,"CODE",{class:!0});var pt=r(B);Tt=a(pt,"immutable="),Rt=a(pt,ys),Lt=a(pt,"true}"),pt.forEach(o),Ve.forEach(o),qt=v(ht),re=l(ht,"PRE",{class:!0});var Ks=r(re);Vt=a(Ks,`$writableMap.set('a', $writableMap.get('a') + 1);
$writableMap = $writableMap;`),Ks.forEach(o),ht.forEach(o),Wt=v(c),F=l(c,"H2",{class:!0});var bt=r(F);Bt=a(bt,"B. cloned "),ne=l(bt,"CODE",{class:!0});var Qs=r(ne);Ft=a(Qs,"writable"),Qs.forEach(o),Gt=a(bt," store"),bt.forEach(o),Ut=v(c),H=l(c,"SECTION",{});var ft=r(H);ce=l(ft,"DIV",{});var $s=r(ce);ue=l($s,"SPAN",{class:!0});var Js=r(ue);rt=a(Js,ze),Js.forEach(o),Kt=a($s,`
			\u2190 works, but causes heart pain and in some cases tremendous garbage and slowness`),$s.forEach(o),Qt=v(ft),de=l(ft,"PRE",{class:!0});var zs=r(de);Jt=a(zs,`$writableMapCloned.set('a', $writableMapCloned.get('a') + 1);
$writableMapCloned = new Map($writableMapCloned);`),zs.forEach(o),ft.forEach(o),zt=v(c),x=l(c,"BLOCKQUOTE",{});var mt=r(x);Xt=a(mt,"in the examples below, notice that you need to access "),ie=l(mt,"CODE",{class:!0});var Xs=r(ie);Yt=a(Xs,".value"),Xs.forEach(o),Zt=a(mt," for reads, unlike above"),mt.forEach(o),xt=v(c),D=l(c,"H2",{class:!0});var We=r(D);ea=a(We,"C. "),ve=l(We,"CODE",{class:!0});var Ys=r(ve);ta=a(Ys,"derived"),Ys.forEach(o),aa=a(We," from "),he=l(We,"CODE",{class:!0});var Zs=r(he);sa=a(Zs,"writable"),Zs.forEach(o),la=a(We," store"),We.forEach(o),oa=v(c),y=l(c,"SECTION",{});var Et=r(y);pe=l(Et,"DIV",{});var Ss=r(pe);be=l(Ss,"SPAN",{class:!0});var xs=r(be);nt=a(xs,Xe),xs.forEach(o),ra=a(Ss,`
			\u2190 works with no new libraries, and doesn't clone the map, but we're juggling two stores, one for
			writes and one for reads, and it creates garbage every change`),Ss.forEach(o),na=v(Et),G=l(Et,"PRE",{class:!0});var _t=r(G);ca=a(_t,"const derivedWritableMap = derived(writableMap, ($v) => ("),ua=a(_t,Ns),da=a(_t,"value: $v}));"),_t.forEach(o),Et.forEach(o),ia=v(c),U=l(c,"H2",{class:!0});var gt=r(U);va=a(gt,"D. "),fe=l(gt,"CODE",{class:!0});var el=r(fe);ha=a(el,"mutable"),el.forEach(o),pa=a(gt," store"),gt.forEach(o),ba=v(c),N=l(c,"SECTION",{});var wt=r(N);P=l(wt,"DIV",{});var Be=r(P);me=l(Be,"SPAN",{class:!0});var tl=r(me);ct=a(tl,Ye),tl.forEach(o),fa=a(Be,`
			\u2190 works because it's a `),Ee=l(Be,"CODE",{class:!0});var al=r(Ee);ma=a(al,"mutable"),al.forEach(o),Ea=a(Be,` store; doesn't clone the map; however notice that
			you need to access `),_e=l(Be,"CODE",{class:!0});var sl=r(_e);_a=a(sl,".value"),sl.forEach(o),Be.forEach(o),ga=v(wt),K=l(wt,"PRE",{class:!0});var Mt=r(K);wa=a(Mt,"mutableMap.update(($v) => "),Ma=a(Mt,Ps),ja=a(Mt,`
	$v.set('a', $v.get('a') + 1);
});`),Mt.forEach(o),wt.forEach(o),Ca=v(c),Q=l(c,"H2",{class:!0});var jt=r(Q);Oa=a(jt,"E. "),ge=l(jt,"CODE",{class:!0});var ll=r(ge);Da=a(ll,"mutable"),ll.forEach(o),ka=a(jt," store antipattern"),jt.forEach(o),Aa=v(c),T=l(c,"SECTION",{});var Ct=r(T);k=l(Ct,"DIV",{});var ee=r(k);we=l(ee,"SPAN",{class:!0});var ol=r(we);ut=a(ol,Ze),ol.forEach(o),Ia=a(ee,`
			\u2190 works because it's a `),Me=l(ee,"CODE",{class:!0});var rl=r(Me);$a=a(rl,"mutable"),rl.forEach(o),Sa=a(ee,` store, but mutates the value directly and then
			manually calls `),je=l(ee,"CODE",{class:!0});var nl=r(je);Ha=a(nl,".update()"),nl.forEach(o),ya=a(ee,", which seems like an antipattern"),ee.forEach(o),Na=v(Ct),Ce=l(Ct,"PRE",{class:!0});var cl=r(Ce);Pa=a(cl,`$mutableMapAntipattern.value.set('a', $mutableMapAntipattern.value.get('a') + 1);
mutableMapAntipattern.update();`),cl.forEach(o),Ct.forEach(o),Ta=v(c),J=l(c,"H2",{class:!0});var Ot=r(J);Ra=a(Ot,"F. "),Oe=l(Ot,"CODE",{class:!0});var ul=r(Oe);La=a(ul,"fastMutable"),ul.forEach(o),qa=a(Ot," store"),Ot.forEach(o),Va=v(c),R=l(c,"SECTION",{});var Dt=r(R);A=l(Dt,"DIV",{});var te=r(A);De=l(te,"SPAN",{class:!0});var dl=r(De);dt=a(dl,xe),dl.forEach(o),Wa=a(te,`
			\u2190 works because it's a `),ke=l(te,"CODE",{class:!0});var il=r(ke);Ba=a(il,"fastMutable"),il.forEach(o),Fa=a(te,` store, which compared to
			`),Ae=l(te,"CODE",{class:!0});var vl=r(Ae);Ga=a(vl,"mutable"),vl.forEach(o),Ua=a(te,` is slightly more efficient because it swaps between two stable object references,
			but it doesn't compose as an immutable value stream`),te.forEach(o),Ka=v(Dt),z=l(Dt,"PRE",{class:!0});var kt=r(z);Qa=a(kt,"fastMutableMap.update(($v) => "),Ja=a(kt,Ts),za=a(kt,`
	$v.set('a', $v.get('a') + 1);
});`),kt.forEach(o),Dt.forEach(o),Xa=v(c),Ya=l(c,"HR",{}),Za=v(c),Ie=l(c,"H2",{class:!0});var hl=r(Ie);xa=a(hl,"notes:"),hl.forEach(o),es=v(c),_=l(c,"UL",{});var w=r(_);$e=l(w,"LI",{});var Hs=r($e);ts=a(Hs,"Why care about the immutable option? See this example: "),Se=l(Hs,"A",{href:!0});var pl=r(Se);as=a(pl,"https://svelte.dev/examples/immutable-data"),pl.forEach(o),Hs.forEach(o),ss=v(w),et=l(w,"LI",{});var bl=r(et);ls=a(bl,`The usecases motivating these stores: large maps and other collections (often containing
			stores) for complex client-side indexing.`),bl.forEach(o),os=v(w),tt=l(w,"LI",{});var fl=r(tt);rs=a(fl,`Can we solve this problem with a better pattern than these custom stores? Am I missing
			something?`),fl.forEach(o),ns=v(w),L=l(w,"LI",{});var Fe=r(L);cs=a(Fe,"Is "),He=l(Fe,"CODE",{class:!0});var ml=r(He);us=a(ml,"fastMutable"),ml.forEach(o),ds=a(Fe,`'s strategy of swapping between two stable references a dangerous
			footgun? It doesn't compose with code that expects every change to be referentially unique.
			Should the `),ye=l(Fe,"CODE",{class:!0});var El=r(ye);is=a(El,"mutable"),El.forEach(o),vs=a(Fe," implementation be preferred in all cases?"),Fe.forEach(o),hs=v(w),q=l(w,"LI",{});var Ge=r(q);ps=a(Ge,"Are there bettes names than "),Ne=l(Ge,"CODE",{class:!0});var _l=r(Ne);bs=a(_l,"mutable"),_l.forEach(o),fs=a(Ge," and "),Pe=l(Ge,"CODE",{class:!0});var gl=r(Pe);ms=a(gl,"fastMutable"),gl.forEach(o),Es=a(Ge,"?"),Ge.forEach(o),_s=v(w),V=l(w,"LI",{});var Ue=r(V);gs=a(Ue,"Add a "),Te=l(Ue,"CODE",{class:!0});var wl=r(Te);ws=a(wl,"set"),wl.forEach(o),Ms=a(Ue," store method? Probably useful for "),Re=l(Ue,"CODE",{class:!0});var Ml=r(Re);js=a(Ml,"bind:"),Ml.forEach(o),Cs=a(Ue," usage in some cases\n			and less code than `update` to replace references."),Ue.forEach(o),w.forEach(o),Os=v(c),Ds=l(c,"HR",{}),ks=v(c),Le=l(c,"FOOTER",{class:!0});var jl=r(Le);qe=l(jl,"A",{href:!0});var Cl=r(qe);As=a(Cl,"public domain source code on GitHub"),Cl.forEach(o),jl.forEach(o),c.forEach(o),this.h()},h(){u(m,"href","https://github.com/spiderspace/svelte-mutable"),u(f,"class","svelte-6leo9j"),u(g,"class","svelte-6leo9j"),u(I,"href","https://github.com/spiderspace/svelte-mutable"),u(O,"class","svelte-6leo9j"),u(se,"class","svelte-6leo9j"),u(h,"class","svelte-6leo9j"),u(le,"class","count svelte-6leo9j"),u(oe,"class","svelte-6leo9j"),u(B,"class","svelte-6leo9j"),u(re,"class","panel-inset svelte-6leo9j"),M($,"--hue",d[12](d[0].get("a")),!1),u(ne,"class","svelte-6leo9j"),u(F,"class","svelte-6leo9j"),u(ue,"class","count svelte-6leo9j"),u(de,"class","panel-inset svelte-6leo9j"),M(H,"--hue",d[12](d[1].get("a")),!1),u(ie,"class","svelte-6leo9j"),u(ve,"class","svelte-6leo9j"),u(he,"class","svelte-6leo9j"),u(D,"class","svelte-6leo9j"),u(be,"class","count svelte-6leo9j"),u(G,"class","panel-inset svelte-6leo9j"),M(y,"--hue",d[12](d[3].value.get("a")),!1),u(fe,"class","svelte-6leo9j"),u(U,"class","svelte-6leo9j"),u(me,"class","count svelte-6leo9j"),u(Ee,"class","svelte-6leo9j"),u(_e,"class","svelte-6leo9j"),u(K,"class","panel-inset svelte-6leo9j"),M(N,"--hue",d[12](d[4].value.get("a")),!1),u(ge,"class","svelte-6leo9j"),u(Q,"class","svelte-6leo9j"),u(we,"class","count svelte-6leo9j"),u(Me,"class","svelte-6leo9j"),u(je,"class","svelte-6leo9j"),u(Ce,"class","panel-inset svelte-6leo9j"),M(T,"--hue",d[12](d[2].value.get("a")),!1),u(Oe,"class","svelte-6leo9j"),u(J,"class","svelte-6leo9j"),u(De,"class","count svelte-6leo9j"),u(ke,"class","svelte-6leo9j"),u(Ae,"class","svelte-6leo9j"),u(z,"class","panel-inset svelte-6leo9j"),M(R,"--hue",d[12](d[5].value.get("a")),!1),u(Ie,"class","svelte-6leo9j"),u(Se,"href","https://svelte.dev/examples/immutable-data"),u(He,"class","svelte-6leo9j"),u(ye,"class","svelte-6leo9j"),u(Ne,"class","svelte-6leo9j"),u(Pe,"class","svelte-6leo9j"),u(Te,"class","svelte-6leo9j"),u(Re,"class","svelte-6leo9j"),u(qe,"href","https://github.com/spiderspace/svelte-mutable"),u(Le,"class","svelte-6leo9j"),u(n,"class","markup column svelte-6leo9j")},m(p,c){$l(p,n,c),e(n,b),e(b,f),e(f,m),e(m,j),e(b,C),e(b,E),e(E,ae),e(E,g),e(g,W),e(E,X),e(E,I),e(I,Y),e(n,Z),e(n,O),e(O,st),e(n,lt),e(n,h),e(h,It),e(h,se),e(se,$t),e(h,St),e(n,Ht),e(n,$),e($,S),e(S,le),e(le,ot),e(S,yt),e(S,oe),e(oe,Nt),e(S,Pt),e(S,B),e(B,Tt),e(B,Rt),e(B,Lt),e($,qt),e($,re),e(re,Vt),e(n,Wt),e(n,F),e(F,Bt),e(F,ne),e(ne,Ft),e(F,Gt),e(n,Ut),e(n,H),e(H,ce),e(ce,ue),e(ue,rt),e(ce,Kt),e(H,Qt),e(H,de),e(de,Jt),e(n,zt),e(n,x),e(x,Xt),e(x,ie),e(ie,Yt),e(x,Zt),e(n,xt),e(n,D),e(D,ea),e(D,ve),e(ve,ta),e(D,aa),e(D,he),e(he,sa),e(D,la),e(n,oa),e(n,y),e(y,pe),e(pe,be),e(be,nt),e(pe,ra),e(y,na),e(y,G),e(G,ca),e(G,ua),e(G,da),e(n,ia),e(n,U),e(U,va),e(U,fe),e(fe,ha),e(U,pa),e(n,ba),e(n,N),e(N,P),e(P,me),e(me,ct),e(P,fa),e(P,Ee),e(Ee,ma),e(P,Ea),e(P,_e),e(_e,_a),e(N,ga),e(N,K),e(K,wa),e(K,Ma),e(K,ja),e(n,Ca),e(n,Q),e(Q,Oa),e(Q,ge),e(ge,Da),e(Q,ka),e(n,Aa),e(n,T),e(T,k),e(k,we),e(we,ut),e(k,Ia),e(k,Me),e(Me,$a),e(k,Sa),e(k,je),e(je,Ha),e(k,ya),e(T,Na),e(T,Ce),e(Ce,Pa),e(n,Ta),e(n,J),e(J,Ra),e(J,Oe),e(Oe,La),e(J,qa),e(n,Va),e(n,R),e(R,A),e(A,De),e(De,dt),e(A,Wa),e(A,ke),e(ke,Ba),e(A,Fa),e(A,Ae),e(Ae,Ga),e(A,Ua),e(R,Ka),e(R,z),e(z,Qa),e(z,Ja),e(z,za),e(n,Xa),e(n,Ya),e(n,Za),e(n,Ie),e(Ie,xa),e(n,es),e(n,_),e(_,$e),e($e,ts),e($e,Se),e(Se,as),e(_,ss),e(_,et),e(et,ls),e(_,os),e(_,tt),e(tt,rs),e(_,ns),e(_,L),e(L,cs),e(L,He),e(He,us),e(L,ds),e(L,ye),e(ye,is),e(L,vs),e(_,hs),e(_,q),e(q,ps),e(q,Ne),e(Ne,bs),e(q,fs),e(q,Pe),e(Pe,ms),e(q,Es),e(_,_s),e(_,V),e(V,gs),e(V,Te),e(Te,ws),e(V,Ms),e(V,Re),e(Re,js),e(V,Cs),e(n,Os),e(n,Ds),e(n,ks),e(n,Le),e(Le,qe),e(qe,As),Is||(Rs=Sl(O,"click",d[13]),Is=!0)},p(p,[c]){c&1&&Je!==(Je=p[0].get("a")+"")&&Ke(ot,Je),c&1&&M($,"--hue",p[12](p[0].get("a")),!1),c&2&&ze!==(ze=p[1].get("a")+"")&&Ke(rt,ze),c&2&&M(H,"--hue",p[12](p[1].get("a")),!1),c&8&&Xe!==(Xe=p[3].value.get("a")+"")&&Ke(nt,Xe),c&8&&M(y,"--hue",p[12](p[3].value.get("a")),!1),c&16&&Ye!==(Ye=p[4].value.get("a")+"")&&Ke(ct,Ye),c&16&&M(N,"--hue",p[12](p[4].value.get("a")),!1),c&4&&Ze!==(Ze=p[2].value.get("a")+"")&&Ke(ut,Ze),c&4&&M(T,"--hue",p[12](p[2].value.get("a")),!1),c&32&&xe!==(xe=p[5].value.get("a")+"")&&Ke(dt,xe),c&32&&M(R,"--hue",p[12](p[5].value.get("a")),!1)},i:Ol,o:Ol,d(p){p&&o(n),Is=!1,Rs()}}}function Tl(d,n,b){let f,m,j,C,E,ae;const g=[["a",1]],W=At(new Map(g));Qe(d,W,h=>b(0,f=h));const X=At(new Map(g));Qe(d,X,h=>b(1,m=h));const I=Hl(W,h=>({value:h}));Qe(d,I,h=>b(3,C=h));const Y=Dl(new Map(g));Qe(d,Y,h=>b(4,E=h));const Z=Dl(new Map(g));Qe(d,Z,h=>b(2,j=h));const O=Nl(new Map(g));return Qe(d,O,h=>b(5,ae=h)),[f,m,j,C,E,ae,W,X,I,Y,Z,O,h=>h*37+"",()=>{f.set("a",f.get("a")+1),W.set(f),m.set("a",m.get("a")+1),yl(X,m=new Map(m),m),Y.update(h=>{h.set("a",h.get("a")+1)}),j.value.set("a",j.value.get("a")+1),Z.update(),O.update(h=>{h.set("a",h.get("a")+1)})}]}class Ll extends kl{constructor(n){super();Al(this,n,Tl,Pl,Il,{})}}export{Ll as default};
