import{C as lt,S as qo,i as jo,n as Vo,e as s,t as l,j as r,c as t,a as n,g as p,d as e,m as i,b as o,K as M,f as Go,F as a,L as Ko,s as Es,J as Yn,M as ws,N as Uo,O as Qo}from"../chunks/vendor-7ffe92ef.js";const Zn=d=>{const{subscribe:c,set:v}=lt({value:d});return{subscribe:c,update:b=>{if(b){const E=b(d);E!==void 0&&E!==d&&(d=E)}v({value:d})},set:b=>{d=b,v({value:d})}}},Jo=d=>{let c=!1;const v={value:d},b={value:d},{subscribe:E,set:z}=lt(v);return{subscribe:E,update:D=>{if(D){const _=D(d);_!==void 0&&_!==d&&(d=v.value=b.value=_)}z((c=!c)?b:v)},set:D=>{d=v.value=b.value=D,z((c=!c)?b:v)}}},Xo='<span class="token keyword">const</span> writableMap <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Yo=`$writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Zo=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,xo='<span class="token keyword">const</span> writableMapCloned <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',al=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,sl=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,tl='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',el=`$derivedWritableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,nl=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,ol='<span class="token keyword">const</span> mutableMap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',ll=`$mutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,pl=`mutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,cl='<span class="token keyword">const</span> fastMutableMap <span class="token operator">=</span> <span class="token function">fastMutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',ul=`$fastMutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,rl=`fastMutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,il='<span class="token keyword">const</span> mutableMapManual <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',dl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,kl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,fl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$mutableMapManual <span class="token operator">=</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">;</span>`,vl='$mutableMapManual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',bl='mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>';var m={ADef:Xo,ARead:Yo,AWrite:Zo,BDef:xo,BRead:al,BWrite:sl,CDef:tl,CRead:el,CWrite:nl,DDef:ol,DRead:ll,DWrite:pl,EDef:cl,ERead:ul,EWrite:rl,FDef:il,FRead:dl,F1Write:kl,F2Write:fl,F3Write:vl,F4Write:bl};function hl(d){let c,v,b,E,z,D,_,ra,g,B,la,N,pa,ca,C,Os,ys,k,pt,ia,ct,ut,rt,P,da,xn=m.ADef+"",it,I,q,ka,_s=d[0].get("a")+"",Ws,dt,fa,ao=m.ARead+"",kt,W,ft,va,vt,bt,j,ht,kn="{",mt,Et,wt,_t,ba,so=m.AWrite+"",Mt,V,gt,ha,zt,Dt,Ct,R,ma,to=m.BDef+"",Pt,G,K,Ea,Ms=d[1].get("a")+"",Ts,Rt,wa,eo=m.BRead+"",Ht,T,Ot,_a,yt,Wt,Ma,Tt,At,Lt,ga,no=m.BWrite+"",Ft,St,Nt,U,$t,za,Bt,It,qt,jt,Vt,A,Gt,Da,Kt,Ut,Ca,Qt,Jt,Xt,H,Pa,oo=m.CDef+"",Yt,Q,J,Ra,gs=d[3].value.get("a")+"",As,Zt,Ha,lo=m.CRead+"",xt,X,ae,Oa,se,te,ee,ya,po=m.CWrite+"",ne,Y,oe,Wa,le,pe,ce,O,Ta,co=m.DDef+"",ue,Z,x,Aa,zs=d[4].value.get("a")+"",Ls,re,La,uo=m.DRead+"",ie,L,de,Fa,ke,fe,Sa,ve,be,he,Na,ro=m.DWrite+"",me,aa,Ee,$a,we,_e,Me,y,Ba,io=m.EDef+"",ge,sa,ta,Ia,Ds=d[5].value.get("a")+"",Fs,ze,qa,ko=m.ERead+"",De,F,Ce,ja,Pe,Re,Va,He,Oe,ye,Ga,fo=m.EWrite+"",We,ea,Te,Ka,Ae,Le,Fe,Ua,vo=m.FDef+"",Se,h,na,oa,Qa,Cs=d[2].value.get("a")+"",Ss,Ne,Ja,bo=m.FRead+"",$e,S,Be,Xa,Ie,qe,Ya,je,Ve,Ge,Za,ho=m.F1Write+"",Ke,$,Ue,xa,Qe,Je,as,Xe,Ye,Ze,ss,mo=m.F2Write+"",xe,ua,an,ts,sn,tn,en,es,Eo=m.F3Write+"",nn,Ps,on,ln,ns,wo=m.F4Write+"",pn,cn,un,os,Rs,ls,rn,dn,fn;return{c(){c=s("main"),v=s("header"),b=s("h1"),E=s("a"),z=l("mutable"),D=r(),_=s("blockquote"),ra=l("using mutable values in Svelte stores with the "),g=s("code"),B=l("immutable"),la=l(` compiler flag \u2014
			`),N=s("a"),pa=l("learn more on GitHub"),ca=r(),C=s("button"),Os=l("click me to make number++ go up"),ys=r(),k=s("h2"),pt=l("A. "),ia=s("code"),ct=l("writable"),ut=l(" store (broken! D:)"),rt=r(),P=s("section"),da=s("pre"),it=r(),I=s("div"),q=s("p"),ka=s("span"),Ws=l(_s),dt=r(),fa=s("span"),kt=r(),W=s("p"),ft=l("fails to update as a "),va=s("code"),vt=l("writable"),bt=l(" store because "),j=s("code"),ht=l("immutable="),mt=l(kn),Et=l("true}"),wt=l(` and
				we're mutating the map`),_t=r(),ba=s("pre"),Mt=r(),V=s("h2"),gt=l("B. cloned "),ha=s("code"),zt=l("writable"),Dt=l(" store"),Ct=r(),R=s("section"),ma=s("pre"),Pt=r(),G=s("div"),K=s("p"),Ea=s("span"),Ts=l(Ms),Rt=r(),wa=s("span"),Ht=r(),T=s("p"),Ot=l("works for "),_a=s("code"),yt=l("Map"),Wt=l(`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),Ma=s("code"),Tt=l("WeakMap"),At=l(", one of the motivating usecases for this document"),Lt=r(),ga=s("pre"),Ft=r(),St=s("hr"),Nt=r(),U=s("blockquote"),$t=l("in the examples below, notice that you need to access "),za=s("code"),Bt=l(".value"),It=l(" for reads, unlike above"),qt=r(),jt=s("hr"),Vt=r(),A=s("h2"),Gt=l("C. "),Da=s("code"),Kt=l("derived"),Ut=l(" from "),Ca=s("code"),Qt=l("writable"),Jt=l(" store"),Xt=r(),H=s("section"),Pa=s("pre"),Yt=r(),Q=s("div"),J=s("p"),Ra=s("span"),As=l(gs),Zt=r(),Ha=s("span"),xt=r(),X=s("p"),ae=l(`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; is error prone because reading the `),Oa=s("code"),se=l("writable"),te=l(` isn't
				reactive!`),ee=r(),ya=s("pre"),ne=r(),Y=s("h2"),oe=l("D. "),Wa=s("code"),le=l("mutable"),pe=l(" store"),ce=r(),O=s("section"),Ta=s("pre"),ue=r(),Z=s("div"),x=s("p"),Aa=s("span"),Ls=l(zs),re=r(),La=s("span"),ie=r(),L=s("p"),de=l("works because it's a "),Fa=s("code"),ke=l("mutable"),fe=l(` store; doesn't clone the map; however notice that
				you need to access `),Sa=s("code"),ve=l(".value"),be=l(" on reads"),he=r(),Na=s("pre"),me=r(),aa=s("h2"),Ee=l("E. "),$a=s("code"),we=l("fastMutable"),_e=l(" store"),Me=r(),y=s("section"),Ba=s("pre"),ge=r(),sa=s("div"),ta=s("p"),Ia=s("span"),Fs=l(Ds),ze=r(),qa=s("span"),De=r(),F=s("p"),Ce=l("works because it's a "),ja=s("code"),Pe=l("fastMutable"),Re=l(` store, which compared to
				`),Va=s("code"),He=l("mutable"),Oe=l(` is slightly more efficient because it swaps between two stable object references,
				so there's no extra garbage created, but it doesn't compose as an immutable value stream, so
				it may be a dangerously too-clever design`),ye=r(),Ga=s("pre"),We=r(),ea=s("h2"),Te=l("F. "),Ka=s("code"),Ae=l("mutable"),Le=l(" store with manual update and set"),Fe=r(),Ua=s("pre"),Se=r(),h=s("section"),na=s("div"),oa=s("p"),Qa=s("span"),Ss=l(Cs),Ne=r(),Ja=s("span"),$e=r(),S=s("p"),Be=l("works because it's a "),Xa=s("code"),Ie=l("mutable"),qe=l(` store, but mutates the value directly and then
				manually calls `),Ya=s("code"),je=l(".update()"),Ve=l(", which may be an antipattern"),Ge=r(),Za=s("pre"),Ke=r(),$=s("p"),Ue=l("an alternative using the store's "),xa=s("code"),Qe=l("set"),Je=l(` method, which is extra awkward because of
			the `),as=s("code"),Xe=l(".value"),Ye=l(":"),Ze=r(),ss=s("pre"),xe=r(),ua=s("p"),an=l("and you can set a new value if you need to, but if this is all you need, prefer a "),ts=s("code"),sn=l("writable"),tn=l(":"),en=r(),es=s("pre"),nn=r(),Ps=s("p"),on=l("or:"),ln=r(),ns=s("pre"),pn=r(),cn=s("hr"),un=r(),os=s("footer"),Rs=s("p"),ls=s("a"),rn=l("get the docs and public domain source code on GitHub"),this.h()},l(f){c=t(f,"MAIN",{class:!0});var u=n(c);v=t(u,"HEADER",{});var Ns=n(v);b=t(Ns,"H1",{class:!0});var vn=n(b);E=t(vn,"A",{href:!0});var bn=n(E);z=p(bn,"mutable"),bn.forEach(e),vn.forEach(e),D=i(Ns),_=t(Ns,"BLOCKQUOTE",{});var Hs=n(_);ra=p(Hs,"using mutable values in Svelte stores with the "),g=t(Hs,"CODE",{class:!0});var hn=n(g);B=p(hn,"immutable"),hn.forEach(e),la=p(Hs,` compiler flag \u2014
			`),N=t(Hs,"A",{href:!0});var mn=n(N);pa=p(mn,"learn more on GitHub"),mn.forEach(e),Hs.forEach(e),Ns.forEach(e),ca=i(u),C=t(u,"BUTTON",{class:!0});var En=n(C);Os=p(En,"click me to make number++ go up"),En.forEach(e),ys=i(u),k=t(u,"H2",{class:!0});var $s=n(k);pt=p($s,"A. "),ia=t($s,"CODE",{class:!0});var wn=n(ia);ct=p(wn,"writable"),wn.forEach(e),ut=p($s," store (broken! D:)"),$s.forEach(e),rt=i(u),P=t(u,"SECTION",{});var ps=n(P);da=t(ps,"PRE",{class:!0});var _o=n(da);_o.forEach(e),it=i(ps),I=t(ps,"DIV",{class:!0});var Bs=n(I);q=t(Bs,"P",{class:!0});var Is=n(q);ka=t(Is,"SPAN",{class:!0});var _n=n(ka);Ws=p(_n,_s),_n.forEach(e),dt=i(Is),fa=t(Is,"SPAN",{class:!0});var Mo=n(fa);Mo.forEach(e),Is.forEach(e),kt=i(Bs),W=t(Bs,"P",{class:!0});var cs=n(W);ft=p(cs,"fails to update as a "),va=t(cs,"CODE",{class:!0});var Mn=n(va);vt=p(Mn,"writable"),Mn.forEach(e),bt=p(cs," store because "),j=t(cs,"CODE",{class:!0});var qs=n(j);ht=p(qs,"immutable="),mt=p(qs,kn),Et=p(qs,"true}"),qs.forEach(e),wt=p(cs,` and
				we're mutating the map`),cs.forEach(e),Bs.forEach(e),_t=i(ps),ba=t(ps,"PRE",{class:!0});var go=n(ba);go.forEach(e),ps.forEach(e),Mt=i(u),V=t(u,"H2",{class:!0});var js=n(V);gt=p(js,"B. cloned "),ha=t(js,"CODE",{class:!0});var gn=n(ha);zt=p(gn,"writable"),gn.forEach(e),Dt=p(js," store"),js.forEach(e),Ct=i(u),R=t(u,"SECTION",{});var us=n(R);ma=t(us,"PRE",{class:!0});var zo=n(ma);zo.forEach(e),Pt=i(us),G=t(us,"DIV",{class:!0});var Vs=n(G);K=t(Vs,"P",{class:!0});var Gs=n(K);Ea=t(Gs,"SPAN",{class:!0});var zn=n(Ea);Ts=p(zn,Ms),zn.forEach(e),Rt=i(Gs),wa=t(Gs,"SPAN",{class:!0});var Do=n(wa);Do.forEach(e),Gs.forEach(e),Ht=i(Vs),T=t(Vs,"P",{class:!0});var rs=n(T);Ot=p(rs,"works for "),_a=t(rs,"CODE",{class:!0});var Dn=n(_a);yt=p(Dn,"Map"),Dn.forEach(e),Wt=p(rs,`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),Ma=t(rs,"CODE",{class:!0});var Cn=n(Ma);Tt=p(Cn,"WeakMap"),Cn.forEach(e),At=p(rs,", one of the motivating usecases for this document"),rs.forEach(e),Vs.forEach(e),Lt=i(us),ga=t(us,"PRE",{class:!0});var Co=n(ga);Co.forEach(e),us.forEach(e),Ft=i(u),St=t(u,"HR",{}),Nt=i(u),U=t(u,"BLOCKQUOTE",{style:!0});var Ks=n(U);$t=p(Ks,"in the examples below, notice that you need to access "),za=t(Ks,"CODE",{class:!0});var Pn=n(za);Bt=p(Pn,".value"),Pn.forEach(e),It=p(Ks," for reads, unlike above"),Ks.forEach(e),qt=i(u),jt=t(u,"HR",{}),Vt=i(u),A=t(u,"H2",{class:!0});var is=n(A);Gt=p(is,"C. "),Da=t(is,"CODE",{class:!0});var Rn=n(Da);Kt=p(Rn,"derived"),Rn.forEach(e),Ut=p(is," from "),Ca=t(is,"CODE",{class:!0});var Hn=n(Ca);Qt=p(Hn,"writable"),Hn.forEach(e),Jt=p(is," store"),is.forEach(e),Xt=i(u),H=t(u,"SECTION",{});var ds=n(H);Pa=t(ds,"PRE",{class:!0});var Po=n(Pa);Po.forEach(e),Yt=i(ds),Q=t(ds,"DIV",{class:!0});var Us=n(Q);J=t(Us,"P",{class:!0});var Qs=n(J);Ra=t(Qs,"SPAN",{class:!0});var On=n(Ra);As=p(On,gs),On.forEach(e),Zt=i(Qs),Ha=t(Qs,"SPAN",{class:!0});var Ro=n(Ha);Ro.forEach(e),Qs.forEach(e),xt=i(Us),X=t(Us,"P",{class:!0});var Js=n(X);ae=p(Js,`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads; is error prone because reading the `),Oa=t(Js,"CODE",{class:!0});var yn=n(Oa);se=p(yn,"writable"),yn.forEach(e),te=p(Js,` isn't
				reactive!`),Js.forEach(e),Us.forEach(e),ee=i(ds),ya=t(ds,"PRE",{class:!0});var Ho=n(ya);Ho.forEach(e),ds.forEach(e),ne=i(u),Y=t(u,"H2",{class:!0});var Xs=n(Y);oe=p(Xs,"D. "),Wa=t(Xs,"CODE",{class:!0});var Wn=n(Wa);le=p(Wn,"mutable"),Wn.forEach(e),pe=p(Xs," store"),Xs.forEach(e),ce=i(u),O=t(u,"SECTION",{});var ks=n(O);Ta=t(ks,"PRE",{class:!0});var Oo=n(Ta);Oo.forEach(e),ue=i(ks),Z=t(ks,"DIV",{class:!0});var Ys=n(Z);x=t(Ys,"P",{class:!0});var Zs=n(x);Aa=t(Zs,"SPAN",{class:!0});var Tn=n(Aa);Ls=p(Tn,zs),Tn.forEach(e),re=i(Zs),La=t(Zs,"SPAN",{class:!0});var yo=n(La);yo.forEach(e),Zs.forEach(e),ie=i(Ys),L=t(Ys,"P",{class:!0});var fs=n(L);de=p(fs,"works because it's a "),Fa=t(fs,"CODE",{class:!0});var An=n(Fa);ke=p(An,"mutable"),An.forEach(e),fe=p(fs,` store; doesn't clone the map; however notice that
				you need to access `),Sa=t(fs,"CODE",{class:!0});var Ln=n(Sa);ve=p(Ln,".value"),Ln.forEach(e),be=p(fs," on reads"),fs.forEach(e),Ys.forEach(e),he=i(ks),Na=t(ks,"PRE",{class:!0});var Wo=n(Na);Wo.forEach(e),ks.forEach(e),me=i(u),aa=t(u,"H2",{class:!0});var xs=n(aa);Ee=p(xs,"E. "),$a=t(xs,"CODE",{class:!0});var Fn=n($a);we=p(Fn,"fastMutable"),Fn.forEach(e),_e=p(xs," store"),xs.forEach(e),Me=i(u),y=t(u,"SECTION",{});var vs=n(y);Ba=t(vs,"PRE",{class:!0});var To=n(Ba);To.forEach(e),ge=i(vs),sa=t(vs,"DIV",{class:!0});var at=n(sa);ta=t(at,"P",{class:!0});var st=n(ta);Ia=t(st,"SPAN",{class:!0});var Sn=n(Ia);Fs=p(Sn,Ds),Sn.forEach(e),ze=i(st),qa=t(st,"SPAN",{class:!0});var Ao=n(qa);Ao.forEach(e),st.forEach(e),De=i(at),F=t(at,"P",{class:!0});var bs=n(F);Ce=p(bs,"works because it's a "),ja=t(bs,"CODE",{class:!0});var Nn=n(ja);Pe=p(Nn,"fastMutable"),Nn.forEach(e),Re=p(bs,` store, which compared to
				`),Va=t(bs,"CODE",{class:!0});var $n=n(Va);He=p($n,"mutable"),$n.forEach(e),Oe=p(bs,` is slightly more efficient because it swaps between two stable object references,
				so there's no extra garbage created, but it doesn't compose as an immutable value stream, so
				it may be a dangerously too-clever design`),bs.forEach(e),at.forEach(e),ye=i(vs),Ga=t(vs,"PRE",{class:!0});var Lo=n(Ga);Lo.forEach(e),vs.forEach(e),We=i(u),ea=t(u,"H2",{class:!0});var tt=n(ea);Te=p(tt,"F. "),Ka=t(tt,"CODE",{class:!0});var Bn=n(Ka);Ae=p(Bn,"mutable"),Bn.forEach(e),Le=p(tt," store with manual update and set"),tt.forEach(e),Fe=i(u),Ua=t(u,"PRE",{class:!0});var Fo=n(Ua);Fo.forEach(e),Se=i(u),h=t(u,"SECTION",{});var w=n(h);na=t(w,"DIV",{class:!0});var et=n(na);oa=t(et,"P",{class:!0});var nt=n(oa);Qa=t(nt,"SPAN",{class:!0});var In=n(Qa);Ss=p(In,Cs),In.forEach(e),Ne=i(nt),Ja=t(nt,"SPAN",{class:!0});var So=n(Ja);So.forEach(e),nt.forEach(e),$e=i(et),S=t(et,"P",{class:!0});var hs=n(S);Be=p(hs,"works because it's a "),Xa=t(hs,"CODE",{class:!0});var qn=n(Xa);Ie=p(qn,"mutable"),qn.forEach(e),qe=p(hs,` store, but mutates the value directly and then
				manually calls `),Ya=t(hs,"CODE",{class:!0});var jn=n(Ya);je=p(jn,".update()"),jn.forEach(e),Ve=p(hs,", which may be an antipattern"),hs.forEach(e),et.forEach(e),Ge=i(w),Za=t(w,"PRE",{class:!0});var No=n(Za);No.forEach(e),Ke=i(w),$=t(w,"P",{});var ms=n($);Ue=p(ms,"an alternative using the store's "),xa=t(ms,"CODE",{class:!0});var Vn=n(xa);Qe=p(Vn,"set"),Vn.forEach(e),Je=p(ms,` method, which is extra awkward because of
			the `),as=t(ms,"CODE",{class:!0});var Gn=n(as);Xe=p(Gn,".value"),Gn.forEach(e),Ye=p(ms,":"),ms.forEach(e),Ze=i(w),ss=t(w,"PRE",{class:!0});var $o=n(ss);$o.forEach(e),xe=i(w),ua=t(w,"P",{});var ot=n(ua);an=p(ot,"and you can set a new value if you need to, but if this is all you need, prefer a "),ts=t(ot,"CODE",{class:!0});var Kn=n(ts);sn=p(Kn,"writable"),Kn.forEach(e),tn=p(ot,":"),ot.forEach(e),en=i(w),es=t(w,"PRE",{class:!0});var Bo=n(es);Bo.forEach(e),nn=i(w),Ps=t(w,"P",{});var Un=n(Ps);on=p(Un,"or:"),Un.forEach(e),ln=i(w),ns=t(w,"PRE",{class:!0});var Io=n(ns);Io.forEach(e),w.forEach(e),pn=i(u),cn=t(u,"HR",{}),un=i(u),os=t(u,"FOOTER",{class:!0});var Qn=n(os);Rs=t(Qn,"P",{});var Jn=n(Rs);ls=t(Jn,"A",{href:!0});var Xn=n(ls);rn=p(Xn,"get the docs and public domain source code on GitHub"),Xn.forEach(e),Jn.forEach(e),Qn.forEach(e),u.forEach(e),this.h()},h(){o(E,"href","https://github.com/spiderspace/mutable"),o(b,"class","svelte-z1t7fb"),o(g,"class","svelte-z1t7fb"),o(N,"href","https://github.com/spiderspace/mutable"),o(C,"class","svelte-z1t7fb"),o(ia,"class","svelte-z1t7fb"),o(k,"class","svelte-z1t7fb"),o(da,"class","panel-inset svelte-z1t7fb"),o(ka,"class","count svelte-z1t7fb"),o(fa,"class","read-example svelte-z1t7fb"),o(q,"class","count-wrapper panel-outset svelte-z1t7fb"),o(va,"class","svelte-z1t7fb"),o(j,"class","svelte-z1t7fb"),o(W,"class","count-label svelte-z1t7fb"),o(I,"class","count-with-label svelte-z1t7fb"),o(ba,"class","panel-inset svelte-z1t7fb"),M(P,"--hue",d[12](d[0].get("a")),!1),o(ha,"class","svelte-z1t7fb"),o(V,"class","svelte-z1t7fb"),o(ma,"class","panel-inset svelte-z1t7fb"),o(Ea,"class","count svelte-z1t7fb"),o(wa,"class","read-example svelte-z1t7fb"),o(K,"class","count-wrapper panel-outset svelte-z1t7fb"),o(_a,"class","svelte-z1t7fb"),o(Ma,"class","svelte-z1t7fb"),o(T,"class","count-label svelte-z1t7fb"),o(G,"class","count-with-label svelte-z1t7fb"),o(ga,"class","panel-inset svelte-z1t7fb"),M(R,"--hue",d[12](d[1].get("a")),!1),o(za,"class","svelte-z1t7fb"),M(U,"margin-bottom","0"),o(Da,"class","svelte-z1t7fb"),o(Ca,"class","svelte-z1t7fb"),o(A,"class","svelte-z1t7fb"),o(Pa,"class","panel-inset svelte-z1t7fb"),o(Ra,"class","count svelte-z1t7fb"),o(Ha,"class","read-example svelte-z1t7fb"),o(J,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Oa,"class","svelte-z1t7fb"),o(X,"class","count-label svelte-z1t7fb"),o(Q,"class","count-with-label svelte-z1t7fb"),o(ya,"class","panel-inset svelte-z1t7fb"),M(H,"--hue",d[12](d[3].value.get("a")),!1),o(Wa,"class","svelte-z1t7fb"),o(Y,"class","svelte-z1t7fb"),o(Ta,"class","panel-inset svelte-z1t7fb"),o(Aa,"class","count svelte-z1t7fb"),o(La,"class","read-example svelte-z1t7fb"),o(x,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Fa,"class","svelte-z1t7fb"),o(Sa,"class","svelte-z1t7fb"),o(L,"class","count-label svelte-z1t7fb"),o(Z,"class","count-with-label svelte-z1t7fb"),o(Na,"class","panel-inset svelte-z1t7fb"),M(O,"--hue",d[12](d[4].value.get("a")),!1),o($a,"class","svelte-z1t7fb"),o(aa,"class","svelte-z1t7fb"),o(Ba,"class","panel-inset svelte-z1t7fb"),o(Ia,"class","count svelte-z1t7fb"),o(qa,"class","read-example svelte-z1t7fb"),o(ta,"class","count-wrapper panel-outset svelte-z1t7fb"),o(ja,"class","svelte-z1t7fb"),o(Va,"class","svelte-z1t7fb"),o(F,"class","count-label svelte-z1t7fb"),o(sa,"class","count-with-label svelte-z1t7fb"),o(Ga,"class","panel-inset svelte-z1t7fb"),M(y,"--hue",d[12](d[5].value.get("a")),!1),o(Ka,"class","svelte-z1t7fb"),o(ea,"class","svelte-z1t7fb"),o(Ua,"class","panel-inset svelte-z1t7fb"),o(Qa,"class","count svelte-z1t7fb"),o(Ja,"class","read-example svelte-z1t7fb"),o(oa,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Xa,"class","svelte-z1t7fb"),o(Ya,"class","svelte-z1t7fb"),o(S,"class","count-label svelte-z1t7fb"),o(na,"class","count-with-label svelte-z1t7fb"),o(Za,"class","panel-inset svelte-z1t7fb"),o(xa,"class","svelte-z1t7fb"),o(as,"class","svelte-z1t7fb"),o(ss,"class","panel-inset svelte-z1t7fb"),o(ts,"class","svelte-z1t7fb"),o(es,"class","panel-inset svelte-z1t7fb"),o(ns,"class","panel-inset svelte-z1t7fb"),M(h,"--hue",d[12](d[2].value.get("a")),!1),o(ls,"href","https://github.com/spiderspace/mutable"),o(os,"class","svelte-z1t7fb"),o(c,"class","markup column svelte-z1t7fb")},m(f,u){Go(f,c,u),a(c,v),a(v,b),a(b,E),a(E,z),a(v,D),a(v,_),a(_,ra),a(_,g),a(g,B),a(_,la),a(_,N),a(N,pa),a(c,ca),a(c,C),a(C,Os),a(c,ys),a(c,k),a(k,pt),a(k,ia),a(ia,ct),a(k,ut),a(c,rt),a(c,P),a(P,da),da.innerHTML=xn,a(P,it),a(P,I),a(I,q),a(q,ka),a(ka,Ws),a(q,dt),a(q,fa),fa.innerHTML=ao,a(I,kt),a(I,W),a(W,ft),a(W,va),a(va,vt),a(W,bt),a(W,j),a(j,ht),a(j,mt),a(j,Et),a(W,wt),a(P,_t),a(P,ba),ba.innerHTML=so,a(c,Mt),a(c,V),a(V,gt),a(V,ha),a(ha,zt),a(V,Dt),a(c,Ct),a(c,R),a(R,ma),ma.innerHTML=to,a(R,Pt),a(R,G),a(G,K),a(K,Ea),a(Ea,Ts),a(K,Rt),a(K,wa),wa.innerHTML=eo,a(G,Ht),a(G,T),a(T,Ot),a(T,_a),a(_a,yt),a(T,Wt),a(T,Ma),a(Ma,Tt),a(T,At),a(R,Lt),a(R,ga),ga.innerHTML=no,a(c,Ft),a(c,St),a(c,Nt),a(c,U),a(U,$t),a(U,za),a(za,Bt),a(U,It),a(c,qt),a(c,jt),a(c,Vt),a(c,A),a(A,Gt),a(A,Da),a(Da,Kt),a(A,Ut),a(A,Ca),a(Ca,Qt),a(A,Jt),a(c,Xt),a(c,H),a(H,Pa),Pa.innerHTML=oo,a(H,Yt),a(H,Q),a(Q,J),a(J,Ra),a(Ra,As),a(J,Zt),a(J,Ha),Ha.innerHTML=lo,a(Q,xt),a(Q,X),a(X,ae),a(X,Oa),a(Oa,se),a(X,te),a(H,ee),a(H,ya),ya.innerHTML=po,a(c,ne),a(c,Y),a(Y,oe),a(Y,Wa),a(Wa,le),a(Y,pe),a(c,ce),a(c,O),a(O,Ta),Ta.innerHTML=co,a(O,ue),a(O,Z),a(Z,x),a(x,Aa),a(Aa,Ls),a(x,re),a(x,La),La.innerHTML=uo,a(Z,ie),a(Z,L),a(L,de),a(L,Fa),a(Fa,ke),a(L,fe),a(L,Sa),a(Sa,ve),a(L,be),a(O,he),a(O,Na),Na.innerHTML=ro,a(c,me),a(c,aa),a(aa,Ee),a(aa,$a),a($a,we),a(aa,_e),a(c,Me),a(c,y),a(y,Ba),Ba.innerHTML=io,a(y,ge),a(y,sa),a(sa,ta),a(ta,Ia),a(Ia,Fs),a(ta,ze),a(ta,qa),qa.innerHTML=ko,a(sa,De),a(sa,F),a(F,Ce),a(F,ja),a(ja,Pe),a(F,Re),a(F,Va),a(Va,He),a(F,Oe),a(y,ye),a(y,Ga),Ga.innerHTML=fo,a(c,We),a(c,ea),a(ea,Te),a(ea,Ka),a(Ka,Ae),a(ea,Le),a(c,Fe),a(c,Ua),Ua.innerHTML=vo,a(c,Se),a(c,h),a(h,na),a(na,oa),a(oa,Qa),a(Qa,Ss),a(oa,Ne),a(oa,Ja),Ja.innerHTML=bo,a(na,$e),a(na,S),a(S,Be),a(S,Xa),a(Xa,Ie),a(S,qe),a(S,Ya),a(Ya,je),a(S,Ve),a(h,Ge),a(h,Za),Za.innerHTML=ho,a(h,Ke),a(h,$),a($,Ue),a($,xa),a(xa,Qe),a($,Je),a($,as),a(as,Xe),a($,Ye),a(h,Ze),a(h,ss),ss.innerHTML=mo,a(h,xe),a(h,ua),a(ua,an),a(ua,ts),a(ts,sn),a(ua,tn),a(h,en),a(h,es),es.innerHTML=Eo,a(h,nn),a(h,Ps),a(Ps,on),a(h,ln),a(h,ns),ns.innerHTML=wo,a(c,pn),a(c,cn),a(c,un),a(c,os),a(os,Rs),a(Rs,ls),a(ls,rn),dn||(fn=Ko(C,"click",d[13]),dn=!0)},p(f,[u]){u&1&&_s!==(_s=f[0].get("a")+"")&&Es(Ws,_s),u&1&&M(P,"--hue",f[12](f[0].get("a")),!1),u&2&&Ms!==(Ms=f[1].get("a")+"")&&Es(Ts,Ms),u&2&&M(R,"--hue",f[12](f[1].get("a")),!1),u&8&&gs!==(gs=f[3].value.get("a")+"")&&Es(As,gs),u&8&&M(H,"--hue",f[12](f[3].value.get("a")),!1),u&16&&zs!==(zs=f[4].value.get("a")+"")&&Es(Ls,zs),u&16&&M(O,"--hue",f[12](f[4].value.get("a")),!1),u&32&&Ds!==(Ds=f[5].value.get("a")+"")&&Es(Fs,Ds),u&32&&M(y,"--hue",f[12](f[5].value.get("a")),!1),u&4&&Cs!==(Cs=f[2].value.get("a")+"")&&Es(Ss,Cs),u&4&&M(h,"--hue",f[12](f[2].value.get("a")),!1)},i:Yn,o:Yn,d(f){f&&e(c),dn=!1,fn()}}}function ml(d,c,v){let b,E,z,D,_,ra;const g=[["a",1]],B=lt(new Map(g));ws(d,B,k=>v(0,b=k));const la=lt(new Map(g));ws(d,la,k=>v(1,E=k));const N=Uo(B,k=>({value:k}));ws(d,N,k=>v(3,D=k));const pa=Zn(new Map(g));ws(d,pa,k=>v(4,_=k));const ca=Jo(new Map(g));ws(d,ca,k=>v(5,ra=k));const C=Zn(new Map(g));return ws(d,C,k=>v(2,z=k)),[b,E,z,D,_,ra,B,la,N,pa,ca,C,k=>k*37+"",()=>{b.set("a",b.get("a")+1),B.set(b),E.set("a",E.get("a")+1),Qo(la,E=new Map(E),E),pa.update(k=>{k.set("a",k.get("a")+1)}),ca.update(k=>{k.set("a",k.get("a")+1)}),z.value.set("a",z.value.get("a")+1),C.update()}]}class wl extends qo{constructor(c){super();jo(this,c,ml,hl,Vo,{})}}export{wl as default};
