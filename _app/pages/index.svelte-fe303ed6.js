import{C as nt,S as No,i as $o,n as Bo,e as s,t as l,j as r,c as t,a as n,g as p,d as e,m as i,b as o,K as g,f as Io,F as a,L as qo,s as ms,J as Un,M as Es,N as jo,O as Vo}from"../chunks/vendor-7ffe92ef.js";const Qn=d=>{const{subscribe:c,set:v}=nt({value:d});return{subscribe:c,update:b=>{if(b){const E=b(d);E!==void 0&&E!==d&&(d=E)}v({value:d})},set:b=>{d=b,v({value:d})}}},Go=d=>{let c=!1;const v={value:d},b={value:d},{subscribe:E,set:z}=nt(v);return{subscribe:E,update:D=>{if(D){const _=D(d);_!==void 0&&_!==d&&(d=v.value=b.value=_)}z((c=!c)?b:v)},set:D=>{d=v.value=b.value=D,z((c=!c)?b:v)}}},Ko='<span class="token keyword">const</span> writableMap <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Uo=`$writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Qo=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,Jo='<span class="token keyword">const</span> writableMapCloned <span class="token operator">=</span> <span class="token function">writable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',Xo=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,Yo=`$writableMapCloned<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMapCloned<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMapCloned <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>$writableMapCloned<span class="token punctuation">)</span><span class="token punctuation">;</span>`,Zo='<span class="token keyword">const</span> derivedWritableMap <span class="token operator">=</span> <span class="token function">derived</span><span class="token punctuation">(</span>writableMap<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">value</span><span class="token operator">:</span> $v<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',xo=`$derivedWritableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,al=`$writableMap<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $writableMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$writableMap <span class="token operator">=</span> $writableMap<span class="token punctuation">;</span>`,sl='<span class="token keyword">const</span> mutableMap <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',tl=`$mutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,el=`mutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,nl='<span class="token keyword">const</span> fastMutableMap <span class="token operator">=</span> <span class="token function">fastMutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',ol=`$fastMutableMap<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,ll=`fastMutableMap<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">$v</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
	$v<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $v<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,pl='<span class="token keyword">const</span> mutableMapManual <span class="token operator">=</span> <span class="token function">mutable</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',cl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>`,ul=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>`,rl=`$mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
$mutableMapManual <span class="token operator">=</span> $mutableMapManual<span class="token punctuation">.</span>value<span class="token punctuation">;</span>`,il='$mutableMapManual <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>',dl='mutableMapManual<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token comment">/*...*/</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>';var m={ADef:Ko,ARead:Uo,AWrite:Qo,BDef:Jo,BRead:Xo,BWrite:Yo,CDef:Zo,CRead:xo,CWrite:al,DDef:sl,DRead:tl,DWrite:el,EDef:nl,ERead:ol,EWrite:ll,FDef:pl,FRead:cl,F1Write:ul,F2Write:rl,F3Write:il,F4Write:dl};function kl(d){let c,v,b,E,z,D,_,ua,M,B,oa,N,la,pa,C,Hs,ys,k,ot,ra,lt,pt,ct,P,ia,Jn=m.ADef+"",ut,I,q,da,ws=d[0].get("a")+"",Os,rt,ka,Xn=m.ARead+"",it,W,dt,fa,kt,ft,j,vt,cn="{",bt,ht,mt,Et,va,Yn=m.AWrite+"",wt,V,_t,ba,gt,Mt,zt,R,ha,Zn=m.BDef+"",Dt,G,K,ma,_s=d[1].get("a")+"",Ws,Ct,Ea,xn=m.BRead+"",Pt,T,Rt,wa,Ht,yt,_a,Ot,Wt,Tt,ga,ao=m.BWrite+"",At,Lt,Ft,U,St,Ma,Nt,$t,Bt,It,qt,A,jt,za,Vt,Gt,Da,Kt,Ut,Qt,H,Ca,so=m.CDef+"",Jt,Q,J,Pa,gs=d[3].value.get("a")+"",Ts,Xt,Ra,to=m.CRead+"",Yt,Ha,Zt,xt,ya,eo=m.CWrite+"",ae,X,se,Oa,te,ee,ne,y,Wa,no=m.DDef+"",oe,Y,Z,Ta,Ms=d[4].value.get("a")+"",As,le,Aa,oo=m.DRead+"",pe,L,ce,La,ue,re,Fa,ie,de,ke,Sa,lo=m.DWrite+"",fe,x,ve,Na,be,he,me,O,$a,po=m.EDef+"",Ee,aa,sa,Ba,zs=d[5].value.get("a")+"",Ls,we,Ia,co=m.ERead+"",_e,F,ge,qa,Me,ze,ja,De,Ce,Pe,Va,uo=m.EWrite+"",Re,ta,He,Ga,ye,Oe,We,Ka,ro=m.FDef+"",Te,h,ea,na,Ua,Ds=d[2].value.get("a")+"",Fs,Ae,Qa,io=m.FRead+"",Le,S,Fe,Ja,Se,Ne,Xa,$e,Be,Ie,Ya,ko=m.F1Write+"",qe,$,je,Za,Ve,Ge,xa,Ke,Ue,Qe,as,fo=m.F2Write+"",Je,ca,Xe,ss,Ye,Ze,xe,ts,vo=m.F3Write+"",an,Cs,sn,tn,es,bo=m.F4Write+"",en,nn,on,ns,Ps,os,ln,pn,un;return{c(){c=s("main"),v=s("header"),b=s("h1"),E=s("a"),z=l("mutable"),D=r(),_=s("blockquote"),ua=l("using mutable values in Svelte stores with the "),M=s("code"),B=l("immutable"),oa=l(` compiler flag \u2014
			`),N=s("a"),la=l("learn more on GitHub"),pa=r(),C=s("button"),Hs=l("click me to make number++ go up"),ys=r(),k=s("h2"),ot=l("A. "),ra=s("code"),lt=l("writable"),pt=l(" store (broken! D:)"),ct=r(),P=s("section"),ia=s("pre"),ut=r(),I=s("div"),q=s("p"),da=s("span"),Os=l(ws),rt=r(),ka=s("span"),it=r(),W=s("p"),dt=l("fails to update as a "),fa=s("code"),kt=l("writable"),ft=l(" store because "),j=s("code"),vt=l("immutable="),bt=l(cn),ht=l("true}"),mt=l(` and
				we're mutating the map`),Et=r(),va=s("pre"),wt=r(),V=s("h2"),_t=l("B. cloned "),ba=s("code"),gt=l("writable"),Mt=l(" store"),zt=r(),R=s("section"),ha=s("pre"),Dt=r(),G=s("div"),K=s("p"),ma=s("span"),Ws=l(_s),Ct=r(),Ea=s("span"),Pt=r(),T=s("p"),Rt=l("works for "),wa=s("code"),Ht=l("Map"),yt=l(`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),_a=s("code"),Ot=l("WeakMap"),Wt=l(", one of the motivating usecases for this document"),Tt=r(),ga=s("pre"),At=r(),Lt=s("hr"),Ft=r(),U=s("blockquote"),St=l("in the examples below, notice that you need to access "),Ma=s("code"),Nt=l(".value"),$t=l(" for reads, unlike above"),Bt=r(),It=s("hr"),qt=r(),A=s("h2"),jt=l("C. "),za=s("code"),Vt=l("derived"),Gt=l(" from "),Da=s("code"),Kt=l("writable"),Ut=l(" store"),Qt=r(),H=s("section"),Ca=s("pre"),Jt=r(),Q=s("div"),J=s("p"),Pa=s("span"),Ts=l(gs),Xt=r(),Ra=s("span"),Yt=r(),Ha=s("p"),Zt=l(`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads, and it creates a small amount of garbage every change`),xt=r(),ya=s("pre"),ae=r(),X=s("h2"),se=l("D. "),Oa=s("code"),te=l("mutable"),ee=l(" store"),ne=r(),y=s("section"),Wa=s("pre"),oe=r(),Y=s("div"),Z=s("p"),Ta=s("span"),As=l(Ms),le=r(),Aa=s("span"),pe=r(),L=s("p"),ce=l("works because it's a "),La=s("code"),ue=l("mutable"),re=l(` store; doesn't clone the map; however notice that
				you need to access `),Fa=s("code"),ie=l(".value"),de=l(` on reads, and it creates a small amount of garbage every
				change`),ke=r(),Sa=s("pre"),fe=r(),x=s("h2"),ve=l("E. "),Na=s("code"),be=l("fastMutable"),he=l(" store"),me=r(),O=s("section"),$a=s("pre"),Ee=r(),aa=s("div"),sa=s("p"),Ba=s("span"),Ls=l(zs),we=r(),Ia=s("span"),_e=r(),F=s("p"),ge=l("works because it's a "),qa=s("code"),Me=l("fastMutable"),ze=l(` store, which compared to
				`),ja=s("code"),De=l("mutable"),Ce=l(` is slightly more efficient because it swaps between two stable object references,
				so there's no extra garbage created, but it doesn't compose as an immutable value stream, so
				it may be a dangerously too-clever design`),Pe=r(),Va=s("pre"),Re=r(),ta=s("h2"),He=l("F. "),Ga=s("code"),ye=l("mutable"),Oe=l(" store with manual update and set"),We=r(),Ka=s("pre"),Te=r(),h=s("section"),ea=s("div"),na=s("p"),Ua=s("span"),Fs=l(Ds),Ae=r(),Qa=s("span"),Le=r(),S=s("p"),Fe=l("works because it's a "),Ja=s("code"),Se=l("mutable"),Ne=l(` store, but mutates the value directly and then
				manually calls `),Xa=s("code"),$e=l(".update()"),Be=l(", which may be an antipattern"),Ie=r(),Ya=s("pre"),qe=r(),$=s("p"),je=l("an alternative using the store's "),Za=s("code"),Ve=l("set"),Ge=l(` method, which is extra awkward because of
			the `),xa=s("code"),Ke=l(".value"),Ue=l(":"),Qe=r(),as=s("pre"),Je=r(),ca=s("p"),Xe=l("and you can set a new value if you need to, but if this is all you need, prefer a "),ss=s("code"),Ye=l("writable"),Ze=l(":"),xe=r(),ts=s("pre"),an=r(),Cs=s("p"),sn=l("or:"),tn=r(),es=s("pre"),en=r(),nn=s("hr"),on=r(),ns=s("footer"),Ps=s("p"),os=s("a"),ln=l("get the docs and public domain source code on GitHub"),this.h()},l(f){c=t(f,"MAIN",{class:!0});var u=n(c);v=t(u,"HEADER",{});var Ss=n(v);b=t(Ss,"H1",{class:!0});var rn=n(b);E=t(rn,"A",{href:!0});var dn=n(E);z=p(dn,"mutable"),dn.forEach(e),rn.forEach(e),D=i(Ss),_=t(Ss,"BLOCKQUOTE",{});var Rs=n(_);ua=p(Rs,"using mutable values in Svelte stores with the "),M=t(Rs,"CODE",{class:!0});var kn=n(M);B=p(kn,"immutable"),kn.forEach(e),oa=p(Rs,` compiler flag \u2014
			`),N=t(Rs,"A",{href:!0});var fn=n(N);la=p(fn,"learn more on GitHub"),fn.forEach(e),Rs.forEach(e),Ss.forEach(e),pa=i(u),C=t(u,"BUTTON",{class:!0});var vn=n(C);Hs=p(vn,"click me to make number++ go up"),vn.forEach(e),ys=i(u),k=t(u,"H2",{class:!0});var Ns=n(k);ot=p(Ns,"A. "),ra=t(Ns,"CODE",{class:!0});var bn=n(ra);lt=p(bn,"writable"),bn.forEach(e),pt=p(Ns," store (broken! D:)"),Ns.forEach(e),ct=i(u),P=t(u,"SECTION",{});var ls=n(P);ia=t(ls,"PRE",{class:!0});var ho=n(ia);ho.forEach(e),ut=i(ls),I=t(ls,"DIV",{class:!0});var $s=n(I);q=t($s,"P",{class:!0});var Bs=n(q);da=t(Bs,"SPAN",{class:!0});var hn=n(da);Os=p(hn,ws),hn.forEach(e),rt=i(Bs),ka=t(Bs,"SPAN",{class:!0});var mo=n(ka);mo.forEach(e),Bs.forEach(e),it=i($s),W=t($s,"P",{class:!0});var ps=n(W);dt=p(ps,"fails to update as a "),fa=t(ps,"CODE",{class:!0});var mn=n(fa);kt=p(mn,"writable"),mn.forEach(e),ft=p(ps," store because "),j=t(ps,"CODE",{class:!0});var Is=n(j);vt=p(Is,"immutable="),bt=p(Is,cn),ht=p(Is,"true}"),Is.forEach(e),mt=p(ps,` and
				we're mutating the map`),ps.forEach(e),$s.forEach(e),Et=i(ls),va=t(ls,"PRE",{class:!0});var Eo=n(va);Eo.forEach(e),ls.forEach(e),wt=i(u),V=t(u,"H2",{class:!0});var qs=n(V);_t=p(qs,"B. cloned "),ba=t(qs,"CODE",{class:!0});var En=n(ba);gt=p(En,"writable"),En.forEach(e),Mt=p(qs," store"),qs.forEach(e),zt=i(u),R=t(u,"SECTION",{});var cs=n(R);ha=t(cs,"PRE",{class:!0});var wo=n(ha);wo.forEach(e),Dt=i(cs),G=t(cs,"DIV",{class:!0});var js=n(G);K=t(js,"P",{class:!0});var Vs=n(K);ma=t(Vs,"SPAN",{class:!0});var wn=n(ma);Ws=p(wn,_s),wn.forEach(e),Ct=i(Vs),Ea=t(Vs,"SPAN",{class:!0});var _o=n(Ea);_o.forEach(e),Vs.forEach(e),Pt=i(js),T=t(js,"P",{class:!0});var us=n(T);Rt=p(us,"works for "),wa=t(us,"CODE",{class:!0});var _n=n(wa);Ht=p(_n,"Map"),_n.forEach(e),yt=p(us,`, but in some cases, causes tremendous garbage and slowness; also,
				it does not work for `),_a=t(us,"CODE",{class:!0});var gn=n(_a);Ot=p(gn,"WeakMap"),gn.forEach(e),Wt=p(us,", one of the motivating usecases for this document"),us.forEach(e),js.forEach(e),Tt=i(cs),ga=t(cs,"PRE",{class:!0});var go=n(ga);go.forEach(e),cs.forEach(e),At=i(u),Lt=t(u,"HR",{}),Ft=i(u),U=t(u,"BLOCKQUOTE",{style:!0});var Gs=n(U);St=p(Gs,"in the examples below, notice that you need to access "),Ma=t(Gs,"CODE",{class:!0});var Mn=n(Ma);Nt=p(Mn,".value"),Mn.forEach(e),$t=p(Gs," for reads, unlike above"),Gs.forEach(e),Bt=i(u),It=t(u,"HR",{}),qt=i(u),A=t(u,"H2",{class:!0});var rs=n(A);jt=p(rs,"C. "),za=t(rs,"CODE",{class:!0});var zn=n(za);Vt=p(zn,"derived"),zn.forEach(e),Gt=p(rs," from "),Da=t(rs,"CODE",{class:!0});var Dn=n(Da);Kt=p(Dn,"writable"),Dn.forEach(e),Ut=p(rs," store"),rs.forEach(e),Qt=i(u),H=t(u,"SECTION",{});var is=n(H);Ca=t(is,"PRE",{class:!0});var Mo=n(Ca);Mo.forEach(e),Jt=i(is),Q=t(is,"DIV",{class:!0});var Ks=n(Q);J=t(Ks,"P",{class:!0});var Us=n(J);Pa=t(Us,"SPAN",{class:!0});var Cn=n(Pa);Ts=p(Cn,gs),Cn.forEach(e),Xt=i(Us),Ra=t(Us,"SPAN",{class:!0});var zo=n(Ra);zo.forEach(e),Us.forEach(e),Yt=i(Ks),Ha=t(Ks,"P",{class:!0});var Pn=n(Ha);Zt=p(Pn,`works with no new modules, and doesn't clone the map, but now we're juggling two stores, one
				for writes and one for reads, and it creates a small amount of garbage every change`),Pn.forEach(e),Ks.forEach(e),xt=i(is),ya=t(is,"PRE",{class:!0});var Do=n(ya);Do.forEach(e),is.forEach(e),ae=i(u),X=t(u,"H2",{class:!0});var Qs=n(X);se=p(Qs,"D. "),Oa=t(Qs,"CODE",{class:!0});var Rn=n(Oa);te=p(Rn,"mutable"),Rn.forEach(e),ee=p(Qs," store"),Qs.forEach(e),ne=i(u),y=t(u,"SECTION",{});var ds=n(y);Wa=t(ds,"PRE",{class:!0});var Co=n(Wa);Co.forEach(e),oe=i(ds),Y=t(ds,"DIV",{class:!0});var Js=n(Y);Z=t(Js,"P",{class:!0});var Xs=n(Z);Ta=t(Xs,"SPAN",{class:!0});var Hn=n(Ta);As=p(Hn,Ms),Hn.forEach(e),le=i(Xs),Aa=t(Xs,"SPAN",{class:!0});var Po=n(Aa);Po.forEach(e),Xs.forEach(e),pe=i(Js),L=t(Js,"P",{class:!0});var ks=n(L);ce=p(ks,"works because it's a "),La=t(ks,"CODE",{class:!0});var yn=n(La);ue=p(yn,"mutable"),yn.forEach(e),re=p(ks,` store; doesn't clone the map; however notice that
				you need to access `),Fa=t(ks,"CODE",{class:!0});var On=n(Fa);ie=p(On,".value"),On.forEach(e),de=p(ks,` on reads, and it creates a small amount of garbage every
				change`),ks.forEach(e),Js.forEach(e),ke=i(ds),Sa=t(ds,"PRE",{class:!0});var Ro=n(Sa);Ro.forEach(e),ds.forEach(e),fe=i(u),x=t(u,"H2",{class:!0});var Ys=n(x);ve=p(Ys,"E. "),Na=t(Ys,"CODE",{class:!0});var Wn=n(Na);be=p(Wn,"fastMutable"),Wn.forEach(e),he=p(Ys," store"),Ys.forEach(e),me=i(u),O=t(u,"SECTION",{});var fs=n(O);$a=t(fs,"PRE",{class:!0});var Ho=n($a);Ho.forEach(e),Ee=i(fs),aa=t(fs,"DIV",{class:!0});var Zs=n(aa);sa=t(Zs,"P",{class:!0});var xs=n(sa);Ba=t(xs,"SPAN",{class:!0});var Tn=n(Ba);Ls=p(Tn,zs),Tn.forEach(e),we=i(xs),Ia=t(xs,"SPAN",{class:!0});var yo=n(Ia);yo.forEach(e),xs.forEach(e),_e=i(Zs),F=t(Zs,"P",{class:!0});var vs=n(F);ge=p(vs,"works because it's a "),qa=t(vs,"CODE",{class:!0});var An=n(qa);Me=p(An,"fastMutable"),An.forEach(e),ze=p(vs,` store, which compared to
				`),ja=t(vs,"CODE",{class:!0});var Ln=n(ja);De=p(Ln,"mutable"),Ln.forEach(e),Ce=p(vs,` is slightly more efficient because it swaps between two stable object references,
				so there's no extra garbage created, but it doesn't compose as an immutable value stream, so
				it may be a dangerously too-clever design`),vs.forEach(e),Zs.forEach(e),Pe=i(fs),Va=t(fs,"PRE",{class:!0});var Oo=n(Va);Oo.forEach(e),fs.forEach(e),Re=i(u),ta=t(u,"H2",{class:!0});var at=n(ta);He=p(at,"F. "),Ga=t(at,"CODE",{class:!0});var Fn=n(Ga);ye=p(Fn,"mutable"),Fn.forEach(e),Oe=p(at," store with manual update and set"),at.forEach(e),We=i(u),Ka=t(u,"PRE",{class:!0});var Wo=n(Ka);Wo.forEach(e),Te=i(u),h=t(u,"SECTION",{});var w=n(h);ea=t(w,"DIV",{class:!0});var st=n(ea);na=t(st,"P",{class:!0});var tt=n(na);Ua=t(tt,"SPAN",{class:!0});var Sn=n(Ua);Fs=p(Sn,Ds),Sn.forEach(e),Ae=i(tt),Qa=t(tt,"SPAN",{class:!0});var To=n(Qa);To.forEach(e),tt.forEach(e),Le=i(st),S=t(st,"P",{class:!0});var bs=n(S);Fe=p(bs,"works because it's a "),Ja=t(bs,"CODE",{class:!0});var Nn=n(Ja);Se=p(Nn,"mutable"),Nn.forEach(e),Ne=p(bs,` store, but mutates the value directly and then
				manually calls `),Xa=t(bs,"CODE",{class:!0});var $n=n(Xa);$e=p($n,".update()"),$n.forEach(e),Be=p(bs,", which may be an antipattern"),bs.forEach(e),st.forEach(e),Ie=i(w),Ya=t(w,"PRE",{class:!0});var Ao=n(Ya);Ao.forEach(e),qe=i(w),$=t(w,"P",{});var hs=n($);je=p(hs,"an alternative using the store's "),Za=t(hs,"CODE",{class:!0});var Bn=n(Za);Ve=p(Bn,"set"),Bn.forEach(e),Ge=p(hs,` method, which is extra awkward because of
			the `),xa=t(hs,"CODE",{class:!0});var In=n(xa);Ke=p(In,".value"),In.forEach(e),Ue=p(hs,":"),hs.forEach(e),Qe=i(w),as=t(w,"PRE",{class:!0});var Lo=n(as);Lo.forEach(e),Je=i(w),ca=t(w,"P",{});var et=n(ca);Xe=p(et,"and you can set a new value if you need to, but if this is all you need, prefer a "),ss=t(et,"CODE",{class:!0});var qn=n(ss);Ye=p(qn,"writable"),qn.forEach(e),Ze=p(et,":"),et.forEach(e),xe=i(w),ts=t(w,"PRE",{class:!0});var Fo=n(ts);Fo.forEach(e),an=i(w),Cs=t(w,"P",{});var jn=n(Cs);sn=p(jn,"or:"),jn.forEach(e),tn=i(w),es=t(w,"PRE",{class:!0});var So=n(es);So.forEach(e),w.forEach(e),en=i(u),nn=t(u,"HR",{}),on=i(u),ns=t(u,"FOOTER",{class:!0});var Vn=n(ns);Ps=t(Vn,"P",{});var Gn=n(Ps);os=t(Gn,"A",{href:!0});var Kn=n(os);ln=p(Kn,"get the docs and public domain source code on GitHub"),Kn.forEach(e),Gn.forEach(e),Vn.forEach(e),u.forEach(e),this.h()},h(){o(E,"href","https://github.com/spiderspace/mutable"),o(b,"class","svelte-z1t7fb"),o(M,"class","svelte-z1t7fb"),o(N,"href","https://github.com/spiderspace/mutable"),o(C,"class","svelte-z1t7fb"),o(ra,"class","svelte-z1t7fb"),o(k,"class","svelte-z1t7fb"),o(ia,"class","panel-inset svelte-z1t7fb"),o(da,"class","count svelte-z1t7fb"),o(ka,"class","read-example svelte-z1t7fb"),o(q,"class","count-wrapper panel-outset svelte-z1t7fb"),o(fa,"class","svelte-z1t7fb"),o(j,"class","svelte-z1t7fb"),o(W,"class","count-label svelte-z1t7fb"),o(I,"class","count-with-label svelte-z1t7fb"),o(va,"class","panel-inset svelte-z1t7fb"),g(P,"--hue",d[12](d[0].get("a")),!1),o(ba,"class","svelte-z1t7fb"),o(V,"class","svelte-z1t7fb"),o(ha,"class","panel-inset svelte-z1t7fb"),o(ma,"class","count svelte-z1t7fb"),o(Ea,"class","read-example svelte-z1t7fb"),o(K,"class","count-wrapper panel-outset svelte-z1t7fb"),o(wa,"class","svelte-z1t7fb"),o(_a,"class","svelte-z1t7fb"),o(T,"class","count-label svelte-z1t7fb"),o(G,"class","count-with-label svelte-z1t7fb"),o(ga,"class","panel-inset svelte-z1t7fb"),g(R,"--hue",d[12](d[1].get("a")),!1),o(Ma,"class","svelte-z1t7fb"),g(U,"margin-bottom","0"),o(za,"class","svelte-z1t7fb"),o(Da,"class","svelte-z1t7fb"),o(A,"class","svelte-z1t7fb"),o(Ca,"class","panel-inset svelte-z1t7fb"),o(Pa,"class","count svelte-z1t7fb"),o(Ra,"class","read-example svelte-z1t7fb"),o(J,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Ha,"class","count-label svelte-z1t7fb"),o(Q,"class","count-with-label svelte-z1t7fb"),o(ya,"class","panel-inset svelte-z1t7fb"),g(H,"--hue",d[12](d[3].value.get("a")),!1),o(Oa,"class","svelte-z1t7fb"),o(X,"class","svelte-z1t7fb"),o(Wa,"class","panel-inset svelte-z1t7fb"),o(Ta,"class","count svelte-z1t7fb"),o(Aa,"class","read-example svelte-z1t7fb"),o(Z,"class","count-wrapper panel-outset svelte-z1t7fb"),o(La,"class","svelte-z1t7fb"),o(Fa,"class","svelte-z1t7fb"),o(L,"class","count-label svelte-z1t7fb"),o(Y,"class","count-with-label svelte-z1t7fb"),o(Sa,"class","panel-inset svelte-z1t7fb"),g(y,"--hue",d[12](d[4].value.get("a")),!1),o(Na,"class","svelte-z1t7fb"),o(x,"class","svelte-z1t7fb"),o($a,"class","panel-inset svelte-z1t7fb"),o(Ba,"class","count svelte-z1t7fb"),o(Ia,"class","read-example svelte-z1t7fb"),o(sa,"class","count-wrapper panel-outset svelte-z1t7fb"),o(qa,"class","svelte-z1t7fb"),o(ja,"class","svelte-z1t7fb"),o(F,"class","count-label svelte-z1t7fb"),o(aa,"class","count-with-label svelte-z1t7fb"),o(Va,"class","panel-inset svelte-z1t7fb"),g(O,"--hue",d[12](d[5].value.get("a")),!1),o(Ga,"class","svelte-z1t7fb"),o(ta,"class","svelte-z1t7fb"),o(Ka,"class","panel-inset svelte-z1t7fb"),o(Ua,"class","count svelte-z1t7fb"),o(Qa,"class","read-example svelte-z1t7fb"),o(na,"class","count-wrapper panel-outset svelte-z1t7fb"),o(Ja,"class","svelte-z1t7fb"),o(Xa,"class","svelte-z1t7fb"),o(S,"class","count-label svelte-z1t7fb"),o(ea,"class","count-with-label svelte-z1t7fb"),o(Ya,"class","panel-inset svelte-z1t7fb"),o(Za,"class","svelte-z1t7fb"),o(xa,"class","svelte-z1t7fb"),o(as,"class","panel-inset svelte-z1t7fb"),o(ss,"class","svelte-z1t7fb"),o(ts,"class","panel-inset svelte-z1t7fb"),o(es,"class","panel-inset svelte-z1t7fb"),g(h,"--hue",d[12](d[2].value.get("a")),!1),o(os,"href","https://github.com/spiderspace/mutable"),o(ns,"class","svelte-z1t7fb"),o(c,"class","markup column svelte-z1t7fb")},m(f,u){Io(f,c,u),a(c,v),a(v,b),a(b,E),a(E,z),a(v,D),a(v,_),a(_,ua),a(_,M),a(M,B),a(_,oa),a(_,N),a(N,la),a(c,pa),a(c,C),a(C,Hs),a(c,ys),a(c,k),a(k,ot),a(k,ra),a(ra,lt),a(k,pt),a(c,ct),a(c,P),a(P,ia),ia.innerHTML=Jn,a(P,ut),a(P,I),a(I,q),a(q,da),a(da,Os),a(q,rt),a(q,ka),ka.innerHTML=Xn,a(I,it),a(I,W),a(W,dt),a(W,fa),a(fa,kt),a(W,ft),a(W,j),a(j,vt),a(j,bt),a(j,ht),a(W,mt),a(P,Et),a(P,va),va.innerHTML=Yn,a(c,wt),a(c,V),a(V,_t),a(V,ba),a(ba,gt),a(V,Mt),a(c,zt),a(c,R),a(R,ha),ha.innerHTML=Zn,a(R,Dt),a(R,G),a(G,K),a(K,ma),a(ma,Ws),a(K,Ct),a(K,Ea),Ea.innerHTML=xn,a(G,Pt),a(G,T),a(T,Rt),a(T,wa),a(wa,Ht),a(T,yt),a(T,_a),a(_a,Ot),a(T,Wt),a(R,Tt),a(R,ga),ga.innerHTML=ao,a(c,At),a(c,Lt),a(c,Ft),a(c,U),a(U,St),a(U,Ma),a(Ma,Nt),a(U,$t),a(c,Bt),a(c,It),a(c,qt),a(c,A),a(A,jt),a(A,za),a(za,Vt),a(A,Gt),a(A,Da),a(Da,Kt),a(A,Ut),a(c,Qt),a(c,H),a(H,Ca),Ca.innerHTML=so,a(H,Jt),a(H,Q),a(Q,J),a(J,Pa),a(Pa,Ts),a(J,Xt),a(J,Ra),Ra.innerHTML=to,a(Q,Yt),a(Q,Ha),a(Ha,Zt),a(H,xt),a(H,ya),ya.innerHTML=eo,a(c,ae),a(c,X),a(X,se),a(X,Oa),a(Oa,te),a(X,ee),a(c,ne),a(c,y),a(y,Wa),Wa.innerHTML=no,a(y,oe),a(y,Y),a(Y,Z),a(Z,Ta),a(Ta,As),a(Z,le),a(Z,Aa),Aa.innerHTML=oo,a(Y,pe),a(Y,L),a(L,ce),a(L,La),a(La,ue),a(L,re),a(L,Fa),a(Fa,ie),a(L,de),a(y,ke),a(y,Sa),Sa.innerHTML=lo,a(c,fe),a(c,x),a(x,ve),a(x,Na),a(Na,be),a(x,he),a(c,me),a(c,O),a(O,$a),$a.innerHTML=po,a(O,Ee),a(O,aa),a(aa,sa),a(sa,Ba),a(Ba,Ls),a(sa,we),a(sa,Ia),Ia.innerHTML=co,a(aa,_e),a(aa,F),a(F,ge),a(F,qa),a(qa,Me),a(F,ze),a(F,ja),a(ja,De),a(F,Ce),a(O,Pe),a(O,Va),Va.innerHTML=uo,a(c,Re),a(c,ta),a(ta,He),a(ta,Ga),a(Ga,ye),a(ta,Oe),a(c,We),a(c,Ka),Ka.innerHTML=ro,a(c,Te),a(c,h),a(h,ea),a(ea,na),a(na,Ua),a(Ua,Fs),a(na,Ae),a(na,Qa),Qa.innerHTML=io,a(ea,Le),a(ea,S),a(S,Fe),a(S,Ja),a(Ja,Se),a(S,Ne),a(S,Xa),a(Xa,$e),a(S,Be),a(h,Ie),a(h,Ya),Ya.innerHTML=ko,a(h,qe),a(h,$),a($,je),a($,Za),a(Za,Ve),a($,Ge),a($,xa),a(xa,Ke),a($,Ue),a(h,Qe),a(h,as),as.innerHTML=fo,a(h,Je),a(h,ca),a(ca,Xe),a(ca,ss),a(ss,Ye),a(ca,Ze),a(h,xe),a(h,ts),ts.innerHTML=vo,a(h,an),a(h,Cs),a(Cs,sn),a(h,tn),a(h,es),es.innerHTML=bo,a(c,en),a(c,nn),a(c,on),a(c,ns),a(ns,Ps),a(Ps,os),a(os,ln),pn||(un=qo(C,"click",d[13]),pn=!0)},p(f,[u]){u&1&&ws!==(ws=f[0].get("a")+"")&&ms(Os,ws),u&1&&g(P,"--hue",f[12](f[0].get("a")),!1),u&2&&_s!==(_s=f[1].get("a")+"")&&ms(Ws,_s),u&2&&g(R,"--hue",f[12](f[1].get("a")),!1),u&8&&gs!==(gs=f[3].value.get("a")+"")&&ms(Ts,gs),u&8&&g(H,"--hue",f[12](f[3].value.get("a")),!1),u&16&&Ms!==(Ms=f[4].value.get("a")+"")&&ms(As,Ms),u&16&&g(y,"--hue",f[12](f[4].value.get("a")),!1),u&32&&zs!==(zs=f[5].value.get("a")+"")&&ms(Ls,zs),u&32&&g(O,"--hue",f[12](f[5].value.get("a")),!1),u&4&&Ds!==(Ds=f[2].value.get("a")+"")&&ms(Fs,Ds),u&4&&g(h,"--hue",f[12](f[2].value.get("a")),!1)},i:Un,o:Un,d(f){f&&e(c),pn=!1,un()}}}function fl(d,c,v){let b,E,z,D,_,ua;const M=[["a",1]],B=nt(new Map(M));Es(d,B,k=>v(0,b=k));const oa=nt(new Map(M));Es(d,oa,k=>v(1,E=k));const N=jo(B,k=>({value:k}));Es(d,N,k=>v(3,D=k));const la=Qn(new Map(M));Es(d,la,k=>v(4,_=k));const pa=Go(new Map(M));Es(d,pa,k=>v(5,ua=k));const C=Qn(new Map(M));return Es(d,C,k=>v(2,z=k)),[b,E,z,D,_,ua,B,oa,N,la,pa,C,k=>k*37+"",()=>{b.set("a",b.get("a")+1),B.set(b),E.set("a",E.get("a")+1),Vo(oa,E=new Map(E),E),la.update(k=>{k.set("a",k.get("a")+1)}),pa.update(k=>{k.set("a",k.get("a")+1)}),z.value.set("a",z.value.get("a")+1),C.update()}]}class bl extends No{constructor(c){super();$o(this,c,fl,kl,Bo,{})}}export{bl as default};
