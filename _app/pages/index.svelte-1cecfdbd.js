import{C as _t,S as al,i as sl,n as ll,e as s,t,j as h,c as l,a as r,g as a,d as o,m as p,b as u,K as g,f as ol,F as e,L as rl,s as Te,J as el,M as Ie,N as nl,O as cl}from"../chunks/vendor-7ffe92ef.js";const tl=v=>{const{subscribe:n,set:b}=_t({value:v});return{subscribe:n,update:f=>{if(f){const E=f(v);E!==void 0&&E!==v&&(v=E)}b({value:v})},set:f=>{v=f,b({value:v})}}},ul=v=>{let n=!1;const b={value:v},f={value:v},{subscribe:E,set:q}=_t(b);return{subscribe:E,update:j=>{if(j){const _=j(v);_!==void 0&&_!==v&&(v=b.value=f.value=_)}q((n=!n)?f:b)},set:j=>{v=b.value=f.value=j,q((n=!n)?f:b)}}};function vl(v){let n,b,f,E,q,j,_,ee,w,T,Q,P,J,z,C,ze,Ve,d,wt,te,gt,qt,jt,D,S,ae,Be=v[0].get("a")+"",Xe,Ct,se,Ot,$t,I,kt,ds="{",Pt,Dt,St,le,Ht,Nt,B,At,oe,Rt,yt,Tt,H,re,ne,Fe=v[1].get("a")+"",Ye,It,Bt,ce,Ft,Gt,V,Wt,ue,Kt,Lt,Ut,O,Qt,ve,Jt,zt,de,Vt,Xt,Yt,N,he,pe,Ge=v[3].value.get("a")+"",Ze,Zt,xt,F,ea,hs="{",ta,aa,sa,G,la,ie,oa,ra,na,A,R,be,We=v[4].value.get("a")+"",xe,ca,fe,ua,va,me,da,ha,W,pa,ps="{",ia,ba,fa,K,ma,Ee,Ea,Ma,_a,y,$,Me,Ke=v[5].value.get("a")+"",et,wa,_e,ga,qa,we,ja,Ca,Oa,L,$a,is="{",ka,Pa,Da,U,Sa,ge,Ha,Na,Aa,m,k,qe,Le=v[2].value.get("a")+"",tt,Ra,je,ya,Ta,Ce,Ia,Ba,Fa,Oe,Ga,Wa,X,Ka,$e,La,Ua,Qa,ke,Ja,za,Y,Va,Pe,Xa,Ya,Za,De,xa,es,Ue,ts,as,Se,ss,ls,os,rs,He,Qe,Ne,ns,cs,bs;return{c(){n=s("main"),b=s("header"),f=s("h1"),E=s("a"),q=t("mutable"),j=h(),_=s("blockquote"),ee=t("using mutable values in Svelte stores with the "),w=s("code"),T=t("immutable"),Q=t(` compiler flag.
			`),P=s("a"),J=t("learn more on GitHub"),z=h(),C=s("button"),ze=t("click me to make number++ go up"),Ve=h(),d=s("h2"),wt=t("A. "),te=s("code"),gt=t("writable"),qt=t(" store (broken! D:)"),jt=h(),D=s("section"),S=s("p"),ae=s("span"),Xe=t(Be),Ct=t(`
			\u2190 fails to update as a `),se=s("code"),Ot=t("writable"),$t=t(" store because "),I=s("code"),kt=t("immutable="),Pt=t(ds),Dt=t("true}"),St=h(),le=s("pre"),Ht=t(`$writableMap.set('a', $writableMap.get('a') + 1);
$writableMap = $writableMap;`),Nt=h(),B=s("h2"),At=t("B. cloned "),oe=s("code"),Rt=t("writable"),yt=t(" store"),Tt=h(),H=s("section"),re=s("p"),ne=s("span"),Ye=t(Fe),It=t(`
			\u2190 works, but causes heart pain and in some cases tremendous garbage and slowness`),Bt=h(),ce=s("pre"),Ft=t(`$writableMapCloned.set('a', $writableMapCloned.get('a') + 1);
$writableMapCloned = new Map($writableMapCloned);`),Gt=h(),V=s("blockquote"),Wt=t("in the examples below, notice that you need to access "),ue=s("code"),Kt=t(".value"),Lt=t(" for reads, unlike above"),Ut=h(),O=s("h2"),Qt=t("C. "),ve=s("code"),Jt=t("derived"),zt=t(" from "),de=s("code"),Vt=t("writable"),Xt=t(" store"),Yt=h(),N=s("section"),he=s("p"),pe=s("span"),Ze=t(Ge),Zt=t(`
			\u2190 works with no new libraries, and doesn't clone the map, but we're juggling two stores, one for
			writes and one for reads, and it creates garbage every change`),xt=h(),F=s("pre"),ea=t("const derivedWritableMap = derived(writableMap, ($v) => ("),ta=t(hs),aa=t("value: $v}));"),sa=h(),G=s("h2"),la=t("D. "),ie=s("code"),oa=t("mutable"),ra=t(" store"),na=h(),A=s("section"),R=s("p"),be=s("span"),xe=t(We),ca=t(`
			\u2190 works because it's a `),fe=s("code"),ua=t("mutable"),va=t(` store; doesn't clone the map; however notice that
			you need to access `),me=s("code"),da=t(".value"),ha=h(),W=s("pre"),pa=t("mutableMap.update(($v) => "),ia=t(ps),ba=t(`
	$v.set('a', $v.get('a') + 1);
});`),fa=h(),K=s("h2"),ma=t("E. "),Ee=s("code"),Ea=t("fastMutable"),Ma=t(" store"),_a=h(),y=s("section"),$=s("p"),Me=s("span"),et=t(Ke),wa=t(`
			\u2190 works because it's a `),_e=s("code"),ga=t("fastMutable"),qa=t(` store, which compared to
			`),we=s("code"),ja=t("mutable"),Ca=t(` is slightly more efficient because it swaps between two stable object references,
			but it doesn't compose as an immutable value stream`),Oa=h(),L=s("pre"),$a=t("fastMutableMap.update(($v) => "),ka=t(is),Pa=t(`
	$v.set('a', $v.get('a') + 1);
});`),Da=h(),U=s("h2"),Sa=t("F. "),ge=s("code"),Ha=t("mutable"),Na=t(" store with manual update and set"),Aa=h(),m=s("section"),k=s("p"),qe=s("span"),tt=t(Le),Ra=t(`
			\u2190 works because it's a `),je=s("code"),ya=t("mutable"),Ta=t(` store, but mutates the value directly and then
			manually calls `),Ce=s("code"),Ia=t(".update()"),Ba=t(", which seems like an antipattern"),Fa=h(),Oe=s("pre"),Ga=t(`$mutableMapManual.value.set('a', $mutableMapManual.value.get('a') + 1);
mutableMapManual.update();`),Wa=h(),X=s("p"),Ka=t("an alternative using the store's "),$e=s("code"),La=t("set"),Ua=t(" method:"),Qa=h(),ke=s("pre"),Ja=t(`$mutableMapManual.value.set('a', $mutableMapManual.value.get('a') + 1);
$mutableMapManual = $mutableMapManual.value;`),za=h(),Y=s("p"),Va=t("and you can set a new value if you need to, but if this is all you need, prefer a "),Pe=s("code"),Xa=t("writable"),Ya=t(":"),Za=h(),De=s("pre"),xa=t("$mutableMapManual = new Map([/*...*/]);"),es=h(),Ue=s("p"),ts=t("or:"),as=h(),Se=s("pre"),ss=t("mutableMapManual.update(() => new Map([/*...*/]));"),ls=h(),os=s("hr"),rs=h(),He=s("footer"),Qe=s("p"),Ne=s("a"),ns=t("get the docs and public domain source code on GitHub"),this.h()},l(i){n=l(i,"MAIN",{class:!0});var c=r(n);b=l(c,"HEADER",{});var at=r(b);f=l(at,"H1",{class:!0});var fs=r(f);E=l(fs,"A",{href:!0});var ms=r(E);q=a(ms,"mutable"),ms.forEach(o),fs.forEach(o),j=p(at),_=l(at,"BLOCKQUOTE",{});var Je=r(_);ee=a(Je,"using mutable values in Svelte stores with the "),w=l(Je,"CODE",{class:!0});var Es=r(w);T=a(Es,"immutable"),Es.forEach(o),Q=a(Je,` compiler flag.
			`),P=l(Je,"A",{href:!0});var Ms=r(P);J=a(Ms,"learn more on GitHub"),Ms.forEach(o),Je.forEach(o),at.forEach(o),z=p(c),C=l(c,"BUTTON",{class:!0});var _s=r(C);ze=a(_s,"click me to make number++ go up"),_s.forEach(o),Ve=p(c),d=l(c,"H2",{class:!0});var st=r(d);wt=a(st,"A. "),te=l(st,"CODE",{class:!0});var ws=r(te);gt=a(ws,"writable"),ws.forEach(o),qt=a(st," store (broken! D:)"),st.forEach(o),jt=p(c),D=l(c,"SECTION",{});var lt=r(D);S=l(lt,"P",{});var Ae=r(S);ae=l(Ae,"SPAN",{class:!0});var gs=r(ae);Xe=a(gs,Be),gs.forEach(o),Ct=a(Ae,`
			\u2190 fails to update as a `),se=l(Ae,"CODE",{class:!0});var qs=r(se);Ot=a(qs,"writable"),qs.forEach(o),$t=a(Ae," store because "),I=l(Ae,"CODE",{class:!0});var ot=r(I);kt=a(ot,"immutable="),Pt=a(ot,ds),Dt=a(ot,"true}"),ot.forEach(o),Ae.forEach(o),St=p(lt),le=l(lt,"PRE",{class:!0});var js=r(le);Ht=a(js,`$writableMap.set('a', $writableMap.get('a') + 1);
$writableMap = $writableMap;`),js.forEach(o),lt.forEach(o),Nt=p(c),B=l(c,"H2",{class:!0});var rt=r(B);At=a(rt,"B. cloned "),oe=l(rt,"CODE",{class:!0});var Cs=r(oe);Rt=a(Cs,"writable"),Cs.forEach(o),yt=a(rt," store"),rt.forEach(o),Tt=p(c),H=l(c,"SECTION",{});var nt=r(H);re=l(nt,"P",{});var us=r(re);ne=l(us,"SPAN",{class:!0});var Os=r(ne);Ye=a(Os,Fe),Os.forEach(o),It=a(us,`
			\u2190 works, but causes heart pain and in some cases tremendous garbage and slowness`),us.forEach(o),Bt=p(nt),ce=l(nt,"PRE",{class:!0});var $s=r(ce);Ft=a($s,`$writableMapCloned.set('a', $writableMapCloned.get('a') + 1);
$writableMapCloned = new Map($writableMapCloned);`),$s.forEach(o),nt.forEach(o),Gt=p(c),V=l(c,"BLOCKQUOTE",{});var ct=r(V);Wt=a(ct,"in the examples below, notice that you need to access "),ue=l(ct,"CODE",{class:!0});var ks=r(ue);Kt=a(ks,".value"),ks.forEach(o),Lt=a(ct," for reads, unlike above"),ct.forEach(o),Ut=p(c),O=l(c,"H2",{class:!0});var Re=r(O);Qt=a(Re,"C. "),ve=l(Re,"CODE",{class:!0});var Ps=r(ve);Jt=a(Ps,"derived"),Ps.forEach(o),zt=a(Re," from "),de=l(Re,"CODE",{class:!0});var Ds=r(de);Vt=a(Ds,"writable"),Ds.forEach(o),Xt=a(Re," store"),Re.forEach(o),Yt=p(c),N=l(c,"SECTION",{});var ut=r(N);he=l(ut,"P",{});var vs=r(he);pe=l(vs,"SPAN",{class:!0});var Ss=r(pe);Ze=a(Ss,Ge),Ss.forEach(o),Zt=a(vs,`
			\u2190 works with no new libraries, and doesn't clone the map, but we're juggling two stores, one for
			writes and one for reads, and it creates garbage every change`),vs.forEach(o),xt=p(ut),F=l(ut,"PRE",{class:!0});var vt=r(F);ea=a(vt,"const derivedWritableMap = derived(writableMap, ($v) => ("),ta=a(vt,hs),aa=a(vt,"value: $v}));"),vt.forEach(o),ut.forEach(o),sa=p(c),G=l(c,"H2",{class:!0});var dt=r(G);la=a(dt,"D. "),ie=l(dt,"CODE",{class:!0});var Hs=r(ie);oa=a(Hs,"mutable"),Hs.forEach(o),ra=a(dt," store"),dt.forEach(o),na=p(c),A=l(c,"SECTION",{});var ht=r(A);R=l(ht,"P",{});var ye=r(R);be=l(ye,"SPAN",{class:!0});var Ns=r(be);xe=a(Ns,We),Ns.forEach(o),ca=a(ye,`
			\u2190 works because it's a `),fe=l(ye,"CODE",{class:!0});var As=r(fe);ua=a(As,"mutable"),As.forEach(o),va=a(ye,` store; doesn't clone the map; however notice that
			you need to access `),me=l(ye,"CODE",{class:!0});var Rs=r(me);da=a(Rs,".value"),Rs.forEach(o),ye.forEach(o),ha=p(ht),W=l(ht,"PRE",{class:!0});var pt=r(W);pa=a(pt,"mutableMap.update(($v) => "),ia=a(pt,ps),ba=a(pt,`
	$v.set('a', $v.get('a') + 1);
});`),pt.forEach(o),ht.forEach(o),fa=p(c),K=l(c,"H2",{class:!0});var it=r(K);ma=a(it,"E. "),Ee=l(it,"CODE",{class:!0});var ys=r(Ee);Ea=a(ys,"fastMutable"),ys.forEach(o),Ma=a(it," store"),it.forEach(o),_a=p(c),y=l(c,"SECTION",{});var bt=r(y);$=l(bt,"P",{});var Z=r($);Me=l(Z,"SPAN",{class:!0});var Ts=r(Me);et=a(Ts,Ke),Ts.forEach(o),wa=a(Z,`
			\u2190 works because it's a `),_e=l(Z,"CODE",{class:!0});var Is=r(_e);ga=a(Is,"fastMutable"),Is.forEach(o),qa=a(Z,` store, which compared to
			`),we=l(Z,"CODE",{class:!0});var Bs=r(we);ja=a(Bs,"mutable"),Bs.forEach(o),Ca=a(Z,` is slightly more efficient because it swaps between two stable object references,
			but it doesn't compose as an immutable value stream`),Z.forEach(o),Oa=p(bt),L=l(bt,"PRE",{class:!0});var ft=r(L);$a=a(ft,"fastMutableMap.update(($v) => "),ka=a(ft,is),Pa=a(ft,`
	$v.set('a', $v.get('a') + 1);
});`),ft.forEach(o),bt.forEach(o),Da=p(c),U=l(c,"H2",{class:!0});var mt=r(U);Sa=a(mt,"F. "),ge=l(mt,"CODE",{class:!0});var Fs=r(ge);Ha=a(Fs,"mutable"),Fs.forEach(o),Na=a(mt," store with manual update and set"),mt.forEach(o),Aa=p(c),m=l(c,"SECTION",{});var M=r(m);k=l(M,"P",{});var x=r(k);qe=l(x,"SPAN",{class:!0});var Gs=r(qe);tt=a(Gs,Le),Gs.forEach(o),Ra=a(x,`
			\u2190 works because it's a `),je=l(x,"CODE",{class:!0});var Ws=r(je);ya=a(Ws,"mutable"),Ws.forEach(o),Ta=a(x,` store, but mutates the value directly and then
			manually calls `),Ce=l(x,"CODE",{class:!0});var Ks=r(Ce);Ia=a(Ks,".update()"),Ks.forEach(o),Ba=a(x,", which seems like an antipattern"),x.forEach(o),Fa=p(M),Oe=l(M,"PRE",{class:!0});var Ls=r(Oe);Ga=a(Ls,`$mutableMapManual.value.set('a', $mutableMapManual.value.get('a') + 1);
mutableMapManual.update();`),Ls.forEach(o),Wa=p(M),X=l(M,"P",{});var Et=r(X);Ka=a(Et,"an alternative using the store's "),$e=l(Et,"CODE",{class:!0});var Us=r($e);La=a(Us,"set"),Us.forEach(o),Ua=a(Et," method:"),Et.forEach(o),Qa=p(M),ke=l(M,"PRE",{class:!0});var Qs=r(ke);Ja=a(Qs,`$mutableMapManual.value.set('a', $mutableMapManual.value.get('a') + 1);
$mutableMapManual = $mutableMapManual.value;`),Qs.forEach(o),za=p(M),Y=l(M,"P",{});var Mt=r(Y);Va=a(Mt,"and you can set a new value if you need to, but if this is all you need, prefer a "),Pe=l(Mt,"CODE",{class:!0});var Js=r(Pe);Xa=a(Js,"writable"),Js.forEach(o),Ya=a(Mt,":"),Mt.forEach(o),Za=p(M),De=l(M,"PRE",{class:!0});var zs=r(De);xa=a(zs,"$mutableMapManual = new Map([/*...*/]);"),zs.forEach(o),es=p(M),Ue=l(M,"P",{});var Vs=r(Ue);ts=a(Vs,"or:"),Vs.forEach(o),as=p(M),Se=l(M,"PRE",{class:!0});var Xs=r(Se);ss=a(Xs,"mutableMapManual.update(() => new Map([/*...*/]));"),Xs.forEach(o),M.forEach(o),ls=p(c),os=l(c,"HR",{}),rs=p(c),He=l(c,"FOOTER",{class:!0});var Ys=r(He);Qe=l(Ys,"P",{});var Zs=r(Qe);Ne=l(Zs,"A",{href:!0});var xs=r(Ne);ns=a(xs,"get the docs and public domain source code on GitHub"),xs.forEach(o),Zs.forEach(o),Ys.forEach(o),c.forEach(o),this.h()},h(){u(E,"href","https://github.com/spiderspace/mutable"),u(f,"class","svelte-5qhvja"),u(w,"class","svelte-5qhvja"),u(P,"href","https://github.com/spiderspace/mutable"),u(C,"class","svelte-5qhvja"),u(te,"class","svelte-5qhvja"),u(d,"class","svelte-5qhvja"),u(ae,"class","count svelte-5qhvja"),u(se,"class","svelte-5qhvja"),u(I,"class","svelte-5qhvja"),u(le,"class","panel-inset svelte-5qhvja"),g(D,"--hue",v[12](v[0].get("a")),!1),u(oe,"class","svelte-5qhvja"),u(B,"class","svelte-5qhvja"),u(ne,"class","count svelte-5qhvja"),u(ce,"class","panel-inset svelte-5qhvja"),g(H,"--hue",v[12](v[1].get("a")),!1),u(ue,"class","svelte-5qhvja"),u(ve,"class","svelte-5qhvja"),u(de,"class","svelte-5qhvja"),u(O,"class","svelte-5qhvja"),u(pe,"class","count svelte-5qhvja"),u(F,"class","panel-inset svelte-5qhvja"),g(N,"--hue",v[12](v[3].value.get("a")),!1),u(ie,"class","svelte-5qhvja"),u(G,"class","svelte-5qhvja"),u(be,"class","count svelte-5qhvja"),u(fe,"class","svelte-5qhvja"),u(me,"class","svelte-5qhvja"),u(W,"class","panel-inset svelte-5qhvja"),g(A,"--hue",v[12](v[4].value.get("a")),!1),u(Ee,"class","svelte-5qhvja"),u(K,"class","svelte-5qhvja"),u(Me,"class","count svelte-5qhvja"),u(_e,"class","svelte-5qhvja"),u(we,"class","svelte-5qhvja"),u(L,"class","panel-inset svelte-5qhvja"),g(y,"--hue",v[12](v[5].value.get("a")),!1),u(ge,"class","svelte-5qhvja"),u(U,"class","svelte-5qhvja"),u(qe,"class","count svelte-5qhvja"),u(je,"class","svelte-5qhvja"),u(Ce,"class","svelte-5qhvja"),u(Oe,"class","panel-inset svelte-5qhvja"),u($e,"class","svelte-5qhvja"),u(ke,"class","panel-inset svelte-5qhvja"),u(Pe,"class","svelte-5qhvja"),u(De,"class","panel-inset svelte-5qhvja"),u(Se,"class","panel-inset svelte-5qhvja"),g(m,"--hue",v[12](v[2].value.get("a")),!1),u(Ne,"href","https://github.com/spiderspace/mutable"),u(He,"class","svelte-5qhvja"),u(n,"class","markup column svelte-5qhvja")},m(i,c){ol(i,n,c),e(n,b),e(b,f),e(f,E),e(E,q),e(b,j),e(b,_),e(_,ee),e(_,w),e(w,T),e(_,Q),e(_,P),e(P,J),e(n,z),e(n,C),e(C,ze),e(n,Ve),e(n,d),e(d,wt),e(d,te),e(te,gt),e(d,qt),e(n,jt),e(n,D),e(D,S),e(S,ae),e(ae,Xe),e(S,Ct),e(S,se),e(se,Ot),e(S,$t),e(S,I),e(I,kt),e(I,Pt),e(I,Dt),e(D,St),e(D,le),e(le,Ht),e(n,Nt),e(n,B),e(B,At),e(B,oe),e(oe,Rt),e(B,yt),e(n,Tt),e(n,H),e(H,re),e(re,ne),e(ne,Ye),e(re,It),e(H,Bt),e(H,ce),e(ce,Ft),e(n,Gt),e(n,V),e(V,Wt),e(V,ue),e(ue,Kt),e(V,Lt),e(n,Ut),e(n,O),e(O,Qt),e(O,ve),e(ve,Jt),e(O,zt),e(O,de),e(de,Vt),e(O,Xt),e(n,Yt),e(n,N),e(N,he),e(he,pe),e(pe,Ze),e(he,Zt),e(N,xt),e(N,F),e(F,ea),e(F,ta),e(F,aa),e(n,sa),e(n,G),e(G,la),e(G,ie),e(ie,oa),e(G,ra),e(n,na),e(n,A),e(A,R),e(R,be),e(be,xe),e(R,ca),e(R,fe),e(fe,ua),e(R,va),e(R,me),e(me,da),e(A,ha),e(A,W),e(W,pa),e(W,ia),e(W,ba),e(n,fa),e(n,K),e(K,ma),e(K,Ee),e(Ee,Ea),e(K,Ma),e(n,_a),e(n,y),e(y,$),e($,Me),e(Me,et),e($,wa),e($,_e),e(_e,ga),e($,qa),e($,we),e(we,ja),e($,Ca),e(y,Oa),e(y,L),e(L,$a),e(L,ka),e(L,Pa),e(n,Da),e(n,U),e(U,Sa),e(U,ge),e(ge,Ha),e(U,Na),e(n,Aa),e(n,m),e(m,k),e(k,qe),e(qe,tt),e(k,Ra),e(k,je),e(je,ya),e(k,Ta),e(k,Ce),e(Ce,Ia),e(k,Ba),e(m,Fa),e(m,Oe),e(Oe,Ga),e(m,Wa),e(m,X),e(X,Ka),e(X,$e),e($e,La),e(X,Ua),e(m,Qa),e(m,ke),e(ke,Ja),e(m,za),e(m,Y),e(Y,Va),e(Y,Pe),e(Pe,Xa),e(Y,Ya),e(m,Za),e(m,De),e(De,xa),e(m,es),e(m,Ue),e(Ue,ts),e(m,as),e(m,Se),e(Se,ss),e(n,ls),e(n,os),e(n,rs),e(n,He),e(He,Qe),e(Qe,Ne),e(Ne,ns),cs||(bs=rl(C,"click",v[13]),cs=!0)},p(i,[c]){c&1&&Be!==(Be=i[0].get("a")+"")&&Te(Xe,Be),c&1&&g(D,"--hue",i[12](i[0].get("a")),!1),c&2&&Fe!==(Fe=i[1].get("a")+"")&&Te(Ye,Fe),c&2&&g(H,"--hue",i[12](i[1].get("a")),!1),c&8&&Ge!==(Ge=i[3].value.get("a")+"")&&Te(Ze,Ge),c&8&&g(N,"--hue",i[12](i[3].value.get("a")),!1),c&16&&We!==(We=i[4].value.get("a")+"")&&Te(xe,We),c&16&&g(A,"--hue",i[12](i[4].value.get("a")),!1),c&32&&Ke!==(Ke=i[5].value.get("a")+"")&&Te(et,Ke),c&32&&g(y,"--hue",i[12](i[5].value.get("a")),!1),c&4&&Le!==(Le=i[2].value.get("a")+"")&&Te(tt,Le),c&4&&g(m,"--hue",i[12](i[2].value.get("a")),!1)},i:el,o:el,d(i){i&&o(n),cs=!1,bs()}}}function dl(v,n,b){let f,E,q,j,_,ee;const w=[["a",1]],T=_t(new Map(w));Ie(v,T,d=>b(0,f=d));const Q=_t(new Map(w));Ie(v,Q,d=>b(1,E=d));const P=nl(T,d=>({value:d}));Ie(v,P,d=>b(3,j=d));const J=tl(new Map(w));Ie(v,J,d=>b(4,_=d));const z=ul(new Map(w));Ie(v,z,d=>b(5,ee=d));const C=tl(new Map(w));return Ie(v,C,d=>b(2,q=d)),[f,E,q,j,_,ee,T,Q,P,J,z,C,d=>d*37+"",()=>{f.set("a",f.get("a")+1),T.set(f),E.set("a",E.get("a")+1),cl(Q,E=new Map(E),E),J.update(d=>{d.set("a",d.get("a")+1)}),z.update(d=>{d.set("a",d.get("a")+1)}),q.value.set("a",q.value.get("a")+1),C.update()}]}class pl extends al{constructor(n){super();sl(this,n,dl,vl,ll,{})}}export{pl as default};
